"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateapp"]("app",{

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/panes/MediaLibrary.vue?vue&type=script&lang=js":
/*!*************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/panes/MediaLibrary.vue?vue&type=script&lang=js ***!
  \*************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _adc_core_ui_ImportFileZone__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/adc-core/ui/ImportFileZone */ \"./src/adc-core/ui/ImportFileZone.vue\");\n/* harmony import */ var _components_MediaTile_vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @/components/MediaTile.vue */ \"./src/components/MediaTile.vue\");\n/* harmony import */ var _components_MediaModal__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @/components/MediaModal */ \"./src/components/MediaModal.vue\");\nObject(function webpackMissingModule() { var e = new Error(\"Cannot find module '@/components/BatchEditInformationsModal'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }());\n\n\n\n\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    project: Object,\n    media_focused: [Boolean, String],\n    select_mode: String,\n    hide_already_present_medias: Boolean,\n    meta_filenames_already_present: [Boolean, Array],\n    show_only_media_type: String\n  },\n  components: {\n    ImportFileZone: _adc_core_ui_ImportFileZone__WEBPACK_IMPORTED_MODULE_2__[\"default\"],\n    MediaTile: _components_MediaTile_vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n    MediaModal: _components_MediaModal__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n    BatchEditInformationsModal: Object(function webpackMissingModule() { var e = new Error(\"Cannot find module '@/components/BatchEditInformationsModal'\"); e.code = 'MODULE_NOT_FOUND'; throw e; }()),\n    MediaMap: () => __webpack_require__.e(/*! import() */ \"src_adc-core_ui_MediaMap_vue\").then(__webpack_require__.bind(__webpack_require__, /*! @/adc-core/ui/MediaMap.vue */ \"./src/adc-core/ui/MediaMap.vue\"))\n  },\n  data() {\n    return {\n      selected_medias_paths: [],\n      batch_mode: false,\n      show_batch_informations_edit_modal: false,\n      tile_mode: localStorage.getItem(\"library_tile_mode\") || \"tiny\",\n      files_to_import: [],\n      media_just_focused: undefined,\n      hide_dropzone_timeout: undefined,\n      fav_filter: false,\n      group_mode: localStorage.getItem(\"library_group_mode\") || \"day\",\n      group_options: [{\n        key: \"day\",\n        label: this.$t(\"day\")\n      }, {\n        key: \"month\",\n        label: this.$t(\"month\")\n      }, {\n        key: \"year\",\n        label: this.$t(\"year\")\n      }],\n      keyword_of_media_to_display: \"all\",\n      type_of_media_to_display: this.show_only_media_type || \"all\",\n      types_of_medias: [{\n        key: \"all\",\n        label: this.$t(\"all_medias_types\")\n      }, {\n        key: \"image\",\n        label: this.$t(\"image\")\n      }, {\n        key: \"video\",\n        label: this.$t(\"video\")\n      }, {\n        key: \"audio\",\n        label: this.$t(\"audio\")\n      }, {\n        key: \"text\",\n        label: this.$t(\"text\")\n      }, {\n        key: \"pdf\",\n        label: this.$t(\"pdf\")\n      }, {\n        key: \"stl\",\n        label: this.$t(\"stl\")\n      }, {\n        key: \"obj\",\n        label: this.$t(\"obj\")\n      }, {\n        key: \"other\",\n        label: this.$t(\"other\")\n      }],\n      origin_of_media_to_display: \"all\",\n      origins_of_medias: [{\n        key: \"all\",\n        label: this.$t(\"all_origins\")\n      }, {\n        key: \"capture\",\n        label: \"1 • \" + this.$t(\"capture\")\n      }, {\n        key: \"collect\",\n        label: \"2 • \" + this.$t(\"collect\")\n      }, {\n        key: \"make\",\n        label: \"3 • \" + this.$t(\"make\")\n      }, {\n        key: \"publish\",\n        label: \"4 • \" + this.$t(\"publish\")\n      }],\n      author_of_media_to_display: \"all\"\n    };\n  },\n  created() {},\n  mounted() {\n    console.log(`MediaLibrary / mounted`);\n    window.addEventListener(\"keyup\", this.handleKeyPress);\n    if (this.media_focused) this.$nextTick(() => {\n      // this.scrollToMediaTile(this.media_focused);\n    });\n  },\n  beforeDestroy() {\n    window.removeEventListener(\"keyup\", this.handleKeyPress);\n  },\n  watch: {\n    tile_mode() {\n      localStorage.setItem(\"library_tile_mode\", this.tile_mode);\n    },\n    group_mode() {\n      localStorage.setItem(\"library_group_mode\", this.group_mode);\n    }\n  },\n  computed: {\n    medias() {\n      return this.project.$files || [];\n    },\n    sorted_medias() {\n      let _medias = JSON.parse(JSON.stringify(this.medias));\n      _medias = _medias.sort((a, b) => +new Date(b.$date_uploaded) - +new Date(a.$date_uploaded)).reverse().map((m, index) => {\n        m._index = index + 1;\n        return m;\n      }).reverse();\n      return _medias;\n    },\n    filtered_medias() {\n      return this.sorted_medias.filter(m => {\n        if (this.hide_already_present_medias === true) if (this.mediaTileAlreadySelected(m.$path)) return false;\n        if (this.fav_filter === true) if (m.fav !== true) return false;\n        if (this.type_of_media_to_display !== \"all\") if (m.$type !== this.type_of_media_to_display) return false;\n        if (this.origin_of_media_to_display !== \"all\") if (m.$origin !== this.origin_of_media_to_display) return false;\n        if (this.author_of_media_to_display !== \"all\") if (!m.$authors?.includes(this.author_of_media_to_display)) return false;\n        if (this.keyword_of_media_to_display !== \"all\") if (!m.keywords?.includes(this.keyword_of_media_to_display)) return false;\n        if (this.tile_mode === \"map\") if (!m.$location) return false;\n        return true;\n      });\n    },\n    grouped_medias() {\n      return this.groupFilesBy(this.filtered_medias, [\"$date_uploaded\"], this.group_mode);\n    },\n    keywords_of_medias() {\n      return this.sorted_medias.reduce((acc, m) => {\n        m.keywords?.map(k => {\n          if (!acc.some(_k => _k === k)) {\n            if (k) acc.push(k);\n          }\n        });\n        return acc;\n      }, []);\n    },\n    focused_media() {\n      if (!this.media_focused) return false;\n      const _focused_media = this.sorted_medias.find(f => this.getFilename(f.$path) === this.media_focused) || false;\n      if (_focused_media && this.$refs.mediaTiles) this.scrollToMediaTile(_focused_media.$path);\n      return _focused_media;\n    },\n    focused_media_index() {\n      return this.filtered_medias.findIndex(m => m.$path === this.focused_media.$path);\n    },\n    focused_media_position_in_list() {\n      if (this.filtered_medias.length === 1) return \"alone\";\n      if (this.focused_media_index === 0) return \"first\";\n      if (this.focused_media_index === this.filtered_medias.length - 1) return \"last\";\n      return \"none\";\n    },\n    authors_of_medias() {\n      return this.sorted_medias.reduce((acc, m) => {\n        m.$authors?.map(a_path => {\n          if (!acc.some(a => a.$path === a_path)) {\n            const a = this.getAuthor(a_path);\n            // if author is found, add\n            if (a) acc.push(a);\n          }\n        });\n        return acc;\n      }, []);\n    },\n    selected_medias() {\n      return this.selected_medias_paths.map(p => this.medias.find(m => m.$path === p));\n    }\n  },\n  methods: {\n    scrollToMediaTile(path) {\n      path;\n      // const focused_tile = this.$refs.mediaTiles.querySelector(\n      //   `[data-filepath=\"${slug}\"]`\n      // );\n      // if (focused_tile)\n      // focused_tile.scrollIntoView({\n      //   behavior: \"smooth\",\n      //   block: \"center\",\n      //   inline: \"nearest\",\n      // });\n    },\n    handleKeyPress(event) {\n      if (!this.$el.closest(\"._baseModal\") && this.$root.modal_is_opened || event.target.tagName.toLowerCase() === \"input\" || event.target.tagName.toLowerCase() === \"textarea\" || event.target.className.includes(\"ql-editor\") || event.target.hasAttribute(\"contenteditable\")) return;\n      switch (event.key) {\n        case \"Escape\":\n          this.closeMediaFocus();\n          break;\n        case \"w\":\n        case \"z\":\n        case \"ArrowLeft\":\n          this.prevMedia();\n          break;\n        case \"s\":\n        case \"ArrowRight\":\n          this.nextMedia();\n          break;\n        // case \"a\":\n        // case \"q\":\n        // case \" \":\n        //   this.toggleMediaFocus();\n        //   break;\n      }\n      return false;\n    },\n    mediaTileIsSelectable() {\n      return this.batch_mode;\n    },\n    mediaTileAlreadySelected(path) {\n      if (!this.meta_filenames_already_present) return false;\n      const meta_filename = this.getFilename(path);\n      const meta_filename_is_present = this.meta_filenames_already_present.find(list => list.medias.includes(meta_filename));\n      if (meta_filename_is_present) {\n        const label = meta_filename_is_present.label;\n        const color = meta_filename_is_present.color;\n        return {\n          label,\n          color\n        };\n      }\n      return false;\n    },\n    async removeAllMedias() {\n      for (const path of this.selected_medias_paths) {\n        await this.removeMedia(path);\n        this.selected_medias_paths = this.selected_medias_paths.filter(p => p !== path);\n      }\n      this.batch_mode = false;\n    },\n    selectAllVisibleMedias() {\n      this.selected_medias_paths = this.filtered_medias.map(fm => fm.$path);\n    },\n    cancelSelect() {\n      this.selected_medias_paths = [];\n      if (this.batch_mode) this.batch_mode = false;\n    },\n    quantityOfMediaWithKey({\n      key,\n      val\n    }) {\n      if (val === \"all\") return false;\n      const num = this.sorted_medias.filter(m => m[key] && m[key] === val).length;\n      return num;\n    },\n    formattedQuantity({\n      key,\n      val\n    }) {\n      const qty = this.quantityOfMediaWithKey({\n        key,\n        val\n      });\n      if (qty === false) return \"\";\n      return ` (${qty})`;\n    },\n    quantityOfMediaWithAuthor(author_path) {\n      const num = this.sorted_medias.filter(m => m.$authors?.includes(author_path)).length;\n      return num;\n    },\n    formattedQuantityWithAuthor(author_path) {\n      const qty = this.quantityOfMediaWithAuthor(author_path);\n      if (qty === false) return \"\";\n      return ` (${qty})`;\n    },\n    quantityOfMediaWithKeyword(keyword_key) {\n      const num = this.sorted_medias.filter(m => m.keywords?.includes(keyword_key)).length;\n      return num;\n    },\n    formattedQuantityWithKeyword(keyword_key) {\n      const qty = this.quantityOfMediaWithKeyword(keyword_key);\n      if (qty === false) return \"\";\n      return ` (${qty})`;\n    },\n    mediaJustImported(list_of_added_metas) {\n      if (!this.select_mode || this.select_mode === \"single\") return false;\n      const new_medias_path = list_of_added_metas.map(meta_filename => this.project.$path + \"/\" + meta_filename);\n      if (this.select_mode === \"multiple\") {\n        this.selected_medias_paths = this.selected_medias_paths.concat(new_medias_path);\n        this.batch_mode = true;\n      }\n\n      // todo add focus ring to indicate medias just sent\n      // this.$alertify\n      //   .closeLogOnClick(true)\n      //   .delay(4000)\n      //   .success(list_of_added_metas);\n    },\n    toggleMediaFocus(path) {\n      if (!path) return this.$emit(\"update:media_focused\", undefined);\n      const filename = this.getFilename(path);\n      if (this.media_focused === filename) {\n        this.closeMediaFocus();\n      } else {\n        this.openMediaFocus(filename);\n      }\n    },\n    openMediaFocus(filename) {\n      this.$emit(\"update:media_focused\", filename);\n      this.media_just_focused = filename;\n    },\n    closeMediaFocus() {\n      this.$emit(\"update:media_focused\", undefined);\n    },\n    setSelected(present, path) {\n      if (present) this.selected_medias_paths.push(path);else this.selected_medias_paths = this.selected_medias_paths.filter(sm => sm !== path);\n    },\n    addMedias(medias) {\n      this.$emit(\"addMedias\", medias);\n    },\n    async removeMedia(path) {\n      await this.$api.deleteItem({\n        path\n      });\n      this.closeMediaFocus();\n      this.$alertify.closeLogOnClick(true).delay(4000).success(this.$t(\"media_removed\"));\n    },\n    prevMedia() {\n      this.toggleMediaFocus(this.filtered_medias[this.focused_media_index - 1].$path);\n    },\n    nextMedia() {\n      this.toggleMediaFocus(this.filtered_medias[this.focused_media_index + 1].$path);\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-40.use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/components/panes/MediaLibrary.vue?vue&type=script&lang=js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "fc329f3a2b1858aa"; }
/******/ }();
/******/ 
/******/ }
);