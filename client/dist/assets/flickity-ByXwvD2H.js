import{n as l}from"../build.js";const s={props:{options:Object},mounted(){this.init()},beforeDestroy(){this.$flickity.destroy(),this.$flickity=null},methods:{init(){const i=require("flickity");this.$flickity=new i(this.$el,this.options),this.$emit("init",this.$flickity)},flickity(){return this.$flickity},select(i,t,e){this.$flickity.select(i,t,e)},next(i,t){this.$flickity.next(i,t)},previous(i,t){this.$flickity.previous(i,t)},selectCell(i,t,e){this.$flickity.selectCell(i,t,e)},resize(){this.$flickity.resize()},reposition(){this.$flickity.reposition()},prepend(i){this.$flickity.prepend(i)},append(i){this.$flickity.append(i)},insert(i,t){this.$flickity.insert(i,t)},remove(i){this.$flickity.remove(i)},playPlayer(){this.$flickity.playPlayer()},stopPlayer(){this.$flickity.stopPlayer()},pausePlayer(){this.$flickity.pausePlayer()},unpausePlayer(){this.$flickity.unpausePlayer()},rerender(){this.$flickity.destroy(),this.init()},destroy(){this.$flickity.destroy()},reloadCells(){this.$flickity.reloadCells()},getCellElements(){return this.$flickity.getCellElements()},data(){return require("flickity").data(this.$el)},on(i,t){this.$flickity.on(i,t)},off(i,t){this.$flickity.off(i,t)},once(i,t){this.$flickity.once(i,t)},selectedElement(){return this.$flickity.selectedElement},selectedElements(){return this.$flickity.selectedElements},selectedIndex(){return this.$flickity.selectedIndex},cells(){return this.$flickity.cells},slides(){return this.$flickity.slides},disableDrag(){this.$flickity.options.draggable=!1,this.$flickity.updateDraggable()},enableDrag(){this.$flickity.options.draggable=!0,this.$flickity.updateDraggable()}}};var r=function(){var t=this,e=t._self._c;return e("div",[t._t("default")],2)},c=[],n=l(s,r,c,!1,null,null);const f=n.exports;export{f as F};
