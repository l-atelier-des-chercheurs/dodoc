"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(typeof self !== 'undefined' ? self : this)["webpackHotUpdateapp"]("app",{

/***/ "./src/adc-core/api.js":
/*!*****************************!*\
  !*** ./src/adc-core/api.js ***!
  \*****************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": function() { return /* export default binding */ __WEBPACK_DEFAULT_EXPORT__; }\n/* harmony export */ });\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/* harmony import */ var core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_includes_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n/* harmony import */ var core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(core_js_modules_es_array_push_js__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var socket_io_client__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! socket.io-client */ \"./node_modules/socket.io-client/build/esm/index.js\");\n/* harmony import */ var vue__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\");\n\n\n\n\n/* harmony default export */ function __WEBPACK_DEFAULT_EXPORT__() {\n  return new vue__WEBPACK_IMPORTED_MODULE_3__[\"default\"]({\n    data: {\n      socket: null,\n      store: {},\n      debug_mode: false,\n      tokenpath: {\n        token: \"\",\n        token_path: \"\"\n      },\n      general_password: \"\",\n      rooms_joined: [],\n      // todo replace is_identified, create route to test\n      is_correctly_logged_in: false,\n      connected: false\n    },\n    created() {},\n    watch: {},\n    methods: {\n      async init({\n        debug_mode\n      }) {\n        this.debug_mode = debug_mode;\n        await this.initSocketio();\n      },\n      async initSocketio() {\n        console.log(\"initSocketio\");\n        this.socket = (0,socket_io_client__WEBPACK_IMPORTED_MODULE_2__.io)({\n          autoConnect: false\n        });\n        const sessionID = localStorage.getItem(\"sessionID\");\n        if (sessionID) this.socket.auth = {\n          sessionID\n        };\n        await this._setAuthFromStorage();\n        this.setAuthorizationHeader();\n        if (this.tokenpath.token_path) await this.getCurrentAuthor().catch(() => {});\n        await this.socket.connect();\n\n        // client-side\n        this.socket.on(\"connect\", () => {\n          console.log(\"socket connected\");\n          this.connected = true;\n          console.log(\"connect \" + this.socket.id);\n          this.$eventHub.$emit(\"socketio.connect\", {\n            socketid: this.socket.id\n          });\n        });\n        this.socket.on(\"session\", ({\n          sessionID,\n          userID\n        }) => {\n          // attach the session ID to the next reconnection attempts\n          this.socket.auth = {\n            sessionID\n          };\n          localStorage.setItem(\"sessionID\", sessionID);\n          this.socket.userID = userID;\n        });\n        this.socket.on(\"connect_error\", reason => {\n          console.log(\"socket connect error\");\n          this.$eventHub.$emit(\"socketio.connect_error\", reason);\n        });\n        this.socket.on(\"disconnect\", reason => {\n          console.log(\"socket disconnected\");\n          this.connected = false;\n          this.$eventHub.$emit(\"socketio.disconnect\", reason);\n          this.socket.disconnect();\n          this.emptyStore();\n          this.socket.once(\"connect\", () => {\n            this.rejoinRooms();\n          });\n        });\n        this.socket.onAny((eventName, ...args) => {\n          // truncate long strings in content (long texts for example)\n          const _args = JSON.parse(JSON.stringify(args));\n          if (_args[0].changed_data?.$content) _args[0].changed_data.$content = \"…\";\n          if (_args[0].changed_data?.$thumbs) _args[0].changed_data.$thumbs = \"…\";\n          // if (_args[0].changed_data?.$content)\n          //   _args[0].changed_data.$content =\n          //     _args[0].changed_data?.$content.slice(0, 15) +\n          //     \"[…] (truncated content)\";\n          if (this.debug_mode) this.$alertify.delay(4000).log(`⤓ ` + eventName\n          // + JSON.stringify(_args)\n          );\n        });\n\n        this.socket.on(\"folderCreated\", this.folderCreated);\n        this.socket.on(\"folderUpdated\", this.folderUpdated);\n        this.socket.on(\"folderRemoved\", this.folderRemoved);\n        this.socket.on(\"fileCreated\", this.fileCreated);\n        this.socket.on(\"fileUpdated\", this.fileUpdated);\n        this.socket.on(\"fileRemoved\", this.fileRemoved);\n        this.socket.on(\"taskStatus\", this.taskStatus);\n        this.socket.on(\"taskEnded\", this.taskEnded);\n      },\n      disconnectSocket() {\n        this.socket.disconnect();\n      },\n      reconnectSocket() {\n        this.socket.connect();\n      },\n      join({\n        room\n      }) {\n        // join room only if not tracking\n        if (!this.rooms_joined.includes(room)) this.socket.emit(\"joinRoom\", {\n          room\n        });\n        // we push this room anyway, so that when we remove it we keep tracking until all has been removed\n        this.rooms_joined.push(room);\n      },\n      leave({\n        room\n      }) {\n        const index_to_remove = this.rooms_joined.findIndex(rj => rj === room);\n        this.rooms_joined.splice(index_to_remove, 1);\n        // if room isnt tracked anymore\n        if (!this.rooms_joined.includes(room)) {\n          this.socket.emit(\"leaveRoom\", {\n            room\n          });\n          this.$delete(this.store, room);\n        }\n      },\n      emptyStore() {\n        // called when client disconnects from socket\n        // since we cant be sure of what happens before reconnect, we nuke all store\n        // this.store = {};\n      },\n      async rejoinRooms() {\n        console.log(\"rejoinRooms\");\n        // refresh full content of all rooms tracked\n        const paths = this.rooms_joined.filter((value, index, array) => array.indexOf(value) === index);\n        for (const path of paths) {\n          await this.updateStore(path);\n          this.socket.emit(\"joinRoom\", {\n            room: path\n          });\n        }\n      },\n      // async getAndTrack(path) {\n      //   // getFolders ou getFolder\n      //   const response = await this.$axios.get(path).catch((err) => {\n      // throw this.processError(err);\n      //   });\n      //   const content = response.data;\n      //   // puis join le path en question\n\n      //   // si disconnect, il faut relancer le get, que ça maj\n      //   // l'objet côté component\n      //   // et que ça rejoin la room\n\n      //   return content;\n      // },\n\n      async _setAuthFromStorage() {\n        let auth = {};\n        const tokenpath = localStorage.getItem(\"tokenpath\");\n        try {\n          const {\n            token,\n            token_path\n          } = JSON.parse(tokenpath);\n          auth.token = token;\n          auth.token_path = token_path;\n        } catch (err) {\n          err;\n        }\n        const general_password = localStorage.getItem(\"general_password\");\n        if (general_password) auth.general_password = general_password;\n        if (Object.keys(auth).length === 0) return;\n        const Authorization = JSON.stringify(auth);\n\n        // check with route\n        const response = await this.$axios.get(\"_authCheck\", {\n          headers: {\n            Authorization\n          }\n        });\n        if (auth.general_password) {\n          if (response.data.general_password_is_valid) this.general_password = auth.general_password;else if (response.data.general_password_is_wrong) {\n            this.$alertify.delay(4000).error(response.data.general_password_is_wrong);\n            this.$eventHub.$emit(\"app.prompt_general_password\");\n          }\n        } else if (response.data.general_password_is_wrong) {\n          this.$eventHub.$emit(\"app.prompt_general_password\");\n        }\n        if (auth.token && auth.token_path) if (response.data.token_is_valid) {\n          this.tokenpath.token = auth.token;\n          this.tokenpath.token_path = auth.token_path;\n          // token is valid, get author info\n        } else if (response.data.token_is_wrong) this.$alertify.delay(4000).error(response.data.token_is_wrong);\n\n        // Todo change all this? if a user has a valid token and token_path,\n        // then they must also have access\n        // so for users that are not logged in but have the password,\n        // they should get a token with a path that looks like\n        // token_path: \"/\"\n        // --> meaning they can read content, but not update anything\n      },\n\n      setAuthorizationHeader() {\n        this.$axios.defaults.headers.common[\"Authorization\"] = JSON.stringify({\n          token: this.tokenpath.token,\n          token_path: this.tokenpath.token_path,\n          general_password: this.general_password\n        });\n      },\n      async getCurrentAuthor() {\n        await this.getFolder({\n          path: this.tokenpath.token_path\n        }).catch(err => {\n          throw err;\n          // TODO catch folder no existing: author was removed, for example\n        });\n      },\n\n      folderCreated({\n        path,\n        meta\n      }) {\n        if (!this.store[path]) this.store[path] = new Array();\n        this.store[path].push(meta);\n        this.$set(this.store, meta.$path, meta);\n      },\n      updateProps({\n        changed_data,\n        folder_to_update\n      }) {\n        Object.entries(changed_data).map(([key, value]) => {\n          this.$set(folder_to_update, key, value);\n        });\n      },\n      folderUpdated({\n        path,\n        changed_data\n      }) {\n        // updated folder $path\n        if (Object.prototype.hasOwnProperty.call(this.store, path)) {\n          this.updateProps({\n            changed_data,\n            folder_to_update: this.store[path]\n          });\n        }\n        if (path === \"\") return;\n\n        // parent folder path\n        const parent_folder_path = path.substr(0, path.lastIndexOf(\"/\"));\n        if (Object.prototype.hasOwnProperty.call(this.store, parent_folder_path)) {\n          const folder_to_update = this.store[parent_folder_path].find(f => f.$path === path);\n          this.updateProps({\n            changed_data,\n            folder_to_update\n          });\n        }\n      },\n      folderRemoved({\n        path\n      }) {\n        this.$delete(this.store, path);\n        if (Object.prototype.hasOwnProperty.call(this.store, path)) {\n          this.store.$delete(path);\n        }\n        const parent_folder_path = path.substr(0, path.lastIndexOf(\"/\"));\n        if (Object.prototype.hasOwnProperty.call(this.store, parent_folder_path)) {\n          const folder_index = this.store[parent_folder_path].findIndex(f => f.$path === path);\n          this.store[parent_folder_path].splice(folder_index, 1);\n        }\n        this.$eventHub.$emit(\"folder.removed\", {\n          path\n        });\n      },\n      fileCreated({\n        path_to_folder,\n        meta\n      }) {\n        const folder = this.store[path_to_folder];\n        if (!folder.$files) this.$set(folder, \"$files\", new Array());\n        folder.$files.push(meta);\n      },\n      fileUpdated({\n        path_to_folder,\n        path_to_meta,\n        changed_data\n      }) {\n        const folder = this.store[path_to_folder];\n        const file = folder.$files.find(file => file.$path === path_to_meta);\n        if (file) Object.entries(changed_data).map(([key, value]) => {\n          this.$set(file, key, value);\n        });\n      },\n      fileRemoved({\n        path_to_folder,\n        path_to_meta\n      }) {\n        const folder = this.store[path_to_folder];\n        folder.$files = folder.$files.filter(file => file.$path !== path_to_meta);\n      },\n      async getStoragePath() {\n        const response = await this.$axios.get(`_storagePath`);\n        const storage_path = response.data.pathToUserContent;\n        return storage_path;\n      },\n      taskStatus({\n        task_id,\n        progress\n      }) {\n        this.$eventHub.$emit(\"task.status\", {\n          task_id,\n          progress\n        });\n      },\n      taskEnded({\n        task_id,\n        message\n      }) {\n        this.$eventHub.$emit(\"task.ended\", {\n          task_id,\n          message\n        });\n      },\n      async restartDodoc() {\n        return await this.$axios.post(`_admin`);\n      },\n      async updateStore(path) {\n        const response = await this.$axios.get(path).catch(err => {\n          throw this.processError(err);\n        });\n        const content = response.data;\n        this.folderUpdated({\n          path,\n          changed_data: content\n        });\n        return;\n      },\n      async getFolders({\n        path\n      }) {\n        if (this.store[path]) return this.store[path];\n        const response = await this.$axios.get(path).catch(err => {\n          throw this.processError(err);\n        });\n        const folders = response.data;\n        // folders.map((f) => this.$set(this.store, f.$path, f));\n        this.$set(this.store, path, folders);\n        // we use the store to trigger updates to array if item is updated\n        return this.store[path];\n      },\n      async getFolder({\n        path\n      }) {\n        if (this.store[path]) return this.store[path];\n        const response = await this.$axios.get(path).catch(err => {\n          throw this.processError(err);\n        });\n        const folder = response.data;\n        this.$set(this.store, folder.$path, folder);\n        return this.store[folder.$path];\n      },\n      async getArchives({\n        path\n      }) {\n        const response = await this.$axios.get(path);\n        return response.data;\n      },\n      async getLocalNetworkInfos() {\n        const response = await this.$axios.get(\"_networkInfos\");\n        return response.data;\n      },\n      async createFolder({\n        path,\n        additional_meta\n      }) {\n        path = `${path}/_create`;\n        const response = await this.$axios.post(path, additional_meta).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data.new_folder_slug;\n      },\n      async loginToFolder({\n        path,\n        auth_infos\n      }) {\n        try {\n          const response = await this.$axios.post(`${path}/_login`, auth_infos);\n          const token = response.data.token;\n          this.tokenpath.token = token;\n          this.tokenpath.token_path = path;\n          localStorage.setItem(\"tokenpath\", JSON.stringify({\n            token,\n            token_path: path\n          }));\n          this.setAuthorizationHeader();\n          await this.getCurrentAuthor();\n          return;\n        } catch (err) {\n          throw this.processError(err);\n        }\n      },\n      async logoutFromFolder() {\n        const auth_infos = {\n          token: this.tokenpath.token\n        };\n        const path = this.tokenpath.token_path;\n        try {\n          // remove token locally\n          this.resetToken();\n          // remove token on the server\n          await this.$axios.post(`${path}/_logout`, auth_infos);\n          return;\n        } catch (err) {\n          throw this.processError(err);\n        }\n      },\n      async submitGeneralPassword({\n        password,\n        remember_on_this_device = false\n      }) {\n        // TODO\n        await this.$axios.get(`_authCheck`, {\n          headers: {\n            Authorization: JSON.stringify({\n              general_password: password\n            })\n          }\n        }).catch(err => {\n          throw this.processError(err);\n        });\n        if (remember_on_this_device) localStorage.setItem(\"general_password\", password);\n        this.general_password = password;\n        this.setAuthorizationHeader();\n        return true;\n      },\n      disconnectFromGeneralPassword() {\n        localStorage.setItem(\"general_password\", \"\");\n        this.general_password = \"\";\n        this.setAuthorizationHeader();\n      },\n      async uploadText({\n        path,\n        filename,\n        content = \"\",\n        additional_meta\n      }) {\n        let formData = new FormData();\n        const file = new Blob([content], {\n          type: \"text/plain\"\n        });\n        if (additional_meta) formData.append(filename, JSON.stringify(additional_meta));\n        return await this.uploadFile({\n          path,\n          filename,\n          file,\n          additional_meta\n        });\n      },\n      async uploadFile({\n        path,\n        filename,\n        file,\n        additional_meta,\n        onProgress\n      }) {\n        // if no file binary to send, we'll only create a meta file with additional_meta\n        let data;\n        let headers;\n        if (file) {\n          data = new FormData();\n          data.append(\"file\", file, filename);\n          if (additional_meta) data.append(filename, JSON.stringify(additional_meta));\n          headers = {\n            \"Content-Type\": \"multipart/form-data\"\n          };\n        } else {\n          data = additional_meta;\n        }\n        path = `${path}/_upload`;\n        let res = await this.$axios.post(path, data, {\n          headers,\n          onUploadProgress: progressEvent => {\n            if (onProgress) onProgress(progressEvent);\n          }\n        }).catch(err => {\n          throw this.processError(err);\n        });\n        return res.data.meta_filename;\n      },\n      async copyFile({\n        path,\n        new_meta = {},\n        path_to_destination_folder = \"\"\n      }) {\n        path = `${path}/_copy`;\n        const response = await this.$axios.post(path, {\n          new_meta,\n          path_to_destination_folder\n        }).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data.meta_filename;\n      },\n      async copyFolder({\n        path,\n        new_meta = {},\n        path_to_destination_type = \"\"\n      }) {\n        path = `${path}/_copy`;\n        const response = await this.$axios.post(path, {\n          new_meta,\n          path_to_destination_type\n        }).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data.copy_folder_path;\n      },\n      async remixFolder({\n        path,\n        new_meta = {},\n        path_to_destination_type = \"\"\n      }) {\n        path = `${path}/_remix`;\n        const response = await this.$axios.post(path, {\n          new_meta,\n          path_to_destination_type\n        }).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data.remix_folder_path;\n      },\n      async exportFolder({\n        path,\n        instructions\n      }) {\n        path = `${path}/_export`;\n        const response = await this.$axios.post(path, instructions).catch(err => {\n          throw this.processError(err);\n        });\n        const task_id = response.data.task_id;\n        this.$eventHub.$emit(\"task.started\", {\n          task_id,\n          instructions\n        });\n        return task_id;\n      },\n      async generatePreviewForPublication({\n        path,\n        instructions\n      }) {\n        path = `${path}/_generatePreview`;\n        const response = await this.$axios.post(path, instructions).catch(err => {\n          throw this.processError(err);\n        });\n        const task_id = response.data.task_id;\n        return task_id;\n      },\n      async updateMeta({\n        path,\n        new_meta\n      }) {\n        const response = await this.$axios.patch(path, new_meta).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data;\n      },\n      async updateCover({\n        path,\n        new_cover_data,\n        onProgress\n      }) {\n        path = path + `?cover`;\n        if (typeof new_cover_data === \"string\") {\n          // its a meta filename in that same folder\n          const new_meta = {\n            path_to_meta: new_cover_data\n          };\n          await this.$axios.patch(path, new_meta).catch(err => {\n            throw this.processError(err);\n          });\n        } else if (typeof new_cover_data === \"object\") {\n          let formData = new FormData();\n          const original_filename = new_cover_data.name || \"cover\";\n          formData.append(\"file\", new_cover_data, original_filename);\n          await this.$axios.patch(path, formData, {\n            headers: {\n              \"Content-Type\": \"multipart/form-data\"\n            },\n            onUploadProgress: progressEvent => {\n              if (onProgress) onProgress(progressEvent);\n            }\n          }).catch(err => {\n            throw this.processError(err);\n          });\n        }\n        return;\n      },\n      async deleteItem({\n        path\n      }) {\n        const response = await this.$axios.delete(path).catch(err => {\n          throw this.processError(err);\n        });\n        return response.data;\n      },\n      resetToken() {\n        this.tokenpath.token = \"\";\n        this.tokenpath.token_path = \"\";\n        localStorage.setItem(\"tokenpath\", undefined);\n      },\n      processError(err) {\n        let {\n          code,\n          err_infos\n        } = err?.response?.data;\n        if (code) {\n          if (code === \"token_does_not_exist\") {\n            this.resetToken();\n          } else if (code === \"token_expired\") {\n            this.resetToken();\n          } else if (code === \"submitted_general_password_is_wrong\") {\n            this.$eventHub.$emit(\"app.prompt_general_password\");\n          } else if (code === \"no_general_password_submitted\") {\n            this.$eventHub.$emit(\"app.prompt_general_password\");\n          } else if (code === \"token_not_allowed_must_be_local_admin\") {\n            // this.$alertify.delay(4000).error(\"notifications.action_not_allowed\");\n          } else if (code === \"token_not_allowed_must_be_contributors\") {\n            // this.$alertify.delay(4000).error(\"notifications.action_not_allowed\");\n          } else if (code === \"ENOENT\") code = \"folder_is_missing\";\n          this.$alertify.delay(4000).error(\"Message d’erreur : \" + code);\n          console.error(\"processError – \" + code);\n        } else console.error(\"processError – NO ERROR CODES\");\n        this.setAuthorizationHeader();\n        return {\n          code,\n          err_infos\n        };\n        // this.$alertify.delay(4000).error(err);\n      }\n    },\n\n    computed: {}\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/adc-core/api.js\n");

/***/ })

},
/******/ function(__webpack_require__) { // webpackRuntimeModules
/******/ /* webpack/runtime/getFullHash */
/******/ !function() {
/******/ 	__webpack_require__.h = function() { return "59824a821be1fb57"; }
/******/ }();
/******/ 
/******/ }
);