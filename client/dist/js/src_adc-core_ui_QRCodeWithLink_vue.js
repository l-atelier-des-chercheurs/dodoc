/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
((typeof self !== 'undefined' ? self : this)["webpackChunkapp"] = (typeof self !== 'undefined' ? self : this)["webpackChunkapp"] || []).push([["src_adc-core_ui_QRCodeWithLink_vue"],{

/***/ "./src/adc-core/ui/QRCodeWithLink.vue":
/*!********************************************!*\
  !*** ./src/adc-core/ui/QRCodeWithLink.vue ***!
  \********************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& */ \"./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&\");\n/* harmony import */ var _QRCodeWithLink_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./QRCodeWithLink.vue?vue&type=script&lang=js& */ \"./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&\");\n/* harmony import */ var _QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& */ \"./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\");\n/* harmony import */ var _node_modules_vue_vue_loader_v15_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! !../../../node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js */ \"./node_modules/@vue/vue-loader-v15/lib/runtime/componentNormalizer.js\");\n\n\n\n;\n\n\n/* normalize component */\n\nvar component = (0,_node_modules_vue_vue_loader_v15_lib_runtime_componentNormalizer_js__WEBPACK_IMPORTED_MODULE_3__[\"default\"])(\n  _QRCodeWithLink_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_1__[\"default\"],\n  _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,\n  _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns,\n  false,\n  null,\n  \"71cc997f\",\n  null\n  \n)\n\n/* hot reload */\nif (true) {\n  var api = __webpack_require__(/*! ./node_modules/vue-hot-reload-api/dist/index.js */ \"./node_modules/vue-hot-reload-api/dist/index.js\")\n  api.install(__webpack_require__(/*! vue */ \"./node_modules/vue/dist/vue.esm.js\"))\n  if (api.compatible) {\n    module.hot.accept()\n    if (!api.isRecorded('71cc997f')) {\n      api.createRecord('71cc997f', component.options)\n    } else {\n      api.reload('71cc997f', component.options)\n    }\n    module.hot.accept(/*! ./QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& */ \"./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&\", function(__WEBPACK_OUTDATED_DEPENDENCIES__) { /* harmony import */ _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& */ \"./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&\");\n(function () {\n      api.rerender('71cc997f', {\n        render: _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render,\n        staticRenderFns: _QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns\n      })\n    })(__WEBPACK_OUTDATED_DEPENDENCIES__); }.bind(this))\n  }\n}\ncomponent.options.__file = \"src/adc-core/ui/QRCodeWithLink.vue\"\n/* harmony default export */ __webpack_exports__[\"default\"] = (component.exports);//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYWRjLWNvcmUvdWkvUVJDb2RlV2l0aExpbmsudnVlLmpzIiwibWFwcGluZ3MiOiI7Ozs7O0FBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL3NyYy9hZGMtY29yZS91aS9RUkNvZGVXaXRoTGluay52dWU/NTU3YyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9IGZyb20gXCIuL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT10ZW1wbGF0ZSZpZD03MWNjOTk3ZiZzY29wZWQ9dHJ1ZSZcIlxuaW1wb3J0IHNjcmlwdCBmcm9tIFwiLi9RUkNvZGVXaXRoTGluay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmXCJcbmV4cG9ydCAqIGZyb20gXCIuL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIlxuaW1wb3J0IHN0eWxlMCBmcm9tIFwiLi9RUkNvZGVXaXRoTGluay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MWNjOTk3ZiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCJcblxuXG4vKiBub3JtYWxpemUgY29tcG9uZW50ICovXG5pbXBvcnQgbm9ybWFsaXplciBmcm9tIFwiIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9ydW50aW1lL2NvbXBvbmVudE5vcm1hbGl6ZXIuanNcIlxudmFyIGNvbXBvbmVudCA9IG5vcm1hbGl6ZXIoXG4gIHNjcmlwdCxcbiAgcmVuZGVyLFxuICBzdGF0aWNSZW5kZXJGbnMsXG4gIGZhbHNlLFxuICBudWxsLFxuICBcIjcxY2M5OTdmXCIsXG4gIG51bGxcbiAgXG4pXG5cbi8qIGhvdCByZWxvYWQgKi9cbmlmIChtb2R1bGUuaG90KSB7XG4gIHZhciBhcGkgPSByZXF1aXJlKFwiL1VzZXJzL2xvdWlzL0RvY3VtZW50cy9SRVBPL0xVTUEvY2xpZW50L25vZGVfbW9kdWxlcy92dWUtaG90LXJlbG9hZC1hcGkvZGlzdC9pbmRleC5qc1wiKVxuICBhcGkuaW5zdGFsbChyZXF1aXJlKCd2dWUnKSlcbiAgaWYgKGFwaS5jb21wYXRpYmxlKSB7XG4gICAgbW9kdWxlLmhvdC5hY2NlcHQoKVxuICAgIGlmICghYXBpLmlzUmVjb3JkZWQoJzcxY2M5OTdmJykpIHtcbiAgICAgIGFwaS5jcmVhdGVSZWNvcmQoJzcxY2M5OTdmJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZWxvYWQoJzcxY2M5OTdmJywgY29tcG9uZW50Lm9wdGlvbnMpXG4gICAgfVxuICAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiLi9RUkNvZGVXaXRoTGluay52dWU/dnVlJnR5cGU9dGVtcGxhdGUmaWQ9NzFjYzk5N2Ymc2NvcGVkPXRydWUmXCIsIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFwaS5yZXJlbmRlcignNzFjYzk5N2YnLCB7XG4gICAgICAgIHJlbmRlcjogcmVuZGVyLFxuICAgICAgICBzdGF0aWNSZW5kZXJGbnM6IHN0YXRpY1JlbmRlckZuc1xuICAgICAgfSlcbiAgICB9KVxuICB9XG59XG5jb21wb25lbnQub3B0aW9ucy5fX2ZpbGUgPSBcInNyYy9hZGMtY29yZS91aS9RUkNvZGVXaXRoTGluay52dWVcIlxuZXhwb3J0IGRlZmF1bHQgY29tcG9uZW50LmV4cG9ydHMiXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/adc-core/ui/QRCodeWithLink.vue\n");

/***/ }),

/***/ "./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&":
/*!***************************************************************************************!*\
  !*** ./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& ***!
  \***************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "render": function() { return /* reexport safe */ _node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.render; },
/* harmony export */   "staticRenderFns": function() { return /* reexport safe */ _node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__.staticRenderFns; }
/* harmony export */ });
/* harmony import */ var _node_modules_vue_vue_loader_v15_lib_loaders_templateLoader_js_vue_loader_options_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_template_id_71cc997f_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& */ "./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&");


/***/ }),

/***/ "./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&":
/*!*********************************************************************!*\
  !*** ./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js& ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_babel_loader_lib_index_js_clonedRuleSet_37_0_rules_0_use_0_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=script&lang=js& */ \"./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&\");\n /* harmony default export */ __webpack_exports__[\"default\"] = (_node_modules_babel_loader_lib_index_js_clonedRuleSet_37_0_rules_0_use_0_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_script_lang_js___WEBPACK_IMPORTED_MODULE_0__[\"default\"]); //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9zcmMvYWRjLWNvcmUvdWkvUVJDb2RlV2l0aExpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJi5qcyIsIm1hcHBpbmdzIjoiOztBQUFBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT8yOWFkIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBtb2QgZnJvbSBcIi0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2JhYmVsLWxvYWRlci9saWIvaW5kZXguanM/P2Nsb25lZFJ1bGVTZXQtMzdbMF0ucnVsZXNbMF0udXNlWzBdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vUVJDb2RlV2l0aExpbmsudnVlP3Z1ZSZ0eXBlPXNjcmlwdCZsYW5nPWpzJlwiOyBleHBvcnQgZGVmYXVsdCBtb2Q7IGV4cG9ydCAqIGZyb20gXCItIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9iYWJlbC1sb2FkZXIvbGliL2luZGV4LmpzPz9jbG9uZWRSdWxlU2V0LTM3WzBdLnJ1bGVzWzBdLnVzZVswXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zY3JpcHQmbGFuZz1qcyZcIiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&":
/*!******************************************************************************************************!*\
  !*** ./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& ***!
  \******************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _node_modules_vue_style_loader_index_js_clonedRuleSet_19_0_rules_0_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_1_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_3_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! -!../../../node_modules/vue-style-loader/index.js??clonedRuleSet-19[0].rules[0].use[0]!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& */ "./node_modules/vue-style-loader/index.js??clonedRuleSet-19[0].rules[0].use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&");
/* harmony import */ var _node_modules_vue_style_loader_index_js_clonedRuleSet_19_0_rules_0_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_1_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_3_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_vue_style_loader_index_js_clonedRuleSet_19_0_rules_0_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_1_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_3_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__);
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _node_modules_vue_style_loader_index_js_clonedRuleSet_19_0_rules_0_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_1_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_3_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _node_modules_vue_style_loader_index_js_clonedRuleSet_19_0_rules_0_use_0_node_modules_css_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_1_node_modules_vue_vue_loader_v15_lib_loaders_stylePostLoader_js_node_modules_postcss_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_2_node_modules_sass_loader_dist_cjs_js_clonedRuleSet_19_0_rules_0_use_3_node_modules_vue_vue_loader_v15_lib_index_js_vue_loader_options_QRCodeWithLink_vue_vue_type_style_index_0_id_71cc997f_lang_scss_scoped_true___WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);


/***/ }),

/***/ "./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&":
/*!************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true& ***!
  \************************************************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"render\": function() { return /* binding */ render; },\n/* harmony export */   \"staticRenderFns\": function() { return /* binding */ staticRenderFns; }\n/* harmony export */ });\nvar render = function () {\n  var _vm = this\n  var _h = _vm.$createElement\n  var _c = _vm._self._c || _h\n  return _c(\n    \"div\",\n    { staticClass: \"_QRCodeWithLink\" },\n    [\n      _c(\"div\", { staticClass: \"_link\" }, [\n        _c(\"div\", { staticClass: \"u-inputGroup\" }, [\n          _c(\"input\", {\n            directives: [\n              {\n                name: \"model\",\n                rawName: \"v-model\",\n                value: _vm.local_url,\n                expression: \"local_url\",\n              },\n            ],\n            ref: \"urlToCopy\",\n            staticClass: \"_urlInput\",\n            attrs: { type: \"text\" },\n            domProps: { value: _vm.local_url },\n            on: {\n              input: function ($event) {\n                if ($event.target.composing) {\n                  return\n                }\n                _vm.local_url = $event.target.value\n              },\n            },\n          }),\n          _c(\n            \"button\",\n            {\n              staticClass: \"u-button u-button_icon u-suffix _clipboardBtn\",\n              attrs: { type: \"button\" },\n              on: { click: _vm.copyToClipboard },\n            },\n            [\n              !_vm.is_copied\n                ? _c(\"b-icon\", { attrs: { icon: \"clipboard\" } })\n                : _c(\"b-icon\", { attrs: { icon: \"clipboard-check\" } }),\n            ],\n            1\n          ),\n        ]),\n        _c(\n          \"a\",\n          {\n            staticClass: \"u-buttonLink\",\n            attrs: { href: _vm.local_url, target: \"_blank\" },\n          },\n          [\n            _vm._v(\" \" + _vm._s(_vm.$t(\"open\")) + \" \"),\n            _c(\"b-icon\", {\n              attrs: { slot: \"prefix\", icon: \"box-arrow-up-right\" },\n              slot: \"prefix\",\n            }),\n          ],\n          1\n        ),\n      ]),\n      _c(\"transition\", { attrs: { name: \"pagechange\", mode: \"out-in\" } }, [\n        _c(\n          \"div\",\n          { key: _vm.local_url, staticClass: \"_qr\" },\n          [\n            _c(\n              \"div\",\n              { staticClass: \"_fsButton\" },\n              [\n                _c(\"EditBtn\", {\n                  attrs: { btn_type: \"fullscreen\" },\n                  on: {\n                    click: function ($event) {\n                      _vm.show_fullscreen = true\n                    },\n                  },\n                }),\n              ],\n              1\n            ),\n            _c(\"qrcode\", {\n              ref: \"qrCode\",\n              attrs: {\n                value: _vm.local_url,\n                tag: \"canvas\",\n                options: _vm.qr_options,\n              },\n            }),\n            _vm.show_fullscreen\n              ? _c(\n                  \"FullscreenView\",\n                  {\n                    on: {\n                      close: function ($event) {\n                        _vm.show_fullscreen = false\n                      },\n                    },\n                  },\n                  [\n                    _c(\"qrcode\", {\n                      ref: \"qrCode\",\n                      attrs: {\n                        value: _vm.local_url,\n                        tag: \"canvas\",\n                        options: _vm.qr_options,\n                      },\n                    }),\n                  ],\n                  1\n                )\n              : _vm._e(),\n          ],\n          1\n        ),\n      ]),\n      _c(\"small\", [\n        _c(\n          \"a\",\n          { staticClass: \"u-buttonLink\", on: { click: _vm.downloadCanvas } },\n          [_vm._v(\" \" + _vm._s(_vm.$t(\"download_this_qr_code\")) + \" \")]\n        ),\n      ]),\n    ],\n    1\n  )\n}\nvar staticRenderFns = []\nrender._withStripped = true\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvbG9hZGVycy90ZW1wbGF0ZUxvYWRlci5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9zcmMvYWRjLWNvcmUvdWkvUVJDb2RlV2l0aExpbmsudnVlP3Z1ZSZ0eXBlPXRlbXBsYXRlJmlkPTcxY2M5OTdmJnNjb3BlZD10cnVlJi5qcyIsIm1hcHBpbmdzIjoiOzs7OztBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSIsInNvdXJjZXMiOlsid2VicGFjazovL2FwcC8uL3NyYy9hZGMtY29yZS91aS9RUkNvZGVXaXRoTGluay52dWU/Nzc0YyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgcmVuZGVyID0gZnVuY3Rpb24gKCkge1xuICB2YXIgX3ZtID0gdGhpc1xuICB2YXIgX2ggPSBfdm0uJGNyZWF0ZUVsZW1lbnRcbiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oXG4gIHJldHVybiBfYyhcbiAgICBcImRpdlwiLFxuICAgIHsgc3RhdGljQ2xhc3M6IFwiX1FSQ29kZVdpdGhMaW5rXCIgfSxcbiAgICBbXG4gICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcIl9saW5rXCIgfSwgW1xuICAgICAgICBfYyhcImRpdlwiLCB7IHN0YXRpY0NsYXNzOiBcInUtaW5wdXRHcm91cFwiIH0sIFtcbiAgICAgICAgICBfYyhcImlucHV0XCIsIHtcbiAgICAgICAgICAgIGRpcmVjdGl2ZXM6IFtcbiAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIG5hbWU6IFwibW9kZWxcIixcbiAgICAgICAgICAgICAgICByYXdOYW1lOiBcInYtbW9kZWxcIixcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvY2FsX3VybCxcbiAgICAgICAgICAgICAgICBleHByZXNzaW9uOiBcImxvY2FsX3VybFwiLFxuICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgXSxcbiAgICAgICAgICAgIHJlZjogXCJ1cmxUb0NvcHlcIixcbiAgICAgICAgICAgIHN0YXRpY0NsYXNzOiBcIl91cmxJbnB1dFwiLFxuICAgICAgICAgICAgYXR0cnM6IHsgdHlwZTogXCJ0ZXh0XCIgfSxcbiAgICAgICAgICAgIGRvbVByb3BzOiB7IHZhbHVlOiBfdm0ubG9jYWxfdXJsIH0sXG4gICAgICAgICAgICBvbjoge1xuICAgICAgICAgICAgICBpbnB1dDogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgIGlmICgkZXZlbnQudGFyZ2V0LmNvbXBvc2luZykge1xuICAgICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIF92bS5sb2NhbF91cmwgPSAkZXZlbnQudGFyZ2V0LnZhbHVlXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9LFxuICAgICAgICAgIH0pLFxuICAgICAgICAgIF9jKFxuICAgICAgICAgICAgXCJidXR0b25cIixcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6IFwidS1idXR0b24gdS1idXR0b25faWNvbiB1LXN1ZmZpeCBfY2xpcGJvYXJkQnRuXCIsXG4gICAgICAgICAgICAgIGF0dHJzOiB7IHR5cGU6IFwiYnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgb246IHsgY2xpY2s6IF92bS5jb3B5VG9DbGlwYm9hcmQgfSxcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBbXG4gICAgICAgICAgICAgICFfdm0uaXNfY29waWVkXG4gICAgICAgICAgICAgICAgPyBfYyhcImItaWNvblwiLCB7IGF0dHJzOiB7IGljb246IFwiY2xpcGJvYXJkXCIgfSB9KVxuICAgICAgICAgICAgICAgIDogX2MoXCJiLWljb25cIiwgeyBhdHRyczogeyBpY29uOiBcImNsaXBib2FyZC1jaGVja1wiIH0gfSksXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgMVxuICAgICAgICAgICksXG4gICAgICAgIF0pLFxuICAgICAgICBfYyhcbiAgICAgICAgICBcImFcIixcbiAgICAgICAgICB7XG4gICAgICAgICAgICBzdGF0aWNDbGFzczogXCJ1LWJ1dHRvbkxpbmtcIixcbiAgICAgICAgICAgIGF0dHJzOiB7IGhyZWY6IF92bS5sb2NhbF91cmwsIHRhcmdldDogXCJfYmxhbmtcIiB9LFxuICAgICAgICAgIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX3ZtLl92KFwiIFwiICsgX3ZtLl9zKF92bS4kdChcIm9wZW5cIikpICsgXCIgXCIpLFxuICAgICAgICAgICAgX2MoXCJiLWljb25cIiwge1xuICAgICAgICAgICAgICBhdHRyczogeyBzbG90OiBcInByZWZpeFwiLCBpY29uOiBcImJveC1hcnJvdy11cC1yaWdodFwiIH0sXG4gICAgICAgICAgICAgIHNsb3Q6IFwicHJlZml4XCIsXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgICAgX2MoXCJ0cmFuc2l0aW9uXCIsIHsgYXR0cnM6IHsgbmFtZTogXCJwYWdlY2hhbmdlXCIsIG1vZGU6IFwib3V0LWluXCIgfSB9LCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgeyBrZXk6IF92bS5sb2NhbF91cmwsIHN0YXRpY0NsYXNzOiBcIl9xclwiIH0sXG4gICAgICAgICAgW1xuICAgICAgICAgICAgX2MoXG4gICAgICAgICAgICAgIFwiZGl2XCIsXG4gICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwiX2ZzQnV0dG9uXCIgfSxcbiAgICAgICAgICAgICAgW1xuICAgICAgICAgICAgICAgIF9jKFwiRWRpdEJ0blwiLCB7XG4gICAgICAgICAgICAgICAgICBhdHRyczogeyBidG5fdHlwZTogXCJmdWxsc2NyZWVuXCIgfSxcbiAgICAgICAgICAgICAgICAgIG9uOiB7XG4gICAgICAgICAgICAgICAgICAgIGNsaWNrOiBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dfZnVsbHNjcmVlbiA9IHRydWVcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgIF0sXG4gICAgICAgICAgICAgIDFcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICBfYyhcInFyY29kZVwiLCB7XG4gICAgICAgICAgICAgIHJlZjogXCJxckNvZGVcIixcbiAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICB2YWx1ZTogX3ZtLmxvY2FsX3VybCxcbiAgICAgICAgICAgICAgICB0YWc6IFwiY2FudmFzXCIsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnFyX29wdGlvbnMsXG4gICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB9KSxcbiAgICAgICAgICAgIF92bS5zaG93X2Z1bGxzY3JlZW5cbiAgICAgICAgICAgICAgPyBfYyhcbiAgICAgICAgICAgICAgICAgIFwiRnVsbHNjcmVlblZpZXdcIixcbiAgICAgICAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICAgICAgb246IHtcbiAgICAgICAgICAgICAgICAgICAgICBjbG9zZTogZnVuY3Rpb24gKCRldmVudCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLnNob3dfZnVsbHNjcmVlbiA9IGZhbHNlXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBbXG4gICAgICAgICAgICAgICAgICAgIF9jKFwicXJjb2RlXCIsIHtcbiAgICAgICAgICAgICAgICAgICAgICByZWY6IFwicXJDb2RlXCIsXG4gICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlOiBfdm0ubG9jYWxfdXJsLFxuICAgICAgICAgICAgICAgICAgICAgICAgdGFnOiBcImNhbnZhc1wiLFxuICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9uczogX3ZtLnFyX29wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgICAgfSksXG4gICAgICAgICAgICAgICAgICBdLFxuICAgICAgICAgICAgICAgICAgMVxuICAgICAgICAgICAgICAgIClcbiAgICAgICAgICAgICAgOiBfdm0uX2UoKSxcbiAgICAgICAgICBdLFxuICAgICAgICAgIDFcbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgICAgX2MoXCJzbWFsbFwiLCBbXG4gICAgICAgIF9jKFxuICAgICAgICAgIFwiYVwiLFxuICAgICAgICAgIHsgc3RhdGljQ2xhc3M6IFwidS1idXR0b25MaW5rXCIsIG9uOiB7IGNsaWNrOiBfdm0uZG93bmxvYWRDYW52YXMgfSB9LFxuICAgICAgICAgIFtfdm0uX3YoXCIgXCIgKyBfdm0uX3MoX3ZtLiR0KFwiZG93bmxvYWRfdGhpc19xcl9jb2RlXCIpKSArIFwiIFwiKV1cbiAgICAgICAgKSxcbiAgICAgIF0pLFxuICAgIF0sXG4gICAgMVxuICApXG59XG52YXIgc3RhdGljUmVuZGVyRm5zID0gW11cbnJlbmRlci5fd2l0aFN0cmlwcGVkID0gdHJ1ZVxuXG5leHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9Il0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/@vue/vue-loader-v15/lib/loaders/templateLoader.js??vue-loader-options!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=template&id=71cc997f&scoped=true&\n");

/***/ }),

/***/ "./node_modules/@chenfengyuan/vue-qrcode/dist/vue-qrcode.js":
/*!******************************************************************!*\
  !*** ./node_modules/@chenfengyuan/vue-qrcode/dist/vue-qrcode.js ***!
  \******************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("__webpack_require__(/*! core-js/modules/es.error.cause.js */ \"./node_modules/core-js/modules/es.error.cause.js\");\n__webpack_require__(/*! core-js/modules/es.array.push.js */ \"./node_modules/core-js/modules/es.array.push.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.at.js */ \"./node_modules/core-js/modules/es.typed-array.at.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find-last.js */ \"./node_modules/core-js/modules/es.typed-array.find-last.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.find-last-index.js */ \"./node_modules/core-js/modules/es.typed-array.find-last-index.js\");\n__webpack_require__(/*! core-js/modules/es.typed-array.set.js */ \"./node_modules/core-js/modules/es.typed-array.set.js\");\n__webpack_require__(/*! core-js/modules/es.array.includes.js */ \"./node_modules/core-js/modules/es.array.includes.js\");\n/*!\n * vue-qrcode v1.0.2\n * https://fengyuanchen.github.io/vue-qrcode\n *\n * Copyright 2018-present Chen Fengyuan\n * Released under the MIT license\n *\n * Date: 2020-01-18T06:04:33.222Z\n */\n\n(function (global, factory) {\n   true ? module.exports = factory() : 0;\n})(this, function () {\n  'use strict';\n\n  function commonjsRequire() {\n    throw new Error('Dynamic requires are not currently supported by rollup-plugin-commonjs');\n  }\n  function createCommonjsModule(fn, module) {\n    return module = {\n      exports: {}\n    }, fn(module, module.exports), module.exports;\n  }\n  var qrcode = createCommonjsModule(function (module, exports) {\n    (function (f) {\n      {\n        module.exports = f();\n      }\n    })(function () {\n      return function () {\n        function r(e, n, t) {\n          function o(i, f) {\n            if (!n[i]) {\n              if (!e[i]) {\n                var c = \"function\" == typeof commonjsRequire && commonjsRequire;\n                if (!f && c) return c(i, !0);\n                if (u) return u(i, !0);\n                var a = new Error(\"Cannot find module '\" + i + \"'\");\n                throw a.code = \"MODULE_NOT_FOUND\", a;\n              }\n              var p = n[i] = {\n                exports: {}\n              };\n              e[i][0].call(p.exports, function (r) {\n                var n = e[i][1][r];\n                return o(n || r);\n              }, p, p.exports, r, e, n, t);\n            }\n            return n[i].exports;\n          }\n          for (var u = \"function\" == typeof commonjsRequire && commonjsRequire, i = 0; i < t.length; i++) o(t[i]);\n          return o;\n        }\n        return r;\n      }()({\n        1: [function (require, module, exports) {\n          // can-promise has a crash in some versions of react native that dont have\n          // standard global objects\n          // https://github.com/soldair/node-qrcode/issues/157\n\n          module.exports = function () {\n            return typeof Promise === 'function' && Promise.prototype && Promise.prototype.then;\n          };\n        }, {}],\n        2: [function (require, module, exports) {\n          /**\n           * Alignment pattern are fixed reference pattern in defined positions\n           * in a matrix symbology, which enables the decode software to re-synchronise\n           * the coordinate mapping of the image modules in the event of moderate amounts\n           * of distortion of the image.\n           *\n           * Alignment patterns are present only in QR Code symbols of version 2 or larger\n           * and their number depends on the symbol version.\n           */\n\n          var getSymbolSize = require('./utils').getSymbolSize;\n\n          /**\n           * Calculate the row/column coordinates of the center module of each alignment pattern\n           * for the specified QR Code version.\n           *\n           * The alignment patterns are positioned symmetrically on either side of the diagonal\n           * running from the top left corner of the symbol to the bottom right corner.\n           *\n           * Since positions are simmetrical only half of the coordinates are returned.\n           * Each item of the array will represent in turn the x and y coordinate.\n           * @see {@link getPositions}\n           *\n           * @param  {Number} version QR Code version\n           * @return {Array}          Array of coordinate\n           */\n          exports.getRowColCoords = function getRowColCoords(version) {\n            if (version === 1) return [];\n            var posCount = Math.floor(version / 7) + 2;\n            var size = getSymbolSize(version);\n            var intervals = size === 145 ? 26 : Math.ceil((size - 13) / (2 * posCount - 2)) * 2;\n            var positions = [size - 7]; // Last coord is always (size - 7)\n\n            for (var i = 1; i < posCount - 1; i++) {\n              positions[i] = positions[i - 1] - intervals;\n            }\n            positions.push(6); // First coord is always 6\n\n            return positions.reverse();\n          };\n\n          /**\n           * Returns an array containing the positions of each alignment pattern.\n           * Each array's element represent the center point of the pattern as (x, y) coordinates\n           *\n           * Coordinates are calculated expanding the row/column coordinates returned by {@link getRowColCoords}\n           * and filtering out the items that overlaps with finder pattern\n           *\n           * @example\n           * For a Version 7 symbol {@link getRowColCoords} returns values 6, 22 and 38.\n           * The alignment patterns, therefore, are to be centered on (row, column)\n           * positions (6,22), (22,6), (22,22), (22,38), (38,22), (38,38).\n           * Note that the coordinates (6,6), (6,38), (38,6) are occupied by finder patterns\n           * and are not therefore used for alignment patterns.\n           *\n           * var pos = getPositions(7)\n           * // [[6,22], [22,6], [22,22], [22,38], [38,22], [38,38]]\n           *\n           * @param  {Number} version QR Code version\n           * @return {Array}          Array of coordinates\n           */\n          exports.getPositions = function getPositions(version) {\n            var coords = [];\n            var pos = exports.getRowColCoords(version);\n            var posLength = pos.length;\n            for (var i = 0; i < posLength; i++) {\n              for (var j = 0; j < posLength; j++) {\n                // Skip if position is occupied by finder patterns\n                if (i === 0 && j === 0 ||\n                // top-left\n                i === 0 && j === posLength - 1 ||\n                // bottom-left\n                i === posLength - 1 && j === 0) {\n                  // top-right\n                  continue;\n                }\n                coords.push([pos[i], pos[j]]);\n              }\n            }\n            return coords;\n          };\n        }, {\n          \"./utils\": 21\n        }],\n        3: [function (require, module, exports) {\n          var Mode = require('./mode');\n\n          /**\n           * Array of characters available in alphanumeric mode\n           *\n           * As per QR Code specification, to each character\n           * is assigned a value from 0 to 44 which in this case coincides\n           * with the array index\n           *\n           * @type {Array}\n           */\n          var ALPHA_NUM_CHARS = ['0', '1', '2', '3', '4', '5', '6', '7', '8', '9', 'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z', ' ', '$', '%', '*', '+', '-', '.', '/', ':'];\n          function AlphanumericData(data) {\n            this.mode = Mode.ALPHANUMERIC;\n            this.data = data;\n          }\n          AlphanumericData.getBitsLength = function getBitsLength(length) {\n            return 11 * Math.floor(length / 2) + 6 * (length % 2);\n          };\n          AlphanumericData.prototype.getLength = function getLength() {\n            return this.data.length;\n          };\n          AlphanumericData.prototype.getBitsLength = function getBitsLength() {\n            return AlphanumericData.getBitsLength(this.data.length);\n          };\n          AlphanumericData.prototype.write = function write(bitBuffer) {\n            var i;\n\n            // Input data characters are divided into groups of two characters\n            // and encoded as 11-bit binary codes.\n            for (i = 0; i + 2 <= this.data.length; i += 2) {\n              // The character value of the first character is multiplied by 45\n              var value = ALPHA_NUM_CHARS.indexOf(this.data[i]) * 45;\n\n              // The character value of the second digit is added to the product\n              value += ALPHA_NUM_CHARS.indexOf(this.data[i + 1]);\n\n              // The sum is then stored as 11-bit binary number\n              bitBuffer.put(value, 11);\n            }\n\n            // If the number of input data characters is not a multiple of two,\n            // the character value of the final character is encoded as a 6-bit binary number.\n            if (this.data.length % 2) {\n              bitBuffer.put(ALPHA_NUM_CHARS.indexOf(this.data[i]), 6);\n            }\n          };\n          module.exports = AlphanumericData;\n        }, {\n          \"./mode\": 14\n        }],\n        4: [function (require, module, exports) {\n          function BitBuffer() {\n            this.buffer = [];\n            this.length = 0;\n          }\n          BitBuffer.prototype = {\n            get: function (index) {\n              var bufIndex = Math.floor(index / 8);\n              return (this.buffer[bufIndex] >>> 7 - index % 8 & 1) === 1;\n            },\n            put: function (num, length) {\n              for (var i = 0; i < length; i++) {\n                this.putBit((num >>> length - i - 1 & 1) === 1);\n              }\n            },\n            getLengthInBits: function () {\n              return this.length;\n            },\n            putBit: function (bit) {\n              var bufIndex = Math.floor(this.length / 8);\n              if (this.buffer.length <= bufIndex) {\n                this.buffer.push(0);\n              }\n              if (bit) {\n                this.buffer[bufIndex] |= 0x80 >>> this.length % 8;\n              }\n              this.length++;\n            }\n          };\n          module.exports = BitBuffer;\n        }, {}],\n        5: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n\n          /**\n           * Helper class to handle QR Code symbol modules\n           *\n           * @param {Number} size Symbol size\n           */\n          function BitMatrix(size) {\n            if (!size || size < 1) {\n              throw new Error('BitMatrix size must be defined and greater than 0');\n            }\n            this.size = size;\n            this.data = BufferUtil.alloc(size * size);\n            this.reservedBit = BufferUtil.alloc(size * size);\n          }\n\n          /**\n           * Set bit value at specified location\n           * If reserved flag is set, this bit will be ignored during masking process\n           *\n           * @param {Number}  row\n           * @param {Number}  col\n           * @param {Boolean} value\n           * @param {Boolean} reserved\n           */\n          BitMatrix.prototype.set = function (row, col, value, reserved) {\n            var index = row * this.size + col;\n            this.data[index] = value;\n            if (reserved) this.reservedBit[index] = true;\n          };\n\n          /**\n           * Returns bit value at specified location\n           *\n           * @param  {Number}  row\n           * @param  {Number}  col\n           * @return {Boolean}\n           */\n          BitMatrix.prototype.get = function (row, col) {\n            return this.data[row * this.size + col];\n          };\n\n          /**\n           * Applies xor operator at specified location\n           * (used during masking process)\n           *\n           * @param {Number}  row\n           * @param {Number}  col\n           * @param {Boolean} value\n           */\n          BitMatrix.prototype.xor = function (row, col, value) {\n            this.data[row * this.size + col] ^= value;\n          };\n\n          /**\n           * Check if bit at specified location is reserved\n           *\n           * @param {Number}   row\n           * @param {Number}   col\n           * @return {Boolean}\n           */\n          BitMatrix.prototype.isReserved = function (row, col) {\n            return this.reservedBit[row * this.size + col];\n          };\n          module.exports = BitMatrix;\n        }, {\n          \"../utils/buffer\": 28\n        }],\n        6: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n          var Mode = require('./mode');\n          function ByteData(data) {\n            this.mode = Mode.BYTE;\n            this.data = BufferUtil.from(data);\n          }\n          ByteData.getBitsLength = function getBitsLength(length) {\n            return length * 8;\n          };\n          ByteData.prototype.getLength = function getLength() {\n            return this.data.length;\n          };\n          ByteData.prototype.getBitsLength = function getBitsLength() {\n            return ByteData.getBitsLength(this.data.length);\n          };\n          ByteData.prototype.write = function (bitBuffer) {\n            for (var i = 0, l = this.data.length; i < l; i++) {\n              bitBuffer.put(this.data[i], 8);\n            }\n          };\n          module.exports = ByteData;\n        }, {\n          \"../utils/buffer\": 28,\n          \"./mode\": 14\n        }],\n        7: [function (require, module, exports) {\n          var ECLevel = require('./error-correction-level');\n          var EC_BLOCKS_TABLE = [\n          // L  M  Q  H\n          1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 2, 4, 1, 2, 4, 4, 2, 4, 4, 4, 2, 4, 6, 5, 2, 4, 6, 6, 2, 5, 8, 8, 4, 5, 8, 8, 4, 5, 8, 11, 4, 8, 10, 11, 4, 9, 12, 16, 4, 9, 16, 16, 6, 10, 12, 18, 6, 10, 17, 16, 6, 11, 16, 19, 6, 13, 18, 21, 7, 14, 21, 25, 8, 16, 20, 25, 8, 17, 23, 25, 9, 17, 23, 34, 9, 18, 25, 30, 10, 20, 27, 32, 12, 21, 29, 35, 12, 23, 34, 37, 12, 25, 34, 40, 13, 26, 35, 42, 14, 28, 38, 45, 15, 29, 40, 48, 16, 31, 43, 51, 17, 33, 45, 54, 18, 35, 48, 57, 19, 37, 51, 60, 19, 38, 53, 63, 20, 40, 56, 66, 21, 43, 59, 70, 22, 45, 62, 74, 24, 47, 65, 77, 25, 49, 68, 81];\n          var EC_CODEWORDS_TABLE = [\n          // L  M  Q  H\n          7, 10, 13, 17, 10, 16, 22, 28, 15, 26, 36, 44, 20, 36, 52, 64, 26, 48, 72, 88, 36, 64, 96, 112, 40, 72, 108, 130, 48, 88, 132, 156, 60, 110, 160, 192, 72, 130, 192, 224, 80, 150, 224, 264, 96, 176, 260, 308, 104, 198, 288, 352, 120, 216, 320, 384, 132, 240, 360, 432, 144, 280, 408, 480, 168, 308, 448, 532, 180, 338, 504, 588, 196, 364, 546, 650, 224, 416, 600, 700, 224, 442, 644, 750, 252, 476, 690, 816, 270, 504, 750, 900, 300, 560, 810, 960, 312, 588, 870, 1050, 336, 644, 952, 1110, 360, 700, 1020, 1200, 390, 728, 1050, 1260, 420, 784, 1140, 1350, 450, 812, 1200, 1440, 480, 868, 1290, 1530, 510, 924, 1350, 1620, 540, 980, 1440, 1710, 570, 1036, 1530, 1800, 570, 1064, 1590, 1890, 600, 1120, 1680, 1980, 630, 1204, 1770, 2100, 660, 1260, 1860, 2220, 720, 1316, 1950, 2310, 750, 1372, 2040, 2430];\n\n          /**\r\n           * Returns the number of error correction block that the QR Code should contain\r\n           * for the specified version and error correction level.\r\n           *\r\n           * @param  {Number} version              QR Code version\r\n           * @param  {Number} errorCorrectionLevel Error correction level\r\n           * @return {Number}                      Number of error correction blocks\r\n           */\n          exports.getBlocksCount = function getBlocksCount(version, errorCorrectionLevel) {\n            switch (errorCorrectionLevel) {\n              case ECLevel.L:\n                return EC_BLOCKS_TABLE[(version - 1) * 4 + 0];\n              case ECLevel.M:\n                return EC_BLOCKS_TABLE[(version - 1) * 4 + 1];\n              case ECLevel.Q:\n                return EC_BLOCKS_TABLE[(version - 1) * 4 + 2];\n              case ECLevel.H:\n                return EC_BLOCKS_TABLE[(version - 1) * 4 + 3];\n              default:\n                return undefined;\n            }\n          };\n\n          /**\r\n           * Returns the number of error correction codewords to use for the specified\r\n           * version and error correction level.\r\n           *\r\n           * @param  {Number} version              QR Code version\r\n           * @param  {Number} errorCorrectionLevel Error correction level\r\n           * @return {Number}                      Number of error correction codewords\r\n           */\n          exports.getTotalCodewordsCount = function getTotalCodewordsCount(version, errorCorrectionLevel) {\n            switch (errorCorrectionLevel) {\n              case ECLevel.L:\n                return EC_CODEWORDS_TABLE[(version - 1) * 4 + 0];\n              case ECLevel.M:\n                return EC_CODEWORDS_TABLE[(version - 1) * 4 + 1];\n              case ECLevel.Q:\n                return EC_CODEWORDS_TABLE[(version - 1) * 4 + 2];\n              case ECLevel.H:\n                return EC_CODEWORDS_TABLE[(version - 1) * 4 + 3];\n              default:\n                return undefined;\n            }\n          };\n        }, {\n          \"./error-correction-level\": 8\n        }],\n        8: [function (require, module, exports) {\n          exports.L = {\n            bit: 1\n          };\n          exports.M = {\n            bit: 0\n          };\n          exports.Q = {\n            bit: 3\n          };\n          exports.H = {\n            bit: 2\n          };\n          function fromString(string) {\n            if (typeof string !== 'string') {\n              throw new Error('Param is not a string');\n            }\n            var lcStr = string.toLowerCase();\n            switch (lcStr) {\n              case 'l':\n              case 'low':\n                return exports.L;\n              case 'm':\n              case 'medium':\n                return exports.M;\n              case 'q':\n              case 'quartile':\n                return exports.Q;\n              case 'h':\n              case 'high':\n                return exports.H;\n              default:\n                throw new Error('Unknown EC Level: ' + string);\n            }\n          }\n          exports.isValid = function isValid(level) {\n            return level && typeof level.bit !== 'undefined' && level.bit >= 0 && level.bit < 4;\n          };\n          exports.from = function from(value, defaultValue) {\n            if (exports.isValid(value)) {\n              return value;\n            }\n            try {\n              return fromString(value);\n            } catch (e) {\n              return defaultValue;\n            }\n          };\n        }, {}],\n        9: [function (require, module, exports) {\n          var getSymbolSize = require('./utils').getSymbolSize;\n          var FINDER_PATTERN_SIZE = 7;\n\n          /**\n           * Returns an array containing the positions of each finder pattern.\n           * Each array's element represent the top-left point of the pattern as (x, y) coordinates\n           *\n           * @param  {Number} version QR Code version\n           * @return {Array}          Array of coordinates\n           */\n          exports.getPositions = function getPositions(version) {\n            var size = getSymbolSize(version);\n            return [\n            // top-left\n            [0, 0],\n            // top-right\n            [size - FINDER_PATTERN_SIZE, 0],\n            // bottom-left\n            [0, size - FINDER_PATTERN_SIZE]];\n          };\n        }, {\n          \"./utils\": 21\n        }],\n        10: [function (require, module, exports) {\n          var Utils = require('./utils');\n          var G15 = 1 << 10 | 1 << 8 | 1 << 5 | 1 << 4 | 1 << 2 | 1 << 1 | 1 << 0;\n          var G15_MASK = 1 << 14 | 1 << 12 | 1 << 10 | 1 << 4 | 1 << 1;\n          var G15_BCH = Utils.getBCHDigit(G15);\n\n          /**\n           * Returns format information with relative error correction bits\n           *\n           * The format information is a 15-bit sequence containing 5 data bits,\n           * with 10 error correction bits calculated using the (15, 5) BCH code.\n           *\n           * @param  {Number} errorCorrectionLevel Error correction level\n           * @param  {Number} mask                 Mask pattern\n           * @return {Number}                      Encoded format information bits\n           */\n          exports.getEncodedBits = function getEncodedBits(errorCorrectionLevel, mask) {\n            var data = errorCorrectionLevel.bit << 3 | mask;\n            var d = data << 10;\n            while (Utils.getBCHDigit(d) - G15_BCH >= 0) {\n              d ^= G15 << Utils.getBCHDigit(d) - G15_BCH;\n            }\n\n            // xor final data with mask pattern in order to ensure that\n            // no combination of Error Correction Level and data mask pattern\n            // will result in an all-zero data string\n            return (data << 10 | d) ^ G15_MASK;\n          };\n        }, {\n          \"./utils\": 21\n        }],\n        11: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n          var EXP_TABLE = BufferUtil.alloc(512);\n          var LOG_TABLE = BufferUtil.alloc(256)\n          /**\n           * Precompute the log and anti-log tables for faster computation later\n           *\n           * For each possible value in the galois field 2^8, we will pre-compute\n           * the logarithm and anti-logarithm (exponential) of this value\n           *\n           * ref {@link https://en.wikiversity.org/wiki/Reed%E2%80%93Solomon_codes_for_coders#Introduction_to_mathematical_fields}\n           */;\n          (function initTables() {\n            var x = 1;\n            for (var i = 0; i < 255; i++) {\n              EXP_TABLE[i] = x;\n              LOG_TABLE[x] = i;\n              x <<= 1; // multiply by 2\n\n              // The QR code specification says to use byte-wise modulo 100011101 arithmetic.\n              // This means that when a number is 256 or larger, it should be XORed with 0x11D.\n              if (x & 0x100) {\n                // similar to x >= 256, but a lot faster (because 0x100 == 256)\n                x ^= 0x11D;\n              }\n            }\n\n            // Optimization: double the size of the anti-log table so that we don't need to mod 255 to\n            // stay inside the bounds (because we will mainly use this table for the multiplication of\n            // two GF numbers, no more).\n            // @see {@link mul}\n            for (i = 255; i < 512; i++) {\n              EXP_TABLE[i] = EXP_TABLE[i - 255];\n            }\n          })();\n\n          /**\n           * Returns log value of n inside Galois Field\n           *\n           * @param  {Number} n\n           * @return {Number}\n           */\n          exports.log = function log(n) {\n            if (n < 1) throw new Error('log(' + n + ')');\n            return LOG_TABLE[n];\n          };\n\n          /**\n           * Returns anti-log value of n inside Galois Field\n           *\n           * @param  {Number} n\n           * @return {Number}\n           */\n          exports.exp = function exp(n) {\n            return EXP_TABLE[n];\n          };\n\n          /**\n           * Multiplies two number inside Galois Field\n           *\n           * @param  {Number} x\n           * @param  {Number} y\n           * @return {Number}\n           */\n          exports.mul = function mul(x, y) {\n            if (x === 0 || y === 0) return 0;\n\n            // should be EXP_TABLE[(LOG_TABLE[x] + LOG_TABLE[y]) % 255] if EXP_TABLE wasn't oversized\n            // @see {@link initTables}\n            return EXP_TABLE[LOG_TABLE[x] + LOG_TABLE[y]];\n          };\n        }, {\n          \"../utils/buffer\": 28\n        }],\n        12: [function (require, module, exports) {\n          var Mode = require('./mode');\n          var Utils = require('./utils');\n          function KanjiData(data) {\n            this.mode = Mode.KANJI;\n            this.data = data;\n          }\n          KanjiData.getBitsLength = function getBitsLength(length) {\n            return length * 13;\n          };\n          KanjiData.prototype.getLength = function getLength() {\n            return this.data.length;\n          };\n          KanjiData.prototype.getBitsLength = function getBitsLength() {\n            return KanjiData.getBitsLength(this.data.length);\n          };\n          KanjiData.prototype.write = function (bitBuffer) {\n            var i;\n\n            // In the Shift JIS system, Kanji characters are represented by a two byte combination.\n            // These byte values are shifted from the JIS X 0208 values.\n            // JIS X 0208 gives details of the shift coded representation.\n            for (i = 0; i < this.data.length; i++) {\n              var value = Utils.toSJIS(this.data[i]);\n\n              // For characters with Shift JIS values from 0x8140 to 0x9FFC:\n              if (value >= 0x8140 && value <= 0x9FFC) {\n                // Subtract 0x8140 from Shift JIS value\n                value -= 0x8140;\n\n                // For characters with Shift JIS values from 0xE040 to 0xEBBF\n              } else if (value >= 0xE040 && value <= 0xEBBF) {\n                // Subtract 0xC140 from Shift JIS value\n                value -= 0xC140;\n              } else {\n                throw new Error('Invalid SJIS character: ' + this.data[i] + '\\n' + 'Make sure your charset is UTF-8');\n              }\n\n              // Multiply most significant byte of result by 0xC0\n              // and add least significant byte to product\n              value = (value >>> 8 & 0xff) * 0xC0 + (value & 0xff);\n\n              // Convert result to a 13-bit binary string\n              bitBuffer.put(value, 13);\n            }\n          };\n          module.exports = KanjiData;\n        }, {\n          \"./mode\": 14,\n          \"./utils\": 21\n        }],\n        13: [function (require, module, exports) {\n          /**\n           * Data mask pattern reference\n           * @type {Object}\n           */\n          exports.Patterns = {\n            PATTERN000: 0,\n            PATTERN001: 1,\n            PATTERN010: 2,\n            PATTERN011: 3,\n            PATTERN100: 4,\n            PATTERN101: 5,\n            PATTERN110: 6,\n            PATTERN111: 7\n          };\n\n          /**\n           * Weighted penalty scores for the undesirable features\n           * @type {Object}\n           */\n          var PenaltyScores = {\n            N1: 3,\n            N2: 3,\n            N3: 40,\n            N4: 10\n          };\n\n          /**\n           * Check if mask pattern value is valid\n           *\n           * @param  {Number}  mask    Mask pattern\n           * @return {Boolean}         true if valid, false otherwise\n           */\n          exports.isValid = function isValid(mask) {\n            return mask != null && mask !== '' && !isNaN(mask) && mask >= 0 && mask <= 7;\n          };\n\n          /**\n           * Returns mask pattern from a value.\n           * If value is not valid, returns undefined\n           *\n           * @param  {Number|String} value        Mask pattern value\n           * @return {Number}                     Valid mask pattern or undefined\n           */\n          exports.from = function from(value) {\n            return exports.isValid(value) ? parseInt(value, 10) : undefined;\n          };\n\n          /**\n          * Find adjacent modules in row/column with the same color\n          * and assign a penalty value.\n          *\n          * Points: N1 + i\n          * i is the amount by which the number of adjacent modules of the same color exceeds 5\n          */\n          exports.getPenaltyN1 = function getPenaltyN1(data) {\n            var size = data.size;\n            var points = 0;\n            var sameCountCol = 0;\n            var sameCountRow = 0;\n            var lastCol = null;\n            var lastRow = null;\n            for (var row = 0; row < size; row++) {\n              sameCountCol = sameCountRow = 0;\n              lastCol = lastRow = null;\n              for (var col = 0; col < size; col++) {\n                var module = data.get(row, col);\n                if (module === lastCol) {\n                  sameCountCol++;\n                } else {\n                  if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n                  lastCol = module;\n                  sameCountCol = 1;\n                }\n                module = data.get(col, row);\n                if (module === lastRow) {\n                  sameCountRow++;\n                } else {\n                  if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n                  lastRow = module;\n                  sameCountRow = 1;\n                }\n              }\n              if (sameCountCol >= 5) points += PenaltyScores.N1 + (sameCountCol - 5);\n              if (sameCountRow >= 5) points += PenaltyScores.N1 + (sameCountRow - 5);\n            }\n            return points;\n          };\n\n          /**\n           * Find 2x2 blocks with the same color and assign a penalty value\n           *\n           * Points: N2 * (m - 1) * (n - 1)\n           */\n          exports.getPenaltyN2 = function getPenaltyN2(data) {\n            var size = data.size;\n            var points = 0;\n            for (var row = 0; row < size - 1; row++) {\n              for (var col = 0; col < size - 1; col++) {\n                var last = data.get(row, col) + data.get(row, col + 1) + data.get(row + 1, col) + data.get(row + 1, col + 1);\n                if (last === 4 || last === 0) points++;\n              }\n            }\n            return points * PenaltyScores.N2;\n          };\n\n          /**\n           * Find 1:1:3:1:1 ratio (dark:light:dark:light:dark) pattern in row/column,\n           * preceded or followed by light area 4 modules wide\n           *\n           * Points: N3 * number of pattern found\n           */\n          exports.getPenaltyN3 = function getPenaltyN3(data) {\n            var size = data.size;\n            var points = 0;\n            var bitsCol = 0;\n            var bitsRow = 0;\n            for (var row = 0; row < size; row++) {\n              bitsCol = bitsRow = 0;\n              for (var col = 0; col < size; col++) {\n                bitsCol = bitsCol << 1 & 0x7FF | data.get(row, col);\n                if (col >= 10 && (bitsCol === 0x5D0 || bitsCol === 0x05D)) points++;\n                bitsRow = bitsRow << 1 & 0x7FF | data.get(col, row);\n                if (col >= 10 && (bitsRow === 0x5D0 || bitsRow === 0x05D)) points++;\n              }\n            }\n            return points * PenaltyScores.N3;\n          };\n\n          /**\n           * Calculate proportion of dark modules in entire symbol\n           *\n           * Points: N4 * k\n           *\n           * k is the rating of the deviation of the proportion of dark modules\n           * in the symbol from 50% in steps of 5%\n           */\n          exports.getPenaltyN4 = function getPenaltyN4(data) {\n            var darkCount = 0;\n            var modulesCount = data.data.length;\n            for (var i = 0; i < modulesCount; i++) darkCount += data.data[i];\n            var k = Math.abs(Math.ceil(darkCount * 100 / modulesCount / 5) - 10);\n            return k * PenaltyScores.N4;\n          };\n\n          /**\n           * Return mask value at given position\n           *\n           * @param  {Number} maskPattern Pattern reference value\n           * @param  {Number} i           Row\n           * @param  {Number} j           Column\n           * @return {Boolean}            Mask value\n           */\n          function getMaskAt(maskPattern, i, j) {\n            switch (maskPattern) {\n              case exports.Patterns.PATTERN000:\n                return (i + j) % 2 === 0;\n              case exports.Patterns.PATTERN001:\n                return i % 2 === 0;\n              case exports.Patterns.PATTERN010:\n                return j % 3 === 0;\n              case exports.Patterns.PATTERN011:\n                return (i + j) % 3 === 0;\n              case exports.Patterns.PATTERN100:\n                return (Math.floor(i / 2) + Math.floor(j / 3)) % 2 === 0;\n              case exports.Patterns.PATTERN101:\n                return i * j % 2 + i * j % 3 === 0;\n              case exports.Patterns.PATTERN110:\n                return (i * j % 2 + i * j % 3) % 2 === 0;\n              case exports.Patterns.PATTERN111:\n                return (i * j % 3 + (i + j) % 2) % 2 === 0;\n              default:\n                throw new Error('bad maskPattern:' + maskPattern);\n            }\n          }\n\n          /**\n           * Apply a mask pattern to a BitMatrix\n           *\n           * @param  {Number}    pattern Pattern reference number\n           * @param  {BitMatrix} data    BitMatrix data\n           */\n          exports.applyMask = function applyMask(pattern, data) {\n            var size = data.size;\n            for (var col = 0; col < size; col++) {\n              for (var row = 0; row < size; row++) {\n                if (data.isReserved(row, col)) continue;\n                data.xor(row, col, getMaskAt(pattern, row, col));\n              }\n            }\n          };\n\n          /**\n           * Returns the best mask pattern for data\n           *\n           * @param  {BitMatrix} data\n           * @return {Number} Mask pattern reference number\n           */\n          exports.getBestMask = function getBestMask(data, setupFormatFunc) {\n            var numPatterns = Object.keys(exports.Patterns).length;\n            var bestPattern = 0;\n            var lowerPenalty = Infinity;\n            for (var p = 0; p < numPatterns; p++) {\n              setupFormatFunc(p);\n              exports.applyMask(p, data);\n\n              // Calculate penalty\n              var penalty = exports.getPenaltyN1(data) + exports.getPenaltyN2(data) + exports.getPenaltyN3(data) + exports.getPenaltyN4(data);\n\n              // Undo previously applied mask\n              exports.applyMask(p, data);\n              if (penalty < lowerPenalty) {\n                lowerPenalty = penalty;\n                bestPattern = p;\n              }\n            }\n            return bestPattern;\n          };\n        }, {}],\n        14: [function (require, module, exports) {\n          var VersionCheck = require('./version-check');\n          var Regex = require('./regex');\n\n          /**\n           * Numeric mode encodes data from the decimal digit set (0 - 9)\n           * (byte values 30HEX to 39HEX).\n           * Normally, 3 data characters are represented by 10 bits.\n           *\n           * @type {Object}\n           */\n          exports.NUMERIC = {\n            id: 'Numeric',\n            bit: 1 << 0,\n            ccBits: [10, 12, 14]\n          };\n\n          /**\n           * Alphanumeric mode encodes data from a set of 45 characters,\n           * i.e. 10 numeric digits (0 - 9),\n           *      26 alphabetic characters (A - Z),\n           *   and 9 symbols (SP, $, %, *, +, -, ., /, :).\n           * Normally, two input characters are represented by 11 bits.\n           *\n           * @type {Object}\n           */\n          exports.ALPHANUMERIC = {\n            id: 'Alphanumeric',\n            bit: 1 << 1,\n            ccBits: [9, 11, 13]\n          };\n\n          /**\n           * In byte mode, data is encoded at 8 bits per character.\n           *\n           * @type {Object}\n           */\n          exports.BYTE = {\n            id: 'Byte',\n            bit: 1 << 2,\n            ccBits: [8, 16, 16]\n          };\n\n          /**\n           * The Kanji mode efficiently encodes Kanji characters in accordance with\n           * the Shift JIS system based on JIS X 0208.\n           * The Shift JIS values are shifted from the JIS X 0208 values.\n           * JIS X 0208 gives details of the shift coded representation.\n           * Each two-byte character value is compacted to a 13-bit binary codeword.\n           *\n           * @type {Object}\n           */\n          exports.KANJI = {\n            id: 'Kanji',\n            bit: 1 << 3,\n            ccBits: [8, 10, 12]\n          };\n\n          /**\n           * Mixed mode will contain a sequences of data in a combination of any of\n           * the modes described above\n           *\n           * @type {Object}\n           */\n          exports.MIXED = {\n            bit: -1\n          };\n\n          /**\n           * Returns the number of bits needed to store the data length\n           * according to QR Code specifications.\n           *\n           * @param  {Mode}   mode    Data mode\n           * @param  {Number} version QR Code version\n           * @return {Number}         Number of bits\n           */\n          exports.getCharCountIndicator = function getCharCountIndicator(mode, version) {\n            if (!mode.ccBits) throw new Error('Invalid mode: ' + mode);\n            if (!VersionCheck.isValid(version)) {\n              throw new Error('Invalid version: ' + version);\n            }\n            if (version >= 1 && version < 10) return mode.ccBits[0];else if (version < 27) return mode.ccBits[1];\n            return mode.ccBits[2];\n          };\n\n          /**\n           * Returns the most efficient mode to store the specified data\n           *\n           * @param  {String} dataStr Input data string\n           * @return {Mode}           Best mode\n           */\n          exports.getBestModeForData = function getBestModeForData(dataStr) {\n            if (Regex.testNumeric(dataStr)) return exports.NUMERIC;else if (Regex.testAlphanumeric(dataStr)) return exports.ALPHANUMERIC;else if (Regex.testKanji(dataStr)) return exports.KANJI;else return exports.BYTE;\n          };\n\n          /**\n           * Return mode name as string\n           *\n           * @param {Mode} mode Mode object\n           * @returns {String}  Mode name\n           */\n          exports.toString = function toString(mode) {\n            if (mode && mode.id) return mode.id;\n            throw new Error('Invalid mode');\n          };\n\n          /**\n           * Check if input param is a valid mode object\n           *\n           * @param   {Mode}    mode Mode object\n           * @returns {Boolean} True if valid mode, false otherwise\n           */\n          exports.isValid = function isValid(mode) {\n            return mode && mode.bit && mode.ccBits;\n          };\n\n          /**\n           * Get mode object from its name\n           *\n           * @param   {String} string Mode name\n           * @returns {Mode}          Mode object\n           */\n          function fromString(string) {\n            if (typeof string !== 'string') {\n              throw new Error('Param is not a string');\n            }\n            var lcStr = string.toLowerCase();\n            switch (lcStr) {\n              case 'numeric':\n                return exports.NUMERIC;\n              case 'alphanumeric':\n                return exports.ALPHANUMERIC;\n              case 'kanji':\n                return exports.KANJI;\n              case 'byte':\n                return exports.BYTE;\n              default:\n                throw new Error('Unknown mode: ' + string);\n            }\n          }\n\n          /**\n           * Returns mode from a value.\n           * If value is not a valid mode, returns defaultValue\n           *\n           * @param  {Mode|String} value        Encoding mode\n           * @param  {Mode}        defaultValue Fallback value\n           * @return {Mode}                     Encoding mode\n           */\n          exports.from = function from(value, defaultValue) {\n            if (exports.isValid(value)) {\n              return value;\n            }\n            try {\n              return fromString(value);\n            } catch (e) {\n              return defaultValue;\n            }\n          };\n        }, {\n          \"./regex\": 19,\n          \"./version-check\": 22\n        }],\n        15: [function (require, module, exports) {\n          var Mode = require('./mode');\n          function NumericData(data) {\n            this.mode = Mode.NUMERIC;\n            this.data = data.toString();\n          }\n          NumericData.getBitsLength = function getBitsLength(length) {\n            return 10 * Math.floor(length / 3) + (length % 3 ? length % 3 * 3 + 1 : 0);\n          };\n          NumericData.prototype.getLength = function getLength() {\n            return this.data.length;\n          };\n          NumericData.prototype.getBitsLength = function getBitsLength() {\n            return NumericData.getBitsLength(this.data.length);\n          };\n          NumericData.prototype.write = function write(bitBuffer) {\n            var i, group, value;\n\n            // The input data string is divided into groups of three digits,\n            // and each group is converted to its 10-bit binary equivalent.\n            for (i = 0; i + 3 <= this.data.length; i += 3) {\n              group = this.data.substr(i, 3);\n              value = parseInt(group, 10);\n              bitBuffer.put(value, 10);\n            }\n\n            // If the number of input digits is not an exact multiple of three,\n            // the final one or two digits are converted to 4 or 7 bits respectively.\n            var remainingNum = this.data.length - i;\n            if (remainingNum > 0) {\n              group = this.data.substr(i);\n              value = parseInt(group, 10);\n              bitBuffer.put(value, remainingNum * 3 + 1);\n            }\n          };\n          module.exports = NumericData;\n        }, {\n          \"./mode\": 14\n        }],\n        16: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n          var GF = require('./galois-field');\n\n          /**\n           * Multiplies two polynomials inside Galois Field\n           *\n           * @param  {Buffer} p1 Polynomial\n           * @param  {Buffer} p2 Polynomial\n           * @return {Buffer}    Product of p1 and p2\n           */\n          exports.mul = function mul(p1, p2) {\n            var coeff = BufferUtil.alloc(p1.length + p2.length - 1);\n            for (var i = 0; i < p1.length; i++) {\n              for (var j = 0; j < p2.length; j++) {\n                coeff[i + j] ^= GF.mul(p1[i], p2[j]);\n              }\n            }\n            return coeff;\n          };\n\n          /**\n           * Calculate the remainder of polynomials division\n           *\n           * @param  {Buffer} divident Polynomial\n           * @param  {Buffer} divisor  Polynomial\n           * @return {Buffer}          Remainder\n           */\n          exports.mod = function mod(divident, divisor) {\n            var result = BufferUtil.from(divident);\n            while (result.length - divisor.length >= 0) {\n              var coeff = result[0];\n              for (var i = 0; i < divisor.length; i++) {\n                result[i] ^= GF.mul(divisor[i], coeff);\n              }\n\n              // remove all zeros from buffer head\n              var offset = 0;\n              while (offset < result.length && result[offset] === 0) offset++;\n              result = result.slice(offset);\n            }\n            return result;\n          };\n\n          /**\n           * Generate an irreducible generator polynomial of specified degree\n           * (used by Reed-Solomon encoder)\n           *\n           * @param  {Number} degree Degree of the generator polynomial\n           * @return {Buffer}        Buffer containing polynomial coefficients\n           */\n          exports.generateECPolynomial = function generateECPolynomial(degree) {\n            var poly = BufferUtil.from([1]);\n            for (var i = 0; i < degree; i++) {\n              poly = exports.mul(poly, [1, GF.exp(i)]);\n            }\n            return poly;\n          };\n        }, {\n          \"../utils/buffer\": 28,\n          \"./galois-field\": 11\n        }],\n        17: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n          var Utils = require('./utils');\n          var ECLevel = require('./error-correction-level');\n          var BitBuffer = require('./bit-buffer');\n          var BitMatrix = require('./bit-matrix');\n          var AlignmentPattern = require('./alignment-pattern');\n          var FinderPattern = require('./finder-pattern');\n          var MaskPattern = require('./mask-pattern');\n          var ECCode = require('./error-correction-code');\n          var ReedSolomonEncoder = require('./reed-solomon-encoder');\n          var Version = require('./version');\n          var FormatInfo = require('./format-info');\n          var Mode = require('./mode');\n          var Segments = require('./segments');\n          var isArray = require('isarray');\n\n          /**\n           * QRCode for JavaScript\n           *\n           * modified by Ryan Day for nodejs support\n           * Copyright (c) 2011 Ryan Day\n           *\n           * Licensed under the MIT license:\n           *   http://www.opensource.org/licenses/mit-license.php\n           *\n          //---------------------------------------------------------------------\n          // QRCode for JavaScript\n          //\n          // Copyright (c) 2009 Kazuhiko Arase\n          //\n          // URL: http://www.d-project.com/\n          //\n          // Licensed under the MIT license:\n          //   http://www.opensource.org/licenses/mit-license.php\n          //\n          // The word \"QR Code\" is registered trademark of\n          // DENSO WAVE INCORPORATED\n          //   http://www.denso-wave.com/qrcode/faqpatent-e.html\n          //\n          //---------------------------------------------------------------------\n          */\n\n          /**\n           * Add finder patterns bits to matrix\n           *\n           * @param  {BitMatrix} matrix  Modules matrix\n           * @param  {Number}    version QR Code version\n           */\n          function setupFinderPattern(matrix, version) {\n            var size = matrix.size;\n            var pos = FinderPattern.getPositions(version);\n            for (var i = 0; i < pos.length; i++) {\n              var row = pos[i][0];\n              var col = pos[i][1];\n              for (var r = -1; r <= 7; r++) {\n                if (row + r <= -1 || size <= row + r) continue;\n                for (var c = -1; c <= 7; c++) {\n                  if (col + c <= -1 || size <= col + c) continue;\n                  if (r >= 0 && r <= 6 && (c === 0 || c === 6) || c >= 0 && c <= 6 && (r === 0 || r === 6) || r >= 2 && r <= 4 && c >= 2 && c <= 4) {\n                    matrix.set(row + r, col + c, true, true);\n                  } else {\n                    matrix.set(row + r, col + c, false, true);\n                  }\n                }\n              }\n            }\n          }\n\n          /**\n           * Add timing pattern bits to matrix\n           *\n           * Note: this function must be called before {@link setupAlignmentPattern}\n           *\n           * @param  {BitMatrix} matrix Modules matrix\n           */\n          function setupTimingPattern(matrix) {\n            var size = matrix.size;\n            for (var r = 8; r < size - 8; r++) {\n              var value = r % 2 === 0;\n              matrix.set(r, 6, value, true);\n              matrix.set(6, r, value, true);\n            }\n          }\n\n          /**\n           * Add alignment patterns bits to matrix\n           *\n           * Note: this function must be called after {@link setupTimingPattern}\n           *\n           * @param  {BitMatrix} matrix  Modules matrix\n           * @param  {Number}    version QR Code version\n           */\n          function setupAlignmentPattern(matrix, version) {\n            var pos = AlignmentPattern.getPositions(version);\n            for (var i = 0; i < pos.length; i++) {\n              var row = pos[i][0];\n              var col = pos[i][1];\n              for (var r = -2; r <= 2; r++) {\n                for (var c = -2; c <= 2; c++) {\n                  if (r === -2 || r === 2 || c === -2 || c === 2 || r === 0 && c === 0) {\n                    matrix.set(row + r, col + c, true, true);\n                  } else {\n                    matrix.set(row + r, col + c, false, true);\n                  }\n                }\n              }\n            }\n          }\n\n          /**\n           * Add version info bits to matrix\n           *\n           * @param  {BitMatrix} matrix  Modules matrix\n           * @param  {Number}    version QR Code version\n           */\n          function setupVersionInfo(matrix, version) {\n            var size = matrix.size;\n            var bits = Version.getEncodedBits(version);\n            var row, col, mod;\n            for (var i = 0; i < 18; i++) {\n              row = Math.floor(i / 3);\n              col = i % 3 + size - 8 - 3;\n              mod = (bits >> i & 1) === 1;\n              matrix.set(row, col, mod, true);\n              matrix.set(col, row, mod, true);\n            }\n          }\n\n          /**\n           * Add format info bits to matrix\n           *\n           * @param  {BitMatrix} matrix               Modules matrix\n           * @param  {ErrorCorrectionLevel}    errorCorrectionLevel Error correction level\n           * @param  {Number}    maskPattern          Mask pattern reference value\n           */\n          function setupFormatInfo(matrix, errorCorrectionLevel, maskPattern) {\n            var size = matrix.size;\n            var bits = FormatInfo.getEncodedBits(errorCorrectionLevel, maskPattern);\n            var i, mod;\n            for (i = 0; i < 15; i++) {\n              mod = (bits >> i & 1) === 1;\n\n              // vertical\n              if (i < 6) {\n                matrix.set(i, 8, mod, true);\n              } else if (i < 8) {\n                matrix.set(i + 1, 8, mod, true);\n              } else {\n                matrix.set(size - 15 + i, 8, mod, true);\n              }\n\n              // horizontal\n              if (i < 8) {\n                matrix.set(8, size - i - 1, mod, true);\n              } else if (i < 9) {\n                matrix.set(8, 15 - i - 1 + 1, mod, true);\n              } else {\n                matrix.set(8, 15 - i - 1, mod, true);\n              }\n            }\n\n            // fixed module\n            matrix.set(size - 8, 8, 1, true);\n          }\n\n          /**\n           * Add encoded data bits to matrix\n           *\n           * @param  {BitMatrix} matrix Modules matrix\n           * @param  {Buffer}    data   Data codewords\n           */\n          function setupData(matrix, data) {\n            var size = matrix.size;\n            var inc = -1;\n            var row = size - 1;\n            var bitIndex = 7;\n            var byteIndex = 0;\n            for (var col = size - 1; col > 0; col -= 2) {\n              if (col === 6) col--;\n              while (true) {\n                for (var c = 0; c < 2; c++) {\n                  if (!matrix.isReserved(row, col - c)) {\n                    var dark = false;\n                    if (byteIndex < data.length) {\n                      dark = (data[byteIndex] >>> bitIndex & 1) === 1;\n                    }\n                    matrix.set(row, col - c, dark);\n                    bitIndex--;\n                    if (bitIndex === -1) {\n                      byteIndex++;\n                      bitIndex = 7;\n                    }\n                  }\n                }\n                row += inc;\n                if (row < 0 || size <= row) {\n                  row -= inc;\n                  inc = -inc;\n                  break;\n                }\n              }\n            }\n          }\n\n          /**\n           * Create encoded codewords from data input\n           *\n           * @param  {Number}   version              QR Code version\n           * @param  {ErrorCorrectionLevel}   errorCorrectionLevel Error correction level\n           * @param  {ByteData} data                 Data input\n           * @return {Buffer}                        Buffer containing encoded codewords\n           */\n          function createData(version, errorCorrectionLevel, segments) {\n            // Prepare data buffer\n            var buffer = new BitBuffer();\n            segments.forEach(function (data) {\n              // prefix data with mode indicator (4 bits)\n              buffer.put(data.mode.bit, 4);\n\n              // Prefix data with character count indicator.\n              // The character count indicator is a string of bits that represents the\n              // number of characters that are being encoded.\n              // The character count indicator must be placed after the mode indicator\n              // and must be a certain number of bits long, depending on the QR version\n              // and data mode\n              // @see {@link Mode.getCharCountIndicator}.\n              buffer.put(data.getLength(), Mode.getCharCountIndicator(data.mode, version));\n\n              // add binary data sequence to buffer\n              data.write(buffer);\n            });\n\n            // Calculate required number of bits\n            var totalCodewords = Utils.getSymbolTotalCodewords(version);\n            var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n            var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n\n            // Add a terminator.\n            // If the bit string is shorter than the total number of required bits,\n            // a terminator of up to four 0s must be added to the right side of the string.\n            // If the bit string is more than four bits shorter than the required number of bits,\n            // add four 0s to the end.\n            if (buffer.getLengthInBits() + 4 <= dataTotalCodewordsBits) {\n              buffer.put(0, 4);\n            }\n\n            // If the bit string is fewer than four bits shorter, add only the number of 0s that\n            // are needed to reach the required number of bits.\n\n            // After adding the terminator, if the number of bits in the string is not a multiple of 8,\n            // pad the string on the right with 0s to make the string's length a multiple of 8.\n            while (buffer.getLengthInBits() % 8 !== 0) {\n              buffer.putBit(0);\n            }\n\n            // Add pad bytes if the string is still shorter than the total number of required bits.\n            // Extend the buffer to fill the data capacity of the symbol corresponding to\n            // the Version and Error Correction Level by adding the Pad Codewords 11101100 (0xEC)\n            // and 00010001 (0x11) alternately.\n            var remainingByte = (dataTotalCodewordsBits - buffer.getLengthInBits()) / 8;\n            for (var i = 0; i < remainingByte; i++) {\n              buffer.put(i % 2 ? 0x11 : 0xEC, 8);\n            }\n            return createCodewords(buffer, version, errorCorrectionLevel);\n          }\n\n          /**\n           * Encode input data with Reed-Solomon and return codewords with\n           * relative error correction bits\n           *\n           * @param  {BitBuffer} bitBuffer            Data to encode\n           * @param  {Number}    version              QR Code version\n           * @param  {ErrorCorrectionLevel} errorCorrectionLevel Error correction level\n           * @return {Buffer}                         Buffer containing encoded codewords\n           */\n          function createCodewords(bitBuffer, version, errorCorrectionLevel) {\n            // Total codewords for this QR code version (Data + Error correction)\n            var totalCodewords = Utils.getSymbolTotalCodewords(version);\n\n            // Total number of error correction codewords\n            var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n\n            // Total number of data codewords\n            var dataTotalCodewords = totalCodewords - ecTotalCodewords;\n\n            // Total number of blocks\n            var ecTotalBlocks = ECCode.getBlocksCount(version, errorCorrectionLevel);\n\n            // Calculate how many blocks each group should contain\n            var blocksInGroup2 = totalCodewords % ecTotalBlocks;\n            var blocksInGroup1 = ecTotalBlocks - blocksInGroup2;\n            var totalCodewordsInGroup1 = Math.floor(totalCodewords / ecTotalBlocks);\n            var dataCodewordsInGroup1 = Math.floor(dataTotalCodewords / ecTotalBlocks);\n            var dataCodewordsInGroup2 = dataCodewordsInGroup1 + 1;\n\n            // Number of EC codewords is the same for both groups\n            var ecCount = totalCodewordsInGroup1 - dataCodewordsInGroup1;\n\n            // Initialize a Reed-Solomon encoder with a generator polynomial of degree ecCount\n            var rs = new ReedSolomonEncoder(ecCount);\n            var offset = 0;\n            var dcData = new Array(ecTotalBlocks);\n            var ecData = new Array(ecTotalBlocks);\n            var maxDataSize = 0;\n            var buffer = BufferUtil.from(bitBuffer.buffer);\n\n            // Divide the buffer into the required number of blocks\n            for (var b = 0; b < ecTotalBlocks; b++) {\n              var dataSize = b < blocksInGroup1 ? dataCodewordsInGroup1 : dataCodewordsInGroup2;\n\n              // extract a block of data from buffer\n              dcData[b] = buffer.slice(offset, offset + dataSize);\n\n              // Calculate EC codewords for this data block\n              ecData[b] = rs.encode(dcData[b]);\n              offset += dataSize;\n              maxDataSize = Math.max(maxDataSize, dataSize);\n            }\n\n            // Create final data\n            // Interleave the data and error correction codewords from each block\n            var data = BufferUtil.alloc(totalCodewords);\n            var index = 0;\n            var i, r;\n\n            // Add data codewords\n            for (i = 0; i < maxDataSize; i++) {\n              for (r = 0; r < ecTotalBlocks; r++) {\n                if (i < dcData[r].length) {\n                  data[index++] = dcData[r][i];\n                }\n              }\n            }\n\n            // Apped EC codewords\n            for (i = 0; i < ecCount; i++) {\n              for (r = 0; r < ecTotalBlocks; r++) {\n                data[index++] = ecData[r][i];\n              }\n            }\n            return data;\n          }\n\n          /**\n           * Build QR Code symbol\n           *\n           * @param  {String} data                 Input string\n           * @param  {Number} version              QR Code version\n           * @param  {ErrorCorretionLevel} errorCorrectionLevel Error level\n           * @param  {MaskPattern} maskPattern     Mask pattern\n           * @return {Object}                      Object containing symbol data\n           */\n          function createSymbol(data, version, errorCorrectionLevel, maskPattern) {\n            var segments;\n            if (isArray(data)) {\n              segments = Segments.fromArray(data);\n            } else if (typeof data === 'string') {\n              var estimatedVersion = version;\n              if (!estimatedVersion) {\n                var rawSegments = Segments.rawSplit(data);\n\n                // Estimate best version that can contain raw splitted segments\n                estimatedVersion = Version.getBestVersionForData(rawSegments, errorCorrectionLevel);\n              }\n\n              // Build optimized segments\n              // If estimated version is undefined, try with the highest version\n              segments = Segments.fromString(data, estimatedVersion || 40);\n            } else {\n              throw new Error('Invalid data');\n            }\n\n            // Get the min version that can contain data\n            var bestVersion = Version.getBestVersionForData(segments, errorCorrectionLevel);\n\n            // If no version is found, data cannot be stored\n            if (!bestVersion) {\n              throw new Error('The amount of data is too big to be stored in a QR Code');\n            }\n\n            // If not specified, use min version as default\n            if (!version) {\n              version = bestVersion;\n\n              // Check if the specified version can contain the data\n            } else if (version < bestVersion) {\n              throw new Error('\\n' + 'The chosen QR Code version cannot contain this amount of data.\\n' + 'Minimum version required to store current data is: ' + bestVersion + '.\\n');\n            }\n            var dataBits = createData(version, errorCorrectionLevel, segments);\n\n            // Allocate matrix buffer\n            var moduleCount = Utils.getSymbolSize(version);\n            var modules = new BitMatrix(moduleCount);\n\n            // Add function modules\n            setupFinderPattern(modules, version);\n            setupTimingPattern(modules);\n            setupAlignmentPattern(modules, version);\n\n            // Add temporary dummy bits for format info just to set them as reserved.\n            // This is needed to prevent these bits from being masked by {@link MaskPattern.applyMask}\n            // since the masking operation must be performed only on the encoding region.\n            // These blocks will be replaced with correct values later in code.\n            setupFormatInfo(modules, errorCorrectionLevel, 0);\n            if (version >= 7) {\n              setupVersionInfo(modules, version);\n            }\n\n            // Add data codewords\n            setupData(modules, dataBits);\n            if (isNaN(maskPattern)) {\n              // Find best mask pattern\n              maskPattern = MaskPattern.getBestMask(modules, setupFormatInfo.bind(null, modules, errorCorrectionLevel));\n            }\n\n            // Apply mask pattern\n            MaskPattern.applyMask(maskPattern, modules);\n\n            // Replace format info bits with correct values\n            setupFormatInfo(modules, errorCorrectionLevel, maskPattern);\n            return {\n              modules: modules,\n              version: version,\n              errorCorrectionLevel: errorCorrectionLevel,\n              maskPattern: maskPattern,\n              segments: segments\n            };\n          }\n\n          /**\n           * QR Code\n           *\n           * @param {String | Array} data                 Input data\n           * @param {Object} options                      Optional configurations\n           * @param {Number} options.version              QR Code version\n           * @param {String} options.errorCorrectionLevel Error correction level\n           * @param {Function} options.toSJISFunc         Helper func to convert utf8 to sjis\n           */\n          exports.create = function create(data, options) {\n            if (typeof data === 'undefined' || data === '') {\n              throw new Error('No input text');\n            }\n            var errorCorrectionLevel = ECLevel.M;\n            var version;\n            var mask;\n            if (typeof options !== 'undefined') {\n              // Use higher error correction level as default\n              errorCorrectionLevel = ECLevel.from(options.errorCorrectionLevel, ECLevel.M);\n              version = Version.from(options.version);\n              mask = MaskPattern.from(options.maskPattern);\n              if (options.toSJISFunc) {\n                Utils.setToSJISFunction(options.toSJISFunc);\n              }\n            }\n            return createSymbol(data, version, errorCorrectionLevel, mask);\n          };\n        }, {\n          \"../utils/buffer\": 28,\n          \"./alignment-pattern\": 2,\n          \"./bit-buffer\": 4,\n          \"./bit-matrix\": 5,\n          \"./error-correction-code\": 7,\n          \"./error-correction-level\": 8,\n          \"./finder-pattern\": 9,\n          \"./format-info\": 10,\n          \"./mask-pattern\": 13,\n          \"./mode\": 14,\n          \"./reed-solomon-encoder\": 18,\n          \"./segments\": 20,\n          \"./utils\": 21,\n          \"./version\": 23,\n          \"isarray\": 33\n        }],\n        18: [function (require, module, exports) {\n          var BufferUtil = require('../utils/buffer');\n          var Polynomial = require('./polynomial');\n          var Buffer = require('buffer').Buffer;\n          function ReedSolomonEncoder(degree) {\n            this.genPoly = undefined;\n            this.degree = degree;\n            if (this.degree) this.initialize(this.degree);\n          }\n\n          /**\n           * Initialize the encoder.\n           * The input param should correspond to the number of error correction codewords.\n           *\n           * @param  {Number} degree\n           */\n          ReedSolomonEncoder.prototype.initialize = function initialize(degree) {\n            // create an irreducible generator polynomial\n            this.degree = degree;\n            this.genPoly = Polynomial.generateECPolynomial(this.degree);\n          };\n\n          /**\n           * Encodes a chunk of data\n           *\n           * @param  {Buffer} data Buffer containing input data\n           * @return {Buffer}      Buffer containing encoded data\n           */\n          ReedSolomonEncoder.prototype.encode = function encode(data) {\n            if (!this.genPoly) {\n              throw new Error('Encoder not initialized');\n            }\n\n            // Calculate EC for this data block\n            // extends data size to data+genPoly size\n            var pad = BufferUtil.alloc(this.degree);\n            var paddedData = Buffer.concat([data, pad], data.length + this.degree);\n\n            // The error correction codewords are the remainder after dividing the data codewords\n            // by a generator polynomial\n            var remainder = Polynomial.mod(paddedData, this.genPoly);\n\n            // return EC data blocks (last n byte, where n is the degree of genPoly)\n            // If coefficients number in remainder are less than genPoly degree,\n            // pad with 0s to the left to reach the needed number of coefficients\n            var start = this.degree - remainder.length;\n            if (start > 0) {\n              var buff = BufferUtil.alloc(this.degree);\n              remainder.copy(buff, start);\n              return buff;\n            }\n            return remainder;\n          };\n          module.exports = ReedSolomonEncoder;\n        }, {\n          \"../utils/buffer\": 28,\n          \"./polynomial\": 16,\n          \"buffer\": 30\n        }],\n        19: [function (require, module, exports) {\n          var numeric = '[0-9]+';\n          var alphanumeric = '[A-Z $%*+\\\\-./:]+';\n          var kanji = '(?:[u3000-u303F]|[u3040-u309F]|[u30A0-u30FF]|' + '[uFF00-uFFEF]|[u4E00-u9FAF]|[u2605-u2606]|[u2190-u2195]|u203B|' + '[u2010u2015u2018u2019u2025u2026u201Cu201Du2225u2260]|' + '[u0391-u0451]|[u00A7u00A8u00B1u00B4u00D7u00F7])+';\n          kanji = kanji.replace(/u/g, '\\\\u');\n          var byte = '(?:(?![A-Z0-9 $%*+\\\\-./:]|' + kanji + ')(?:.|[\\r\\n]))+';\n          exports.KANJI = new RegExp(kanji, 'g');\n          exports.BYTE_KANJI = new RegExp('[^A-Z0-9 $%*+\\\\-./:]+', 'g');\n          exports.BYTE = new RegExp(byte, 'g');\n          exports.NUMERIC = new RegExp(numeric, 'g');\n          exports.ALPHANUMERIC = new RegExp(alphanumeric, 'g');\n          var TEST_KANJI = new RegExp('^' + kanji + '$');\n          var TEST_NUMERIC = new RegExp('^' + numeric + '$');\n          var TEST_ALPHANUMERIC = new RegExp('^[A-Z0-9 $%*+\\\\-./:]+$');\n          exports.testKanji = function testKanji(str) {\n            return TEST_KANJI.test(str);\n          };\n          exports.testNumeric = function testNumeric(str) {\n            return TEST_NUMERIC.test(str);\n          };\n          exports.testAlphanumeric = function testAlphanumeric(str) {\n            return TEST_ALPHANUMERIC.test(str);\n          };\n        }, {}],\n        20: [function (require, module, exports) {\n          var Mode = require('./mode');\n          var NumericData = require('./numeric-data');\n          var AlphanumericData = require('./alphanumeric-data');\n          var ByteData = require('./byte-data');\n          var KanjiData = require('./kanji-data');\n          var Regex = require('./regex');\n          var Utils = require('./utils');\n          var dijkstra = require('dijkstrajs');\n\n          /**\n           * Returns UTF8 byte length\n           *\n           * @param  {String} str Input string\n           * @return {Number}     Number of byte\n           */\n          function getStringByteLength(str) {\n            return unescape(encodeURIComponent(str)).length;\n          }\n\n          /**\n           * Get a list of segments of the specified mode\n           * from a string\n           *\n           * @param  {Mode}   mode Segment mode\n           * @param  {String} str  String to process\n           * @return {Array}       Array of object with segments data\n           */\n          function getSegments(regex, mode, str) {\n            var segments = [];\n            var result;\n            while ((result = regex.exec(str)) !== null) {\n              segments.push({\n                data: result[0],\n                index: result.index,\n                mode: mode,\n                length: result[0].length\n              });\n            }\n            return segments;\n          }\n\n          /**\n           * Extracts a series of segments with the appropriate\n           * modes from a string\n           *\n           * @param  {String} dataStr Input string\n           * @return {Array}          Array of object with segments data\n           */\n          function getSegmentsFromString(dataStr) {\n            var numSegs = getSegments(Regex.NUMERIC, Mode.NUMERIC, dataStr);\n            var alphaNumSegs = getSegments(Regex.ALPHANUMERIC, Mode.ALPHANUMERIC, dataStr);\n            var byteSegs;\n            var kanjiSegs;\n            if (Utils.isKanjiModeEnabled()) {\n              byteSegs = getSegments(Regex.BYTE, Mode.BYTE, dataStr);\n              kanjiSegs = getSegments(Regex.KANJI, Mode.KANJI, dataStr);\n            } else {\n              byteSegs = getSegments(Regex.BYTE_KANJI, Mode.BYTE, dataStr);\n              kanjiSegs = [];\n            }\n            var segs = numSegs.concat(alphaNumSegs, byteSegs, kanjiSegs);\n            return segs.sort(function (s1, s2) {\n              return s1.index - s2.index;\n            }).map(function (obj) {\n              return {\n                data: obj.data,\n                mode: obj.mode,\n                length: obj.length\n              };\n            });\n          }\n\n          /**\n           * Returns how many bits are needed to encode a string of\n           * specified length with the specified mode\n           *\n           * @param  {Number} length String length\n           * @param  {Mode} mode     Segment mode\n           * @return {Number}        Bit length\n           */\n          function getSegmentBitsLength(length, mode) {\n            switch (mode) {\n              case Mode.NUMERIC:\n                return NumericData.getBitsLength(length);\n              case Mode.ALPHANUMERIC:\n                return AlphanumericData.getBitsLength(length);\n              case Mode.KANJI:\n                return KanjiData.getBitsLength(length);\n              case Mode.BYTE:\n                return ByteData.getBitsLength(length);\n            }\n          }\n\n          /**\n           * Merges adjacent segments which have the same mode\n           *\n           * @param  {Array} segs Array of object with segments data\n           * @return {Array}      Array of object with segments data\n           */\n          function mergeSegments(segs) {\n            return segs.reduce(function (acc, curr) {\n              var prevSeg = acc.length - 1 >= 0 ? acc[acc.length - 1] : null;\n              if (prevSeg && prevSeg.mode === curr.mode) {\n                acc[acc.length - 1].data += curr.data;\n                return acc;\n              }\n              acc.push(curr);\n              return acc;\n            }, []);\n          }\n\n          /**\n           * Generates a list of all possible nodes combination which\n           * will be used to build a segments graph.\n           *\n           * Nodes are divided by groups. Each group will contain a list of all the modes\n           * in which is possible to encode the given text.\n           *\n           * For example the text '12345' can be encoded as Numeric, Alphanumeric or Byte.\n           * The group for '12345' will contain then 3 objects, one for each\n           * possible encoding mode.\n           *\n           * Each node represents a possible segment.\n           *\n           * @param  {Array} segs Array of object with segments data\n           * @return {Array}      Array of object with segments data\n           */\n          function buildNodes(segs) {\n            var nodes = [];\n            for (var i = 0; i < segs.length; i++) {\n              var seg = segs[i];\n              switch (seg.mode) {\n                case Mode.NUMERIC:\n                  nodes.push([seg, {\n                    data: seg.data,\n                    mode: Mode.ALPHANUMERIC,\n                    length: seg.length\n                  }, {\n                    data: seg.data,\n                    mode: Mode.BYTE,\n                    length: seg.length\n                  }]);\n                  break;\n                case Mode.ALPHANUMERIC:\n                  nodes.push([seg, {\n                    data: seg.data,\n                    mode: Mode.BYTE,\n                    length: seg.length\n                  }]);\n                  break;\n                case Mode.KANJI:\n                  nodes.push([seg, {\n                    data: seg.data,\n                    mode: Mode.BYTE,\n                    length: getStringByteLength(seg.data)\n                  }]);\n                  break;\n                case Mode.BYTE:\n                  nodes.push([{\n                    data: seg.data,\n                    mode: Mode.BYTE,\n                    length: getStringByteLength(seg.data)\n                  }]);\n              }\n            }\n            return nodes;\n          }\n\n          /**\n           * Builds a graph from a list of nodes.\n           * All segments in each node group will be connected with all the segments of\n           * the next group and so on.\n           *\n           * At each connection will be assigned a weight depending on the\n           * segment's byte length.\n           *\n           * @param  {Array} nodes    Array of object with segments data\n           * @param  {Number} version QR Code version\n           * @return {Object}         Graph of all possible segments\n           */\n          function buildGraph(nodes, version) {\n            var table = {};\n            var graph = {\n              'start': {}\n            };\n            var prevNodeIds = ['start'];\n            for (var i = 0; i < nodes.length; i++) {\n              var nodeGroup = nodes[i];\n              var currentNodeIds = [];\n              for (var j = 0; j < nodeGroup.length; j++) {\n                var node = nodeGroup[j];\n                var key = '' + i + j;\n                currentNodeIds.push(key);\n                table[key] = {\n                  node: node,\n                  lastCount: 0\n                };\n                graph[key] = {};\n                for (var n = 0; n < prevNodeIds.length; n++) {\n                  var prevNodeId = prevNodeIds[n];\n                  if (table[prevNodeId] && table[prevNodeId].node.mode === node.mode) {\n                    graph[prevNodeId][key] = getSegmentBitsLength(table[prevNodeId].lastCount + node.length, node.mode) - getSegmentBitsLength(table[prevNodeId].lastCount, node.mode);\n                    table[prevNodeId].lastCount += node.length;\n                  } else {\n                    if (table[prevNodeId]) table[prevNodeId].lastCount = node.length;\n                    graph[prevNodeId][key] = getSegmentBitsLength(node.length, node.mode) + 4 + Mode.getCharCountIndicator(node.mode, version); // switch cost\n                  }\n                }\n              }\n\n              prevNodeIds = currentNodeIds;\n            }\n            for (n = 0; n < prevNodeIds.length; n++) {\n              graph[prevNodeIds[n]]['end'] = 0;\n            }\n            return {\n              map: graph,\n              table: table\n            };\n          }\n\n          /**\n           * Builds a segment from a specified data and mode.\n           * If a mode is not specified, the more suitable will be used.\n           *\n           * @param  {String} data             Input data\n           * @param  {Mode | String} modesHint Data mode\n           * @return {Segment}                 Segment\n           */\n          function buildSingleSegment(data, modesHint) {\n            var mode;\n            var bestMode = Mode.getBestModeForData(data);\n            mode = Mode.from(modesHint, bestMode);\n\n            // Make sure data can be encoded\n            if (mode !== Mode.BYTE && mode.bit < bestMode.bit) {\n              throw new Error('\"' + data + '\"' + ' cannot be encoded with mode ' + Mode.toString(mode) + '.\\n Suggested mode is: ' + Mode.toString(bestMode));\n            }\n\n            // Use Mode.BYTE if Kanji support is disabled\n            if (mode === Mode.KANJI && !Utils.isKanjiModeEnabled()) {\n              mode = Mode.BYTE;\n            }\n            switch (mode) {\n              case Mode.NUMERIC:\n                return new NumericData(data);\n              case Mode.ALPHANUMERIC:\n                return new AlphanumericData(data);\n              case Mode.KANJI:\n                return new KanjiData(data);\n              case Mode.BYTE:\n                return new ByteData(data);\n            }\n          }\n\n          /**\n           * Builds a list of segments from an array.\n           * Array can contain Strings or Objects with segment's info.\n           *\n           * For each item which is a string, will be generated a segment with the given\n           * string and the more appropriate encoding mode.\n           *\n           * For each item which is an object, will be generated a segment with the given\n           * data and mode.\n           * Objects must contain at least the property \"data\".\n           * If property \"mode\" is not present, the more suitable mode will be used.\n           *\n           * @param  {Array} array Array of objects with segments data\n           * @return {Array}       Array of Segments\n           */\n          exports.fromArray = function fromArray(array) {\n            return array.reduce(function (acc, seg) {\n              if (typeof seg === 'string') {\n                acc.push(buildSingleSegment(seg, null));\n              } else if (seg.data) {\n                acc.push(buildSingleSegment(seg.data, seg.mode));\n              }\n              return acc;\n            }, []);\n          };\n\n          /**\n           * Builds an optimized sequence of segments from a string,\n           * which will produce the shortest possible bitstream.\n           *\n           * @param  {String} data    Input string\n           * @param  {Number} version QR Code version\n           * @return {Array}          Array of segments\n           */\n          exports.fromString = function fromString(data, version) {\n            var segs = getSegmentsFromString(data, Utils.isKanjiModeEnabled());\n            var nodes = buildNodes(segs);\n            var graph = buildGraph(nodes, version);\n            var path = dijkstra.find_path(graph.map, 'start', 'end');\n            var optimizedSegs = [];\n            for (var i = 1; i < path.length - 1; i++) {\n              optimizedSegs.push(graph.table[path[i]].node);\n            }\n            return exports.fromArray(mergeSegments(optimizedSegs));\n          };\n\n          /**\n           * Splits a string in various segments with the modes which\n           * best represent their content.\n           * The produced segments are far from being optimized.\n           * The output of this function is only used to estimate a QR Code version\n           * which may contain the data.\n           *\n           * @param  {string} data Input string\n           * @return {Array}       Array of segments\n           */\n          exports.rawSplit = function rawSplit(data) {\n            return exports.fromArray(getSegmentsFromString(data, Utils.isKanjiModeEnabled()));\n          };\n        }, {\n          \"./alphanumeric-data\": 3,\n          \"./byte-data\": 6,\n          \"./kanji-data\": 12,\n          \"./mode\": 14,\n          \"./numeric-data\": 15,\n          \"./regex\": 19,\n          \"./utils\": 21,\n          \"dijkstrajs\": 31\n        }],\n        21: [function (require, module, exports) {\n          var toSJISFunction;\n          var CODEWORDS_COUNT = [0,\n          // Not used\n          26, 44, 70, 100, 134, 172, 196, 242, 292, 346, 404, 466, 532, 581, 655, 733, 815, 901, 991, 1085, 1156, 1258, 1364, 1474, 1588, 1706, 1828, 1921, 2051, 2185, 2323, 2465, 2611, 2761, 2876, 3034, 3196, 3362, 3532, 3706];\n\n          /**\n           * Returns the QR Code size for the specified version\n           *\n           * @param  {Number} version QR Code version\n           * @return {Number}         size of QR code\n           */\n          exports.getSymbolSize = function getSymbolSize(version) {\n            if (!version) throw new Error('\"version\" cannot be null or undefined');\n            if (version < 1 || version > 40) throw new Error('\"version\" should be in range from 1 to 40');\n            return version * 4 + 17;\n          };\n\n          /**\n           * Returns the total number of codewords used to store data and EC information.\n           *\n           * @param  {Number} version QR Code version\n           * @return {Number}         Data length in bits\n           */\n          exports.getSymbolTotalCodewords = function getSymbolTotalCodewords(version) {\n            return CODEWORDS_COUNT[version];\n          };\n\n          /**\n           * Encode data with Bose-Chaudhuri-Hocquenghem\n           *\n           * @param  {Number} data Value to encode\n           * @return {Number}      Encoded value\n           */\n          exports.getBCHDigit = function (data) {\n            var digit = 0;\n            while (data !== 0) {\n              digit++;\n              data >>>= 1;\n            }\n            return digit;\n          };\n          exports.setToSJISFunction = function setToSJISFunction(f) {\n            if (typeof f !== 'function') {\n              throw new Error('\"toSJISFunc\" is not a valid function.');\n            }\n            toSJISFunction = f;\n          };\n          exports.isKanjiModeEnabled = function () {\n            return typeof toSJISFunction !== 'undefined';\n          };\n          exports.toSJIS = function toSJIS(kanji) {\n            return toSJISFunction(kanji);\n          };\n        }, {}],\n        22: [function (require, module, exports) {\n          /**\n           * Check if QR Code version is valid\n           *\n           * @param  {Number}  version QR Code version\n           * @return {Boolean}         true if valid version, false otherwise\n           */\n          exports.isValid = function isValid(version) {\n            return !isNaN(version) && version >= 1 && version <= 40;\n          };\n        }, {}],\n        23: [function (require, module, exports) {\n          var Utils = require('./utils');\n          var ECCode = require('./error-correction-code');\n          var ECLevel = require('./error-correction-level');\n          var Mode = require('./mode');\n          var VersionCheck = require('./version-check');\n          var isArray = require('isarray');\n\n          // Generator polynomial used to encode version information\n          var G18 = 1 << 12 | 1 << 11 | 1 << 10 | 1 << 9 | 1 << 8 | 1 << 5 | 1 << 2 | 1 << 0;\n          var G18_BCH = Utils.getBCHDigit(G18);\n          function getBestVersionForDataLength(mode, length, errorCorrectionLevel) {\n            for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n              if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, mode)) {\n                return currentVersion;\n              }\n            }\n            return undefined;\n          }\n          function getReservedBitsCount(mode, version) {\n            // Character count indicator + mode indicator bits\n            return Mode.getCharCountIndicator(mode, version) + 4;\n          }\n          function getTotalBitsFromDataArray(segments, version) {\n            var totalBits = 0;\n            segments.forEach(function (data) {\n              var reservedBits = getReservedBitsCount(data.mode, version);\n              totalBits += reservedBits + data.getBitsLength();\n            });\n            return totalBits;\n          }\n          function getBestVersionForMixedData(segments, errorCorrectionLevel) {\n            for (var currentVersion = 1; currentVersion <= 40; currentVersion++) {\n              var length = getTotalBitsFromDataArray(segments, currentVersion);\n              if (length <= exports.getCapacity(currentVersion, errorCorrectionLevel, Mode.MIXED)) {\n                return currentVersion;\n              }\n            }\n            return undefined;\n          }\n\n          /**\n           * Returns version number from a value.\n           * If value is not a valid version, returns defaultValue\n           *\n           * @param  {Number|String} value        QR Code version\n           * @param  {Number}        defaultValue Fallback value\n           * @return {Number}                     QR Code version number\n           */\n          exports.from = function from(value, defaultValue) {\n            if (VersionCheck.isValid(value)) {\n              return parseInt(value, 10);\n            }\n            return defaultValue;\n          };\n\n          /**\n           * Returns how much data can be stored with the specified QR code version\n           * and error correction level\n           *\n           * @param  {Number} version              QR Code version (1-40)\n           * @param  {Number} errorCorrectionLevel Error correction level\n           * @param  {Mode}   mode                 Data mode\n           * @return {Number}                      Quantity of storable data\n           */\n          exports.getCapacity = function getCapacity(version, errorCorrectionLevel, mode) {\n            if (!VersionCheck.isValid(version)) {\n              throw new Error('Invalid QR Code version');\n            }\n\n            // Use Byte mode as default\n            if (typeof mode === 'undefined') mode = Mode.BYTE;\n\n            // Total codewords for this QR code version (Data + Error correction)\n            var totalCodewords = Utils.getSymbolTotalCodewords(version);\n\n            // Total number of error correction codewords\n            var ecTotalCodewords = ECCode.getTotalCodewordsCount(version, errorCorrectionLevel);\n\n            // Total number of data codewords\n            var dataTotalCodewordsBits = (totalCodewords - ecTotalCodewords) * 8;\n            if (mode === Mode.MIXED) return dataTotalCodewordsBits;\n            var usableBits = dataTotalCodewordsBits - getReservedBitsCount(mode, version);\n\n            // Return max number of storable codewords\n            switch (mode) {\n              case Mode.NUMERIC:\n                return Math.floor(usableBits / 10 * 3);\n              case Mode.ALPHANUMERIC:\n                return Math.floor(usableBits / 11 * 2);\n              case Mode.KANJI:\n                return Math.floor(usableBits / 13);\n              case Mode.BYTE:\n              default:\n                return Math.floor(usableBits / 8);\n            }\n          };\n\n          /**\n           * Returns the minimum version needed to contain the amount of data\n           *\n           * @param  {Segment} data                    Segment of data\n           * @param  {Number} [errorCorrectionLevel=H] Error correction level\n           * @param  {Mode} mode                       Data mode\n           * @return {Number}                          QR Code version\n           */\n          exports.getBestVersionForData = function getBestVersionForData(data, errorCorrectionLevel) {\n            var seg;\n            var ecl = ECLevel.from(errorCorrectionLevel, ECLevel.M);\n            if (isArray(data)) {\n              if (data.length > 1) {\n                return getBestVersionForMixedData(data, ecl);\n              }\n              if (data.length === 0) {\n                return 1;\n              }\n              seg = data[0];\n            } else {\n              seg = data;\n            }\n            return getBestVersionForDataLength(seg.mode, seg.getLength(), ecl);\n          };\n\n          /**\n           * Returns version information with relative error correction bits\n           *\n           * The version information is included in QR Code symbols of version 7 or larger.\n           * It consists of an 18-bit sequence containing 6 data bits,\n           * with 12 error correction bits calculated using the (18, 6) Golay code.\n           *\n           * @param  {Number} version QR Code version\n           * @return {Number}         Encoded version info bits\n           */\n          exports.getEncodedBits = function getEncodedBits(version) {\n            if (!VersionCheck.isValid(version) || version < 7) {\n              throw new Error('Invalid QR Code version');\n            }\n            var d = version << 12;\n            while (Utils.getBCHDigit(d) - G18_BCH >= 0) {\n              d ^= G18 << Utils.getBCHDigit(d) - G18_BCH;\n            }\n            return version << 12 | d;\n          };\n        }, {\n          \"./error-correction-code\": 7,\n          \"./error-correction-level\": 8,\n          \"./mode\": 14,\n          \"./utils\": 21,\n          \"./version-check\": 22,\n          \"isarray\": 33\n        }],\n        24: [function (require, module, exports) {\n          var canPromise = require('./can-promise');\n          var QRCode = require('./core/qrcode');\n          var CanvasRenderer = require('./renderer/canvas');\n          var SvgRenderer = require('./renderer/svg-tag.js');\n          function renderCanvas(renderFunc, canvas, text, opts, cb) {\n            var args = [].slice.call(arguments, 1);\n            var argsNum = args.length;\n            var isLastArgCb = typeof args[argsNum - 1] === 'function';\n            if (!isLastArgCb && !canPromise()) {\n              throw new Error('Callback required as last argument');\n            }\n            if (isLastArgCb) {\n              if (argsNum < 2) {\n                throw new Error('Too few arguments provided');\n              }\n              if (argsNum === 2) {\n                cb = text;\n                text = canvas;\n                canvas = opts = undefined;\n              } else if (argsNum === 3) {\n                if (canvas.getContext && typeof cb === 'undefined') {\n                  cb = opts;\n                  opts = undefined;\n                } else {\n                  cb = opts;\n                  opts = text;\n                  text = canvas;\n                  canvas = undefined;\n                }\n              }\n            } else {\n              if (argsNum < 1) {\n                throw new Error('Too few arguments provided');\n              }\n              if (argsNum === 1) {\n                text = canvas;\n                canvas = opts = undefined;\n              } else if (argsNum === 2 && !canvas.getContext) {\n                opts = text;\n                text = canvas;\n                canvas = undefined;\n              }\n              return new Promise(function (resolve, reject) {\n                try {\n                  var data = QRCode.create(text, opts);\n                  resolve(renderFunc(data, canvas, opts));\n                } catch (e) {\n                  reject(e);\n                }\n              });\n            }\n            try {\n              var data = QRCode.create(text, opts);\n              cb(null, renderFunc(data, canvas, opts));\n            } catch (e) {\n              cb(e);\n            }\n          }\n          exports.create = QRCode.create;\n          exports.toCanvas = renderCanvas.bind(null, CanvasRenderer.render);\n          exports.toDataURL = renderCanvas.bind(null, CanvasRenderer.renderToDataURL);\n\n          // only svg for now.\n          exports.toString = renderCanvas.bind(null, function (data, _, opts) {\n            return SvgRenderer.render(data, opts);\n          });\n        }, {\n          \"./can-promise\": 1,\n          \"./core/qrcode\": 17,\n          \"./renderer/canvas\": 25,\n          \"./renderer/svg-tag.js\": 26\n        }],\n        25: [function (require, module, exports) {\n          var Utils = require('./utils');\n          function clearCanvas(ctx, canvas, size) {\n            ctx.clearRect(0, 0, canvas.width, canvas.height);\n            if (!canvas.style) canvas.style = {};\n            canvas.height = size;\n            canvas.width = size;\n            canvas.style.height = size + 'px';\n            canvas.style.width = size + 'px';\n          }\n          function getCanvasElement() {\n            try {\n              return document.createElement('canvas');\n            } catch (e) {\n              throw new Error('You need to specify a canvas element');\n            }\n          }\n          exports.render = function render(qrData, canvas, options) {\n            var opts = options;\n            var canvasEl = canvas;\n            if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n              opts = canvas;\n              canvas = undefined;\n            }\n            if (!canvas) {\n              canvasEl = getCanvasElement();\n            }\n            opts = Utils.getOptions(opts);\n            var size = Utils.getImageWidth(qrData.modules.size, opts);\n            var ctx = canvasEl.getContext('2d');\n            var image = ctx.createImageData(size, size);\n            Utils.qrToImageData(image.data, qrData, opts);\n            clearCanvas(ctx, canvasEl, size);\n            ctx.putImageData(image, 0, 0);\n            return canvasEl;\n          };\n          exports.renderToDataURL = function renderToDataURL(qrData, canvas, options) {\n            var opts = options;\n            if (typeof opts === 'undefined' && (!canvas || !canvas.getContext)) {\n              opts = canvas;\n              canvas = undefined;\n            }\n            if (!opts) opts = {};\n            var canvasEl = exports.render(qrData, canvas, opts);\n            var type = opts.type || 'image/png';\n            var rendererOpts = opts.rendererOpts || {};\n            return canvasEl.toDataURL(type, rendererOpts.quality);\n          };\n        }, {\n          \"./utils\": 27\n        }],\n        26: [function (require, module, exports) {\n          var Utils = require('./utils');\n          function getColorAttrib(color, attrib) {\n            var alpha = color.a / 255;\n            var str = attrib + '=\"' + color.hex + '\"';\n            return alpha < 1 ? str + ' ' + attrib + '-opacity=\"' + alpha.toFixed(2).slice(1) + '\"' : str;\n          }\n          function svgCmd(cmd, x, y) {\n            var str = cmd + x;\n            if (typeof y !== 'undefined') str += ' ' + y;\n            return str;\n          }\n          function qrToPath(data, size, margin) {\n            var path = '';\n            var moveBy = 0;\n            var newRow = false;\n            var lineLength = 0;\n            for (var i = 0; i < data.length; i++) {\n              var col = Math.floor(i % size);\n              var row = Math.floor(i / size);\n              if (!col && !newRow) newRow = true;\n              if (data[i]) {\n                lineLength++;\n                if (!(i > 0 && col > 0 && data[i - 1])) {\n                  path += newRow ? svgCmd('M', col + margin, 0.5 + row + margin) : svgCmd('m', moveBy, 0);\n                  moveBy = 0;\n                  newRow = false;\n                }\n                if (!(col + 1 < size && data[i + 1])) {\n                  path += svgCmd('h', lineLength);\n                  lineLength = 0;\n                }\n              } else {\n                moveBy++;\n              }\n            }\n            return path;\n          }\n          exports.render = function render(qrData, options, cb) {\n            var opts = Utils.getOptions(options);\n            var size = qrData.modules.size;\n            var data = qrData.modules.data;\n            var qrcodesize = size + opts.margin * 2;\n            var bg = !opts.color.light.a ? '' : '<path ' + getColorAttrib(opts.color.light, 'fill') + ' d=\"M0 0h' + qrcodesize + 'v' + qrcodesize + 'H0z\"/>';\n            var path = '<path ' + getColorAttrib(opts.color.dark, 'stroke') + ' d=\"' + qrToPath(data, size, opts.margin) + '\"/>';\n            var viewBox = 'viewBox=\"' + '0 0 ' + qrcodesize + ' ' + qrcodesize + '\"';\n            var width = !opts.width ? '' : 'width=\"' + opts.width + '\" height=\"' + opts.width + '\" ';\n            var svgTag = '<svg xmlns=\"http://www.w3.org/2000/svg\" ' + width + viewBox + ' shape-rendering=\"crispEdges\">' + bg + path + '</svg>\\n';\n            if (typeof cb === 'function') {\n              cb(null, svgTag);\n            }\n            return svgTag;\n          };\n        }, {\n          \"./utils\": 27\n        }],\n        27: [function (require, module, exports) {\n          function hex2rgba(hex) {\n            if (typeof hex === 'number') {\n              hex = hex.toString();\n            }\n            if (typeof hex !== 'string') {\n              throw new Error('Color should be defined as hex string');\n            }\n            var hexCode = hex.slice().replace('#', '').split('');\n            if (hexCode.length < 3 || hexCode.length === 5 || hexCode.length > 8) {\n              throw new Error('Invalid hex color: ' + hex);\n            }\n\n            // Convert from short to long form (fff -> ffffff)\n            if (hexCode.length === 3 || hexCode.length === 4) {\n              hexCode = Array.prototype.concat.apply([], hexCode.map(function (c) {\n                return [c, c];\n              }));\n            }\n\n            // Add default alpha value\n            if (hexCode.length === 6) hexCode.push('F', 'F');\n            var hexValue = parseInt(hexCode.join(''), 16);\n            return {\n              r: hexValue >> 24 & 255,\n              g: hexValue >> 16 & 255,\n              b: hexValue >> 8 & 255,\n              a: hexValue & 255,\n              hex: '#' + hexCode.slice(0, 6).join('')\n            };\n          }\n          exports.getOptions = function getOptions(options) {\n            if (!options) options = {};\n            if (!options.color) options.color = {};\n            var margin = typeof options.margin === 'undefined' || options.margin === null || options.margin < 0 ? 4 : options.margin;\n            var width = options.width && options.width >= 21 ? options.width : undefined;\n            var scale = options.scale || 4;\n            return {\n              width: width,\n              scale: width ? 4 : scale,\n              margin: margin,\n              color: {\n                dark: hex2rgba(options.color.dark || '#000000ff'),\n                light: hex2rgba(options.color.light || '#ffffffff')\n              },\n              type: options.type,\n              rendererOpts: options.rendererOpts || {}\n            };\n          };\n          exports.getScale = function getScale(qrSize, opts) {\n            return opts.width && opts.width >= qrSize + opts.margin * 2 ? opts.width / (qrSize + opts.margin * 2) : opts.scale;\n          };\n          exports.getImageWidth = function getImageWidth(qrSize, opts) {\n            var scale = exports.getScale(qrSize, opts);\n            return Math.floor((qrSize + opts.margin * 2) * scale);\n          };\n          exports.qrToImageData = function qrToImageData(imgData, qr, opts) {\n            var size = qr.modules.size;\n            var data = qr.modules.data;\n            var scale = exports.getScale(size, opts);\n            var symbolSize = Math.floor((size + opts.margin * 2) * scale);\n            var scaledMargin = opts.margin * scale;\n            var palette = [opts.color.light, opts.color.dark];\n            for (var i = 0; i < symbolSize; i++) {\n              for (var j = 0; j < symbolSize; j++) {\n                var posDst = (i * symbolSize + j) * 4;\n                var pxColor = opts.color.light;\n                if (i >= scaledMargin && j >= scaledMargin && i < symbolSize - scaledMargin && j < symbolSize - scaledMargin) {\n                  var iSrc = Math.floor((i - scaledMargin) / scale);\n                  var jSrc = Math.floor((j - scaledMargin) / scale);\n                  pxColor = palette[data[iSrc * size + jSrc] ? 1 : 0];\n                }\n                imgData[posDst++] = pxColor.r;\n                imgData[posDst++] = pxColor.g;\n                imgData[posDst++] = pxColor.b;\n                imgData[posDst] = pxColor.a;\n              }\n            }\n          };\n        }, {}],\n        28: [function (require, module, exports) {\n          var isArray = require('isarray');\n          function typedArraySupport() {\n            // Can typed array instances be augmented?\n            try {\n              var arr = new Uint8Array(1);\n              arr.__proto__ = {\n                __proto__: Uint8Array.prototype,\n                foo: function () {\n                  return 42;\n                }\n              };\n              return arr.foo() === 42;\n            } catch (e) {\n              return false;\n            }\n          }\n          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n          var K_MAX_LENGTH = Buffer.TYPED_ARRAY_SUPPORT ? 0x7fffffff : 0x3fffffff;\n          function Buffer(arg, offset, length) {\n            if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n              return new Buffer(arg, offset, length);\n            }\n            if (typeof arg === 'number') {\n              return allocUnsafe(this, arg);\n            }\n            return from(this, arg, offset, length);\n          }\n          if (Buffer.TYPED_ARRAY_SUPPORT) {\n            Buffer.prototype.__proto__ = Uint8Array.prototype;\n            Buffer.__proto__ = Uint8Array;\n\n            // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n            if (typeof Symbol !== 'undefined' && Symbol.species && Buffer[Symbol.species] === Buffer) {\n              Object.defineProperty(Buffer, Symbol.species, {\n                value: null,\n                configurable: true,\n                enumerable: false,\n                writable: false\n              });\n            }\n          }\n          function checked(length) {\n            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n            // length is NaN (which is otherwise coerced to zero.)\n            if (length >= K_MAX_LENGTH) {\n              throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n            }\n            return length | 0;\n          }\n          function isnan(val) {\n            return val !== val; // eslint-disable-line no-self-compare\n          }\n\n          function createBuffer(that, length) {\n            var buf;\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              buf = new Uint8Array(length);\n              buf.__proto__ = Buffer.prototype;\n            } else {\n              // Fallback: Return an object instance of the Buffer class\n              buf = that;\n              if (buf === null) {\n                buf = new Buffer(length);\n              }\n              buf.length = length;\n            }\n            return buf;\n          }\n          function allocUnsafe(that, size) {\n            var buf = createBuffer(that, size < 0 ? 0 : checked(size) | 0);\n            if (!Buffer.TYPED_ARRAY_SUPPORT) {\n              for (var i = 0; i < size; ++i) {\n                buf[i] = 0;\n              }\n            }\n            return buf;\n          }\n          function fromString(that, string) {\n            var length = byteLength(string) | 0;\n            var buf = createBuffer(that, length);\n            var actual = buf.write(string);\n            if (actual !== length) {\n              // Writing a hex string, for example, that contains invalid characters will\n              // cause everything after the first invalid character to be ignored. (e.g.\n              // 'abxxcd' will be treated as 'ab')\n              buf = buf.slice(0, actual);\n            }\n            return buf;\n          }\n          function fromArrayLike(that, array) {\n            var length = array.length < 0 ? 0 : checked(array.length) | 0;\n            var buf = createBuffer(that, length);\n            for (var i = 0; i < length; i += 1) {\n              buf[i] = array[i] & 255;\n            }\n            return buf;\n          }\n          function fromArrayBuffer(that, array, byteOffset, length) {\n            if (byteOffset < 0 || array.byteLength < byteOffset) {\n              throw new RangeError('\\'offset\\' is out of bounds');\n            }\n            if (array.byteLength < byteOffset + (length || 0)) {\n              throw new RangeError('\\'length\\' is out of bounds');\n            }\n            var buf;\n            if (byteOffset === undefined && length === undefined) {\n              buf = new Uint8Array(array);\n            } else if (length === undefined) {\n              buf = new Uint8Array(array, byteOffset);\n            } else {\n              buf = new Uint8Array(array, byteOffset, length);\n            }\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              // Return an augmented `Uint8Array` instance, for best performance\n              buf.__proto__ = Buffer.prototype;\n            } else {\n              // Fallback: Return an object instance of the Buffer class\n              buf = fromArrayLike(that, buf);\n            }\n            return buf;\n          }\n          function fromObject(that, obj) {\n            if (Buffer.isBuffer(obj)) {\n              var len = checked(obj.length) | 0;\n              var buf = createBuffer(that, len);\n              if (buf.length === 0) {\n                return buf;\n              }\n              obj.copy(buf, 0, 0, len);\n              return buf;\n            }\n            if (obj) {\n              if (typeof ArrayBuffer !== 'undefined' && obj.buffer instanceof ArrayBuffer || 'length' in obj) {\n                if (typeof obj.length !== 'number' || isnan(obj.length)) {\n                  return createBuffer(that, 0);\n                }\n                return fromArrayLike(that, obj);\n              }\n              if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n                return fromArrayLike(that, obj.data);\n              }\n            }\n            throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.');\n          }\n          function utf8ToBytes(string, units) {\n            units = units || Infinity;\n            var codePoint;\n            var length = string.length;\n            var leadSurrogate = null;\n            var bytes = [];\n            for (var i = 0; i < length; ++i) {\n              codePoint = string.charCodeAt(i);\n\n              // is surrogate component\n              if (codePoint > 0xD7FF && codePoint < 0xE000) {\n                // last char was a lead\n                if (!leadSurrogate) {\n                  // no lead yet\n                  if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  }\n\n                  // valid lead\n                  leadSurrogate = codePoint;\n                  continue;\n                }\n\n                // 2 leads in a row\n                if (codePoint < 0xDC00) {\n                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                  leadSurrogate = codePoint;\n                  continue;\n                }\n\n                // valid surrogate pair\n                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n              } else if (leadSurrogate) {\n                // valid bmp char, but last char was a lead\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n              }\n              leadSurrogate = null;\n\n              // encode utf8\n              if (codePoint < 0x80) {\n                if ((units -= 1) < 0) break;\n                bytes.push(codePoint);\n              } else if (codePoint < 0x800) {\n                if ((units -= 2) < 0) break;\n                bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x10000) {\n                if ((units -= 3) < 0) break;\n                bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x110000) {\n                if ((units -= 4) < 0) break;\n                bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else {\n                throw new Error('Invalid code point');\n              }\n            }\n            return bytes;\n          }\n          function byteLength(string) {\n            if (Buffer.isBuffer(string)) {\n              return string.length;\n            }\n            if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' && (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n              return string.byteLength;\n            }\n            if (typeof string !== 'string') {\n              string = '' + string;\n            }\n            var len = string.length;\n            if (len === 0) return 0;\n            return utf8ToBytes(string).length;\n          }\n          function blitBuffer(src, dst, offset, length) {\n            for (var i = 0; i < length; ++i) {\n              if (i + offset >= dst.length || i >= src.length) break;\n              dst[i + offset] = src[i];\n            }\n            return i;\n          }\n          function utf8Write(buf, string, offset, length) {\n            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n          }\n          function from(that, value, offset, length) {\n            if (typeof value === 'number') {\n              throw new TypeError('\"value\" argument must not be a number');\n            }\n            if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n              return fromArrayBuffer(that, value, offset, length);\n            }\n            if (typeof value === 'string') {\n              return fromString(that, value);\n            }\n            return fromObject(that, value);\n          }\n          Buffer.prototype.write = function write(string, offset, length) {\n            // Buffer#write(string)\n            if (offset === undefined) {\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, encoding)\n            } else if (length === undefined && typeof offset === 'string') {\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, offset[, length])\n            } else if (isFinite(offset)) {\n              offset = offset | 0;\n              if (isFinite(length)) {\n                length = length | 0;\n              } else {\n                length = undefined;\n              }\n            }\n            var remaining = this.length - offset;\n            if (length === undefined || length > remaining) length = remaining;\n            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n              throw new RangeError('Attempt to write outside buffer bounds');\n            }\n            return utf8Write(this, string, offset, length);\n          };\n          Buffer.prototype.slice = function slice(start, end) {\n            var len = this.length;\n            start = ~~start;\n            end = end === undefined ? len : ~~end;\n            if (start < 0) {\n              start += len;\n              if (start < 0) start = 0;\n            } else if (start > len) {\n              start = len;\n            }\n            if (end < 0) {\n              end += len;\n              if (end < 0) end = 0;\n            } else if (end > len) {\n              end = len;\n            }\n            if (end < start) end = start;\n            var newBuf;\n            if (Buffer.TYPED_ARRAY_SUPPORT) {\n              newBuf = this.subarray(start, end);\n              // Return an augmented `Uint8Array` instance\n              newBuf.__proto__ = Buffer.prototype;\n            } else {\n              var sliceLen = end - start;\n              newBuf = new Buffer(sliceLen, undefined);\n              for (var i = 0; i < sliceLen; ++i) {\n                newBuf[i] = this[i + start];\n              }\n            }\n            return newBuf;\n          };\n          Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n            if (!start) start = 0;\n            if (!end && end !== 0) end = this.length;\n            if (targetStart >= target.length) targetStart = target.length;\n            if (!targetStart) targetStart = 0;\n            if (end > 0 && end < start) end = start;\n\n            // Copy 0 bytes; we're done\n            if (end === start) return 0;\n            if (target.length === 0 || this.length === 0) return 0;\n\n            // Fatal error conditions\n            if (targetStart < 0) {\n              throw new RangeError('targetStart out of bounds');\n            }\n            if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds');\n            if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n            // Are we oob?\n            if (end > this.length) end = this.length;\n            if (target.length - targetStart < end - start) {\n              end = target.length - targetStart + start;\n            }\n            var len = end - start;\n            var i;\n            if (this === target && start < targetStart && targetStart < end) {\n              // descending copy from end\n              for (i = len - 1; i >= 0; --i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n              // ascending copy from start\n              for (i = 0; i < len; ++i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else {\n              Uint8Array.prototype.set.call(target, this.subarray(start, start + len), targetStart);\n            }\n            return len;\n          };\n          Buffer.prototype.fill = function fill(val, start, end) {\n            // Handle string cases:\n            if (typeof val === 'string') {\n              if (typeof start === 'string') {\n                start = 0;\n                end = this.length;\n              } else if (typeof end === 'string') {\n                end = this.length;\n              }\n              if (val.length === 1) {\n                var code = val.charCodeAt(0);\n                if (code < 256) {\n                  val = code;\n                }\n              }\n            } else if (typeof val === 'number') {\n              val = val & 255;\n            }\n\n            // Invalid ranges are not set to a default, so can range check early.\n            if (start < 0 || this.length < start || this.length < end) {\n              throw new RangeError('Out of range index');\n            }\n            if (end <= start) {\n              return this;\n            }\n            start = start >>> 0;\n            end = end === undefined ? this.length : end >>> 0;\n            if (!val) val = 0;\n            var i;\n            if (typeof val === 'number') {\n              for (i = start; i < end; ++i) {\n                this[i] = val;\n              }\n            } else {\n              var bytes = Buffer.isBuffer(val) ? val : new Buffer(val);\n              var len = bytes.length;\n              for (i = 0; i < end - start; ++i) {\n                this[i + start] = bytes[i % len];\n              }\n            }\n            return this;\n          };\n          Buffer.concat = function concat(list, length) {\n            if (!isArray(list)) {\n              throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n            if (list.length === 0) {\n              return createBuffer(null, 0);\n            }\n            var i;\n            if (length === undefined) {\n              length = 0;\n              for (i = 0; i < list.length; ++i) {\n                length += list[i].length;\n              }\n            }\n            var buffer = allocUnsafe(null, length);\n            var pos = 0;\n            for (i = 0; i < list.length; ++i) {\n              var buf = list[i];\n              if (!Buffer.isBuffer(buf)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n              }\n              buf.copy(buffer, pos);\n              pos += buf.length;\n            }\n            return buffer;\n          };\n          Buffer.byteLength = byteLength;\n          Buffer.prototype._isBuffer = true;\n          Buffer.isBuffer = function isBuffer(b) {\n            return !!(b != null && b._isBuffer);\n          };\n          module.exports.alloc = function (size) {\n            var buffer = new Buffer(size);\n            buffer.fill(0);\n            return buffer;\n          };\n          module.exports.from = function (data) {\n            return new Buffer(data);\n          };\n        }, {\n          \"isarray\": 33\n        }],\n        29: [function (require, module, exports) {\n          exports.byteLength = byteLength;\n          exports.toByteArray = toByteArray;\n          exports.fromByteArray = fromByteArray;\n          var lookup = [];\n          var revLookup = [];\n          var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;\n          var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n          for (var i = 0, len = code.length; i < len; ++i) {\n            lookup[i] = code[i];\n            revLookup[code.charCodeAt(i)] = i;\n          }\n\n          // Support decoding URL-safe base64 strings, as Node.js does.\n          // See: https://en.wikipedia.org/wiki/Base64#URL_applications\n          revLookup['-'.charCodeAt(0)] = 62;\n          revLookup['_'.charCodeAt(0)] = 63;\n          function getLens(b64) {\n            var len = b64.length;\n            if (len % 4 > 0) {\n              throw new Error('Invalid string. Length must be a multiple of 4');\n            }\n\n            // Trim off extra bytes after placeholder bytes are found\n            // See: https://github.com/beatgammit/base64-js/issues/42\n            var validLen = b64.indexOf('=');\n            if (validLen === -1) validLen = len;\n            var placeHoldersLen = validLen === len ? 0 : 4 - validLen % 4;\n            return [validLen, placeHoldersLen];\n          }\n\n          // base64 is 4/3 + up to two characters of the original data\n          function byteLength(b64) {\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n          function _byteLength(b64, validLen, placeHoldersLen) {\n            return (validLen + placeHoldersLen) * 3 / 4 - placeHoldersLen;\n          }\n          function toByteArray(b64) {\n            var tmp;\n            var lens = getLens(b64);\n            var validLen = lens[0];\n            var placeHoldersLen = lens[1];\n            var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen));\n            var curByte = 0;\n\n            // if there are placeholders, only get up to the last complete 4 chars\n            var len = placeHoldersLen > 0 ? validLen - 4 : validLen;\n            var i;\n            for (i = 0; i < len; i += 4) {\n              tmp = revLookup[b64.charCodeAt(i)] << 18 | revLookup[b64.charCodeAt(i + 1)] << 12 | revLookup[b64.charCodeAt(i + 2)] << 6 | revLookup[b64.charCodeAt(i + 3)];\n              arr[curByte++] = tmp >> 16 & 0xFF;\n              arr[curByte++] = tmp >> 8 & 0xFF;\n              arr[curByte++] = tmp & 0xFF;\n            }\n            if (placeHoldersLen === 2) {\n              tmp = revLookup[b64.charCodeAt(i)] << 2 | revLookup[b64.charCodeAt(i + 1)] >> 4;\n              arr[curByte++] = tmp & 0xFF;\n            }\n            if (placeHoldersLen === 1) {\n              tmp = revLookup[b64.charCodeAt(i)] << 10 | revLookup[b64.charCodeAt(i + 1)] << 4 | revLookup[b64.charCodeAt(i + 2)] >> 2;\n              arr[curByte++] = tmp >> 8 & 0xFF;\n              arr[curByte++] = tmp & 0xFF;\n            }\n            return arr;\n          }\n          function tripletToBase64(num) {\n            return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F];\n          }\n          function encodeChunk(uint8, start, end) {\n            var tmp;\n            var output = [];\n            for (var i = start; i < end; i += 3) {\n              tmp = (uint8[i] << 16 & 0xFF0000) + (uint8[i + 1] << 8 & 0xFF00) + (uint8[i + 2] & 0xFF);\n              output.push(tripletToBase64(tmp));\n            }\n            return output.join('');\n          }\n          function fromByteArray(uint8) {\n            var tmp;\n            var len = uint8.length;\n            var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes\n            var parts = [];\n            var maxChunkLength = 16383; // must be multiple of 3\n\n            // go through the array every three bytes, we'll deal with trailing stuff later\n            for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n              parts.push(encodeChunk(uint8, i, i + maxChunkLength > len2 ? len2 : i + maxChunkLength));\n            }\n\n            // pad the end with zeros, but make sure to not forget the extra bytes\n            if (extraBytes === 1) {\n              tmp = uint8[len - 1];\n              parts.push(lookup[tmp >> 2] + lookup[tmp << 4 & 0x3F] + '==');\n            } else if (extraBytes === 2) {\n              tmp = (uint8[len - 2] << 8) + uint8[len - 1];\n              parts.push(lookup[tmp >> 10] + lookup[tmp >> 4 & 0x3F] + lookup[tmp << 2 & 0x3F] + '=');\n            }\n            return parts.join('');\n          }\n        }, {}],\n        30: [function (require, module, exports) {\n          var base64 = require('base64-js');\n          var ieee754 = require('ieee754');\n          var customInspectSymbol = typeof Symbol === 'function' && typeof Symbol.for === 'function' ? Symbol.for('nodejs.util.inspect.custom') : null;\n          exports.Buffer = Buffer;\n          exports.SlowBuffer = SlowBuffer;\n          exports.INSPECT_MAX_BYTES = 50;\n          var K_MAX_LENGTH = 0x7fffffff;\n          exports.kMaxLength = K_MAX_LENGTH;\n\n          /**\n           * If `Buffer.TYPED_ARRAY_SUPPORT`:\n           *   === true    Use Uint8Array implementation (fastest)\n           *   === false   Print warning and recommend using `buffer` v4.x which has an Object\n           *               implementation (most compatible, even IE6)\n           *\n           * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n           * Opera 11.6+, iOS 4.2+.\n           *\n           * We report that the browser does not support typed arrays if the are not subclassable\n           * using __proto__. Firefox 4-29 lacks support for adding new properties to `Uint8Array`\n           * (See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438). IE 10 lacks support\n           * for __proto__ and has a buggy typed array implementation.\n           */\n          Buffer.TYPED_ARRAY_SUPPORT = typedArraySupport();\n          if (!Buffer.TYPED_ARRAY_SUPPORT && typeof console !== 'undefined' && typeof console.error === 'function') {\n            console.error('This browser lacks typed array (Uint8Array) support which is required by ' + '`buffer` v5.x. Use `buffer` v4.x if you require old browser support.');\n          }\n          function typedArraySupport() {\n            // Can typed array instances can be augmented?\n            try {\n              var arr = new Uint8Array(1);\n              var proto = {\n                foo: function () {\n                  return 42;\n                }\n              };\n              Object.setPrototypeOf(proto, Uint8Array.prototype);\n              Object.setPrototypeOf(arr, proto);\n              return arr.foo() === 42;\n            } catch (e) {\n              return false;\n            }\n          }\n          Object.defineProperty(Buffer.prototype, 'parent', {\n            enumerable: true,\n            get: function () {\n              if (!Buffer.isBuffer(this)) return undefined;\n              return this.buffer;\n            }\n          });\n          Object.defineProperty(Buffer.prototype, 'offset', {\n            enumerable: true,\n            get: function () {\n              if (!Buffer.isBuffer(this)) return undefined;\n              return this.byteOffset;\n            }\n          });\n          function createBuffer(length) {\n            if (length > K_MAX_LENGTH) {\n              throw new RangeError('The value \"' + length + '\" is invalid for option \"size\"');\n            }\n            // Return an augmented `Uint8Array` instance\n            var buf = new Uint8Array(length);\n            Object.setPrototypeOf(buf, Buffer.prototype);\n            return buf;\n          }\n\n          /**\n           * The Buffer constructor returns instances of `Uint8Array` that have their\n           * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n           * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n           * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n           * returns a single octet.\n           *\n           * The `Uint8Array` prototype remains unmodified.\n           */\n\n          function Buffer(arg, encodingOrOffset, length) {\n            // Common case.\n            if (typeof arg === 'number') {\n              if (typeof encodingOrOffset === 'string') {\n                throw new TypeError('The \"string\" argument must be of type string. Received type number');\n              }\n              return allocUnsafe(arg);\n            }\n            return from(arg, encodingOrOffset, length);\n          }\n\n          // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n          if (typeof Symbol !== 'undefined' && Symbol.species != null && Buffer[Symbol.species] === Buffer) {\n            Object.defineProperty(Buffer, Symbol.species, {\n              value: null,\n              configurable: true,\n              enumerable: false,\n              writable: false\n            });\n          }\n          Buffer.poolSize = 8192; // not used by this implementation\n\n          function from(value, encodingOrOffset, length) {\n            if (typeof value === 'string') {\n              return fromString(value, encodingOrOffset);\n            }\n            if (ArrayBuffer.isView(value)) {\n              return fromArrayLike(value);\n            }\n            if (value == null) {\n              throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n            }\n            if (isInstance(value, ArrayBuffer) || value && isInstance(value.buffer, ArrayBuffer)) {\n              return fromArrayBuffer(value, encodingOrOffset, length);\n            }\n            if (typeof value === 'number') {\n              throw new TypeError('The \"value\" argument must not be of type number. Received type number');\n            }\n            var valueOf = value.valueOf && value.valueOf();\n            if (valueOf != null && valueOf !== value) {\n              return Buffer.from(valueOf, encodingOrOffset, length);\n            }\n            var b = fromObject(value);\n            if (b) return b;\n            if (typeof Symbol !== 'undefined' && Symbol.toPrimitive != null && typeof value[Symbol.toPrimitive] === 'function') {\n              return Buffer.from(value[Symbol.toPrimitive]('string'), encodingOrOffset, length);\n            }\n            throw new TypeError('The first argument must be one of type string, Buffer, ArrayBuffer, Array, ' + 'or Array-like Object. Received type ' + typeof value);\n          }\n\n          /**\n           * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n           * if value is a number.\n           * Buffer.from(str[, encoding])\n           * Buffer.from(array)\n           * Buffer.from(buffer)\n           * Buffer.from(arrayBuffer[, byteOffset[, length]])\n           **/\n          Buffer.from = function (value, encodingOrOffset, length) {\n            return from(value, encodingOrOffset, length);\n          };\n\n          // Note: Change prototype *after* Buffer.from is defined to workaround Chrome bug:\n          // https://github.com/feross/buffer/pull/148\n          Object.setPrototypeOf(Buffer.prototype, Uint8Array.prototype);\n          Object.setPrototypeOf(Buffer, Uint8Array);\n          function assertSize(size) {\n            if (typeof size !== 'number') {\n              throw new TypeError('\"size\" argument must be of type number');\n            } else if (size < 0) {\n              throw new RangeError('The value \"' + size + '\" is invalid for option \"size\"');\n            }\n          }\n          function alloc(size, fill, encoding) {\n            assertSize(size);\n            if (size <= 0) {\n              return createBuffer(size);\n            }\n            if (fill !== undefined) {\n              // Only pay attention to encoding if it's a string. This\n              // prevents accidentally sending in a number that would\n              // be interpretted as a start offset.\n              return typeof encoding === 'string' ? createBuffer(size).fill(fill, encoding) : createBuffer(size).fill(fill);\n            }\n            return createBuffer(size);\n          }\n\n          /**\n           * Creates a new filled Buffer instance.\n           * alloc(size[, fill[, encoding]])\n           **/\n          Buffer.alloc = function (size, fill, encoding) {\n            return alloc(size, fill, encoding);\n          };\n          function allocUnsafe(size) {\n            assertSize(size);\n            return createBuffer(size < 0 ? 0 : checked(size) | 0);\n          }\n\n          /**\n           * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n           * */\n          Buffer.allocUnsafe = function (size) {\n            return allocUnsafe(size);\n          };\n          /**\n           * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n           */\n          Buffer.allocUnsafeSlow = function (size) {\n            return allocUnsafe(size);\n          };\n          function fromString(string, encoding) {\n            if (typeof encoding !== 'string' || encoding === '') {\n              encoding = 'utf8';\n            }\n            if (!Buffer.isEncoding(encoding)) {\n              throw new TypeError('Unknown encoding: ' + encoding);\n            }\n            var length = byteLength(string, encoding) | 0;\n            var buf = createBuffer(length);\n            var actual = buf.write(string, encoding);\n            if (actual !== length) {\n              // Writing a hex string, for example, that contains invalid characters will\n              // cause everything after the first invalid character to be ignored. (e.g.\n              // 'abxxcd' will be treated as 'ab')\n              buf = buf.slice(0, actual);\n            }\n            return buf;\n          }\n          function fromArrayLike(array) {\n            var length = array.length < 0 ? 0 : checked(array.length) | 0;\n            var buf = createBuffer(length);\n            for (var i = 0; i < length; i += 1) {\n              buf[i] = array[i] & 255;\n            }\n            return buf;\n          }\n          function fromArrayBuffer(array, byteOffset, length) {\n            if (byteOffset < 0 || array.byteLength < byteOffset) {\n              throw new RangeError('\"offset\" is outside of buffer bounds');\n            }\n            if (array.byteLength < byteOffset + (length || 0)) {\n              throw new RangeError('\"length\" is outside of buffer bounds');\n            }\n            var buf;\n            if (byteOffset === undefined && length === undefined) {\n              buf = new Uint8Array(array);\n            } else if (length === undefined) {\n              buf = new Uint8Array(array, byteOffset);\n            } else {\n              buf = new Uint8Array(array, byteOffset, length);\n            }\n\n            // Return an augmented `Uint8Array` instance\n            Object.setPrototypeOf(buf, Buffer.prototype);\n            return buf;\n          }\n          function fromObject(obj) {\n            if (Buffer.isBuffer(obj)) {\n              var len = checked(obj.length) | 0;\n              var buf = createBuffer(len);\n              if (buf.length === 0) {\n                return buf;\n              }\n              obj.copy(buf, 0, 0, len);\n              return buf;\n            }\n            if (obj.length !== undefined) {\n              if (typeof obj.length !== 'number' || numberIsNaN(obj.length)) {\n                return createBuffer(0);\n              }\n              return fromArrayLike(obj);\n            }\n            if (obj.type === 'Buffer' && Array.isArray(obj.data)) {\n              return fromArrayLike(obj.data);\n            }\n          }\n          function checked(length) {\n            // Note: cannot use `length < K_MAX_LENGTH` here because that fails when\n            // length is NaN (which is otherwise coerced to zero.)\n            if (length >= K_MAX_LENGTH) {\n              throw new RangeError('Attempt to allocate Buffer larger than maximum ' + 'size: 0x' + K_MAX_LENGTH.toString(16) + ' bytes');\n            }\n            return length | 0;\n          }\n          function SlowBuffer(length) {\n            if (+length != length) {\n              // eslint-disable-line eqeqeq\n              length = 0;\n            }\n            return Buffer.alloc(+length);\n          }\n          Buffer.isBuffer = function isBuffer(b) {\n            return b != null && b._isBuffer === true && b !== Buffer.prototype; // so Buffer.isBuffer(Buffer.prototype) will be false\n          };\n\n          Buffer.compare = function compare(a, b) {\n            if (isInstance(a, Uint8Array)) a = Buffer.from(a, a.offset, a.byteLength);\n            if (isInstance(b, Uint8Array)) b = Buffer.from(b, b.offset, b.byteLength);\n            if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n              throw new TypeError('The \"buf1\", \"buf2\" arguments must be one of type Buffer or Uint8Array');\n            }\n            if (a === b) return 0;\n            var x = a.length;\n            var y = b.length;\n            for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n              if (a[i] !== b[i]) {\n                x = a[i];\n                y = b[i];\n                break;\n              }\n            }\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          };\n          Buffer.isEncoding = function isEncoding(encoding) {\n            switch (String(encoding).toLowerCase()) {\n              case 'hex':\n              case 'utf8':\n              case 'utf-8':\n              case 'ascii':\n              case 'latin1':\n              case 'binary':\n              case 'base64':\n              case 'ucs2':\n              case 'ucs-2':\n              case 'utf16le':\n              case 'utf-16le':\n                return true;\n              default:\n                return false;\n            }\n          };\n          Buffer.concat = function concat(list, length) {\n            if (!Array.isArray(list)) {\n              throw new TypeError('\"list\" argument must be an Array of Buffers');\n            }\n            if (list.length === 0) {\n              return Buffer.alloc(0);\n            }\n            var i;\n            if (length === undefined) {\n              length = 0;\n              for (i = 0; i < list.length; ++i) {\n                length += list[i].length;\n              }\n            }\n            var buffer = Buffer.allocUnsafe(length);\n            var pos = 0;\n            for (i = 0; i < list.length; ++i) {\n              var buf = list[i];\n              if (isInstance(buf, Uint8Array)) {\n                buf = Buffer.from(buf);\n              }\n              if (!Buffer.isBuffer(buf)) {\n                throw new TypeError('\"list\" argument must be an Array of Buffers');\n              }\n              buf.copy(buffer, pos);\n              pos += buf.length;\n            }\n            return buffer;\n          };\n          function byteLength(string, encoding) {\n            if (Buffer.isBuffer(string)) {\n              return string.length;\n            }\n            if (ArrayBuffer.isView(string) || isInstance(string, ArrayBuffer)) {\n              return string.byteLength;\n            }\n            if (typeof string !== 'string') {\n              throw new TypeError('The \"string\" argument must be one of type string, Buffer, or ArrayBuffer. ' + 'Received type ' + typeof string);\n            }\n            var len = string.length;\n            var mustMatch = arguments.length > 2 && arguments[2] === true;\n            if (!mustMatch && len === 0) return 0;\n\n            // Use a for loop to avoid recursion\n            var loweredCase = false;\n            for (;;) {\n              switch (encoding) {\n                case 'ascii':\n                case 'latin1':\n                case 'binary':\n                  return len;\n                case 'utf8':\n                case 'utf-8':\n                  return utf8ToBytes(string).length;\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return len * 2;\n                case 'hex':\n                  return len >>> 1;\n                case 'base64':\n                  return base64ToBytes(string).length;\n                default:\n                  if (loweredCase) {\n                    return mustMatch ? -1 : utf8ToBytes(string).length; // assume utf8\n                  }\n\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          }\n          Buffer.byteLength = byteLength;\n          function slowToString(encoding, start, end) {\n            var loweredCase = false;\n\n            // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n            // property of a typed array.\n\n            // This behaves neither like String nor Uint8Array in that we set start/end\n            // to their upper/lower bounds if the value passed is out of range.\n            // undefined is handled specially as per ECMA-262 6th Edition,\n            // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n            if (start === undefined || start < 0) {\n              start = 0;\n            }\n            // Return early if start > this.length. Done here to prevent potential uint32\n            // coercion fail below.\n            if (start > this.length) {\n              return '';\n            }\n            if (end === undefined || end > this.length) {\n              end = this.length;\n            }\n            if (end <= 0) {\n              return '';\n            }\n\n            // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n            end >>>= 0;\n            start >>>= 0;\n            if (end <= start) {\n              return '';\n            }\n            if (!encoding) encoding = 'utf8';\n            while (true) {\n              switch (encoding) {\n                case 'hex':\n                  return hexSlice(this, start, end);\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Slice(this, start, end);\n                case 'ascii':\n                  return asciiSlice(this, start, end);\n                case 'latin1':\n                case 'binary':\n                  return latin1Slice(this, start, end);\n                case 'base64':\n                  return base64Slice(this, start, end);\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return utf16leSlice(this, start, end);\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = (encoding + '').toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          }\n\n          // This property is used by `Buffer.isBuffer` (and the `is-buffer` npm package)\n          // to detect a Buffer instance. It's not possible to use `instanceof Buffer`\n          // reliably in a browserify context because there could be multiple different\n          // copies of the 'buffer' package in use. This method works even for Buffer\n          // instances that were created from another copy of the `buffer` package.\n          // See: https://github.com/feross/buffer/issues/154\n          Buffer.prototype._isBuffer = true;\n          function swap(b, n, m) {\n            var i = b[n];\n            b[n] = b[m];\n            b[m] = i;\n          }\n          Buffer.prototype.swap16 = function swap16() {\n            var len = this.length;\n            if (len % 2 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 16-bits');\n            }\n            for (var i = 0; i < len; i += 2) {\n              swap(this, i, i + 1);\n            }\n            return this;\n          };\n          Buffer.prototype.swap32 = function swap32() {\n            var len = this.length;\n            if (len % 4 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 32-bits');\n            }\n            for (var i = 0; i < len; i += 4) {\n              swap(this, i, i + 3);\n              swap(this, i + 1, i + 2);\n            }\n            return this;\n          };\n          Buffer.prototype.swap64 = function swap64() {\n            var len = this.length;\n            if (len % 8 !== 0) {\n              throw new RangeError('Buffer size must be a multiple of 64-bits');\n            }\n            for (var i = 0; i < len; i += 8) {\n              swap(this, i, i + 7);\n              swap(this, i + 1, i + 6);\n              swap(this, i + 2, i + 5);\n              swap(this, i + 3, i + 4);\n            }\n            return this;\n          };\n          Buffer.prototype.toString = function toString() {\n            var length = this.length;\n            if (length === 0) return '';\n            if (arguments.length === 0) return utf8Slice(this, 0, length);\n            return slowToString.apply(this, arguments);\n          };\n          Buffer.prototype.toLocaleString = Buffer.prototype.toString;\n          Buffer.prototype.equals = function equals(b) {\n            if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer');\n            if (this === b) return true;\n            return Buffer.compare(this, b) === 0;\n          };\n          Buffer.prototype.inspect = function inspect() {\n            var str = '';\n            var max = exports.INSPECT_MAX_BYTES;\n            str = this.toString('hex', 0, max).replace(/(.{2})/g, '$1 ').trim();\n            if (this.length > max) str += ' ... ';\n            return '<Buffer ' + str + '>';\n          };\n          if (customInspectSymbol) {\n            Buffer.prototype[customInspectSymbol] = Buffer.prototype.inspect;\n          }\n          Buffer.prototype.compare = function compare(target, start, end, thisStart, thisEnd) {\n            if (isInstance(target, Uint8Array)) {\n              target = Buffer.from(target, target.offset, target.byteLength);\n            }\n            if (!Buffer.isBuffer(target)) {\n              throw new TypeError('The \"target\" argument must be one of type Buffer or Uint8Array. ' + 'Received type ' + typeof target);\n            }\n            if (start === undefined) {\n              start = 0;\n            }\n            if (end === undefined) {\n              end = target ? target.length : 0;\n            }\n            if (thisStart === undefined) {\n              thisStart = 0;\n            }\n            if (thisEnd === undefined) {\n              thisEnd = this.length;\n            }\n            if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n              throw new RangeError('out of range index');\n            }\n            if (thisStart >= thisEnd && start >= end) {\n              return 0;\n            }\n            if (thisStart >= thisEnd) {\n              return -1;\n            }\n            if (start >= end) {\n              return 1;\n            }\n            start >>>= 0;\n            end >>>= 0;\n            thisStart >>>= 0;\n            thisEnd >>>= 0;\n            if (this === target) return 0;\n            var x = thisEnd - thisStart;\n            var y = end - start;\n            var len = Math.min(x, y);\n            var thisCopy = this.slice(thisStart, thisEnd);\n            var targetCopy = target.slice(start, end);\n            for (var i = 0; i < len; ++i) {\n              if (thisCopy[i] !== targetCopy[i]) {\n                x = thisCopy[i];\n                y = targetCopy[i];\n                break;\n              }\n            }\n            if (x < y) return -1;\n            if (y < x) return 1;\n            return 0;\n          };\n\n          // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n          // OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n          //\n          // Arguments:\n          // - buffer - a Buffer to search\n          // - val - a string, Buffer, or number\n          // - byteOffset - an index into `buffer`; will be clamped to an int32\n          // - encoding - an optional encoding, relevant is val is a string\n          // - dir - true for indexOf, false for lastIndexOf\n          function bidirectionalIndexOf(buffer, val, byteOffset, encoding, dir) {\n            // Empty buffer means no match\n            if (buffer.length === 0) return -1;\n\n            // Normalize byteOffset\n            if (typeof byteOffset === 'string') {\n              encoding = byteOffset;\n              byteOffset = 0;\n            } else if (byteOffset > 0x7fffffff) {\n              byteOffset = 0x7fffffff;\n            } else if (byteOffset < -0x80000000) {\n              byteOffset = -0x80000000;\n            }\n            byteOffset = +byteOffset; // Coerce to Number.\n            if (numberIsNaN(byteOffset)) {\n              // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n              byteOffset = dir ? 0 : buffer.length - 1;\n            }\n\n            // Normalize byteOffset: negative offsets start from the end of the buffer\n            if (byteOffset < 0) byteOffset = buffer.length + byteOffset;\n            if (byteOffset >= buffer.length) {\n              if (dir) return -1;else byteOffset = buffer.length - 1;\n            } else if (byteOffset < 0) {\n              if (dir) byteOffset = 0;else return -1;\n            }\n\n            // Normalize val\n            if (typeof val === 'string') {\n              val = Buffer.from(val, encoding);\n            }\n\n            // Finally, search either indexOf (if dir is true) or lastIndexOf\n            if (Buffer.isBuffer(val)) {\n              // Special case: looking for empty string/buffer always fails\n              if (val.length === 0) {\n                return -1;\n              }\n              return arrayIndexOf(buffer, val, byteOffset, encoding, dir);\n            } else if (typeof val === 'number') {\n              val = val & 0xFF; // Search for a byte value [0-255]\n              if (typeof Uint8Array.prototype.indexOf === 'function') {\n                if (dir) {\n                  return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset);\n                } else {\n                  return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset);\n                }\n              }\n              return arrayIndexOf(buffer, [val], byteOffset, encoding, dir);\n            }\n            throw new TypeError('val must be string, number or Buffer');\n          }\n          function arrayIndexOf(arr, val, byteOffset, encoding, dir) {\n            var indexSize = 1;\n            var arrLength = arr.length;\n            var valLength = val.length;\n            if (encoding !== undefined) {\n              encoding = String(encoding).toLowerCase();\n              if (encoding === 'ucs2' || encoding === 'ucs-2' || encoding === 'utf16le' || encoding === 'utf-16le') {\n                if (arr.length < 2 || val.length < 2) {\n                  return -1;\n                }\n                indexSize = 2;\n                arrLength /= 2;\n                valLength /= 2;\n                byteOffset /= 2;\n              }\n            }\n            function read(buf, i) {\n              if (indexSize === 1) {\n                return buf[i];\n              } else {\n                return buf.readUInt16BE(i * indexSize);\n              }\n            }\n            var i;\n            if (dir) {\n              var foundIndex = -1;\n              for (i = byteOffset; i < arrLength; i++) {\n                if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n                  if (foundIndex === -1) foundIndex = i;\n                  if (i - foundIndex + 1 === valLength) return foundIndex * indexSize;\n                } else {\n                  if (foundIndex !== -1) i -= i - foundIndex;\n                  foundIndex = -1;\n                }\n              }\n            } else {\n              if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;\n              for (i = byteOffset; i >= 0; i--) {\n                var found = true;\n                for (var j = 0; j < valLength; j++) {\n                  if (read(arr, i + j) !== read(val, j)) {\n                    found = false;\n                    break;\n                  }\n                }\n                if (found) return i;\n              }\n            }\n            return -1;\n          }\n          Buffer.prototype.includes = function includes(val, byteOffset, encoding) {\n            return this.indexOf(val, byteOffset, encoding) !== -1;\n          };\n          Buffer.prototype.indexOf = function indexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, true);\n          };\n          Buffer.prototype.lastIndexOf = function lastIndexOf(val, byteOffset, encoding) {\n            return bidirectionalIndexOf(this, val, byteOffset, encoding, false);\n          };\n          function hexWrite(buf, string, offset, length) {\n            offset = Number(offset) || 0;\n            var remaining = buf.length - offset;\n            if (!length) {\n              length = remaining;\n            } else {\n              length = Number(length);\n              if (length > remaining) {\n                length = remaining;\n              }\n            }\n            var strLen = string.length;\n            if (length > strLen / 2) {\n              length = strLen / 2;\n            }\n            for (var i = 0; i < length; ++i) {\n              var parsed = parseInt(string.substr(i * 2, 2), 16);\n              if (numberIsNaN(parsed)) return i;\n              buf[offset + i] = parsed;\n            }\n            return i;\n          }\n          function utf8Write(buf, string, offset, length) {\n            return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length);\n          }\n          function asciiWrite(buf, string, offset, length) {\n            return blitBuffer(asciiToBytes(string), buf, offset, length);\n          }\n          function latin1Write(buf, string, offset, length) {\n            return asciiWrite(buf, string, offset, length);\n          }\n          function base64Write(buf, string, offset, length) {\n            return blitBuffer(base64ToBytes(string), buf, offset, length);\n          }\n          function ucs2Write(buf, string, offset, length) {\n            return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length);\n          }\n          Buffer.prototype.write = function write(string, offset, length, encoding) {\n            // Buffer#write(string)\n            if (offset === undefined) {\n              encoding = 'utf8';\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, encoding)\n            } else if (length === undefined && typeof offset === 'string') {\n              encoding = offset;\n              length = this.length;\n              offset = 0;\n              // Buffer#write(string, offset[, length][, encoding])\n            } else if (isFinite(offset)) {\n              offset = offset >>> 0;\n              if (isFinite(length)) {\n                length = length >>> 0;\n                if (encoding === undefined) encoding = 'utf8';\n              } else {\n                encoding = length;\n                length = undefined;\n              }\n            } else {\n              throw new Error('Buffer.write(string, encoding, offset[, length]) is no longer supported');\n            }\n            var remaining = this.length - offset;\n            if (length === undefined || length > remaining) length = remaining;\n            if (string.length > 0 && (length < 0 || offset < 0) || offset > this.length) {\n              throw new RangeError('Attempt to write outside buffer bounds');\n            }\n            if (!encoding) encoding = 'utf8';\n            var loweredCase = false;\n            for (;;) {\n              switch (encoding) {\n                case 'hex':\n                  return hexWrite(this, string, offset, length);\n                case 'utf8':\n                case 'utf-8':\n                  return utf8Write(this, string, offset, length);\n                case 'ascii':\n                  return asciiWrite(this, string, offset, length);\n                case 'latin1':\n                case 'binary':\n                  return latin1Write(this, string, offset, length);\n                case 'base64':\n                  // Warning: maxLength not taken into account in base64Write\n                  return base64Write(this, string, offset, length);\n                case 'ucs2':\n                case 'ucs-2':\n                case 'utf16le':\n                case 'utf-16le':\n                  return ucs2Write(this, string, offset, length);\n                default:\n                  if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding);\n                  encoding = ('' + encoding).toLowerCase();\n                  loweredCase = true;\n              }\n            }\n          };\n          Buffer.prototype.toJSON = function toJSON() {\n            return {\n              type: 'Buffer',\n              data: Array.prototype.slice.call(this._arr || this, 0)\n            };\n          };\n          function base64Slice(buf, start, end) {\n            if (start === 0 && end === buf.length) {\n              return base64.fromByteArray(buf);\n            } else {\n              return base64.fromByteArray(buf.slice(start, end));\n            }\n          }\n          function utf8Slice(buf, start, end) {\n            end = Math.min(buf.length, end);\n            var res = [];\n            var i = start;\n            while (i < end) {\n              var firstByte = buf[i];\n              var codePoint = null;\n              var bytesPerSequence = firstByte > 0xEF ? 4 : firstByte > 0xDF ? 3 : firstByte > 0xBF ? 2 : 1;\n              if (i + bytesPerSequence <= end) {\n                var secondByte, thirdByte, fourthByte, tempCodePoint;\n                switch (bytesPerSequence) {\n                  case 1:\n                    if (firstByte < 0x80) {\n                      codePoint = firstByte;\n                    }\n                    break;\n                  case 2:\n                    secondByte = buf[i + 1];\n                    if ((secondByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0x1F) << 0x6 | secondByte & 0x3F;\n                      if (tempCodePoint > 0x7F) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                    break;\n                  case 3:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | thirdByte & 0x3F;\n                      if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                    break;\n                  case 4:\n                    secondByte = buf[i + 1];\n                    thirdByte = buf[i + 2];\n                    fourthByte = buf[i + 3];\n                    if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n                      tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | fourthByte & 0x3F;\n                      if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n                        codePoint = tempCodePoint;\n                      }\n                    }\n                }\n              }\n              if (codePoint === null) {\n                // we did not generate a valid codePoint so insert a\n                // replacement char (U+FFFD) and advance only 1 byte\n                codePoint = 0xFFFD;\n                bytesPerSequence = 1;\n              } else if (codePoint > 0xFFFF) {\n                // encode to utf16 (surrogate pair dance)\n                codePoint -= 0x10000;\n                res.push(codePoint >>> 10 & 0x3FF | 0xD800);\n                codePoint = 0xDC00 | codePoint & 0x3FF;\n              }\n              res.push(codePoint);\n              i += bytesPerSequence;\n            }\n            return decodeCodePointsArray(res);\n          }\n\n          // Based on http://stackoverflow.com/a/22747272/680742, the browser with\n          // the lowest limit is Chrome, with 0x10000 args.\n          // We go 1 magnitude less, for safety\n          var MAX_ARGUMENTS_LENGTH = 0x1000;\n          function decodeCodePointsArray(codePoints) {\n            var len = codePoints.length;\n            if (len <= MAX_ARGUMENTS_LENGTH) {\n              return String.fromCharCode.apply(String, codePoints); // avoid extra slice()\n            }\n\n            // Decode in chunks to avoid \"call stack size exceeded\".\n            var res = '';\n            var i = 0;\n            while (i < len) {\n              res += String.fromCharCode.apply(String, codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH));\n            }\n            return res;\n          }\n          function asciiSlice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i] & 0x7F);\n            }\n            return ret;\n          }\n          function latin1Slice(buf, start, end) {\n            var ret = '';\n            end = Math.min(buf.length, end);\n            for (var i = start; i < end; ++i) {\n              ret += String.fromCharCode(buf[i]);\n            }\n            return ret;\n          }\n          function hexSlice(buf, start, end) {\n            var len = buf.length;\n            if (!start || start < 0) start = 0;\n            if (!end || end < 0 || end > len) end = len;\n            var out = '';\n            for (var i = start; i < end; ++i) {\n              out += hexSliceLookupTable[buf[i]];\n            }\n            return out;\n          }\n          function utf16leSlice(buf, start, end) {\n            var bytes = buf.slice(start, end);\n            var res = '';\n            for (var i = 0; i < bytes.length; i += 2) {\n              res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);\n            }\n            return res;\n          }\n          Buffer.prototype.slice = function slice(start, end) {\n            var len = this.length;\n            start = ~~start;\n            end = end === undefined ? len : ~~end;\n            if (start < 0) {\n              start += len;\n              if (start < 0) start = 0;\n            } else if (start > len) {\n              start = len;\n            }\n            if (end < 0) {\n              end += len;\n              if (end < 0) end = 0;\n            } else if (end > len) {\n              end = len;\n            }\n            if (end < start) end = start;\n            var newBuf = this.subarray(start, end);\n            // Return an augmented `Uint8Array` instance\n            Object.setPrototypeOf(newBuf, Buffer.prototype);\n            return newBuf;\n          };\n\n          /*\n           * Need to make sure that buffer isn't trying to write out of bounds.\n           */\n          function checkOffset(offset, ext, length) {\n            if (offset % 1 !== 0 || offset < 0) throw new RangeError('offset is not uint');\n            if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length');\n          }\n          Buffer.prototype.readUIntLE = function readUIntLE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n            return val;\n          };\n          Buffer.prototype.readUIntBE = function readUIntBE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              checkOffset(offset, byteLength, this.length);\n            }\n            var val = this[offset + --byteLength];\n            var mul = 1;\n            while (byteLength > 0 && (mul *= 0x100)) {\n              val += this[offset + --byteLength] * mul;\n            }\n            return val;\n          };\n          Buffer.prototype.readUInt8 = function readUInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            return this[offset];\n          };\n          Buffer.prototype.readUInt16LE = function readUInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] | this[offset + 1] << 8;\n          };\n          Buffer.prototype.readUInt16BE = function readUInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            return this[offset] << 8 | this[offset + 1];\n          };\n          Buffer.prototype.readUInt32LE = function readUInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return (this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16) + this[offset + 3] * 0x1000000;\n          };\n          Buffer.prototype.readUInt32BE = function readUInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] * 0x1000000 + (this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3]);\n          };\n          Buffer.prototype.readIntLE = function readIntLE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var val = this[offset];\n            var mul = 1;\n            var i = 0;\n            while (++i < byteLength && (mul *= 0x100)) {\n              val += this[offset + i] * mul;\n            }\n            mul *= 0x80;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n            return val;\n          };\n          Buffer.prototype.readIntBE = function readIntBE(offset, byteLength, noAssert) {\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) checkOffset(offset, byteLength, this.length);\n            var i = byteLength;\n            var mul = 1;\n            var val = this[offset + --i];\n            while (i > 0 && (mul *= 0x100)) {\n              val += this[offset + --i] * mul;\n            }\n            mul *= 0x80;\n            if (val >= mul) val -= Math.pow(2, 8 * byteLength);\n            return val;\n          };\n          Buffer.prototype.readInt8 = function readInt8(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 1, this.length);\n            if (!(this[offset] & 0x80)) return this[offset];\n            return (0xff - this[offset] + 1) * -1;\n          };\n          Buffer.prototype.readInt16LE = function readInt16LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset] | this[offset + 1] << 8;\n            return val & 0x8000 ? val | 0xFFFF0000 : val;\n          };\n          Buffer.prototype.readInt16BE = function readInt16BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 2, this.length);\n            var val = this[offset + 1] | this[offset] << 8;\n            return val & 0x8000 ? val | 0xFFFF0000 : val;\n          };\n          Buffer.prototype.readInt32LE = function readInt32LE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] | this[offset + 1] << 8 | this[offset + 2] << 16 | this[offset + 3] << 24;\n          };\n          Buffer.prototype.readInt32BE = function readInt32BE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return this[offset] << 24 | this[offset + 1] << 16 | this[offset + 2] << 8 | this[offset + 3];\n          };\n          Buffer.prototype.readFloatLE = function readFloatLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, true, 23, 4);\n          };\n          Buffer.prototype.readFloatBE = function readFloatBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 4, this.length);\n            return ieee754.read(this, offset, false, 23, 4);\n          };\n          Buffer.prototype.readDoubleLE = function readDoubleLE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, true, 52, 8);\n          };\n          Buffer.prototype.readDoubleBE = function readDoubleBE(offset, noAssert) {\n            offset = offset >>> 0;\n            if (!noAssert) checkOffset(offset, 8, this.length);\n            return ieee754.read(this, offset, false, 52, 8);\n          };\n          function checkInt(buf, value, offset, ext, max, min) {\n            if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance');\n            if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds');\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n          }\n          Buffer.prototype.writeUIntLE = function writeUIntLE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n            var mul = 1;\n            var i = 0;\n            this[offset] = value & 0xFF;\n            while (++i < byteLength && (mul *= 0x100)) {\n              this[offset + i] = value / mul & 0xFF;\n            }\n            return offset + byteLength;\n          };\n          Buffer.prototype.writeUIntBE = function writeUIntBE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            byteLength = byteLength >>> 0;\n            if (!noAssert) {\n              var maxBytes = Math.pow(2, 8 * byteLength) - 1;\n              checkInt(this, value, offset, byteLength, maxBytes, 0);\n            }\n            var i = byteLength - 1;\n            var mul = 1;\n            this[offset + i] = value & 0xFF;\n            while (--i >= 0 && (mul *= 0x100)) {\n              this[offset + i] = value / mul & 0xFF;\n            }\n            return offset + byteLength;\n          };\n          Buffer.prototype.writeUInt8 = function writeUInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n          Buffer.prototype.writeUInt16LE = function writeUInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n          };\n          Buffer.prototype.writeUInt16BE = function writeUInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 0xff;\n            return offset + 2;\n          };\n          Buffer.prototype.writeUInt32LE = function writeUInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n            this[offset + 3] = value >>> 24;\n            this[offset + 2] = value >>> 16;\n            this[offset + 1] = value >>> 8;\n            this[offset] = value & 0xff;\n            return offset + 4;\n          };\n          Buffer.prototype.writeUInt32BE = function writeUInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 0xff;\n            return offset + 4;\n          };\n          Buffer.prototype.writeIntLE = function writeIntLE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n            var i = 0;\n            var mul = 1;\n            var sub = 0;\n            this[offset] = value & 0xFF;\n            while (++i < byteLength && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n                sub = 1;\n              }\n              this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n            }\n            return offset + byteLength;\n          };\n          Buffer.prototype.writeIntBE = function writeIntBE(value, offset, byteLength, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              var limit = Math.pow(2, 8 * byteLength - 1);\n              checkInt(this, value, offset, byteLength, limit - 1, -limit);\n            }\n            var i = byteLength - 1;\n            var mul = 1;\n            var sub = 0;\n            this[offset + i] = value & 0xFF;\n            while (--i >= 0 && (mul *= 0x100)) {\n              if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n                sub = 1;\n              }\n              this[offset + i] = (value / mul >> 0) - sub & 0xFF;\n            }\n            return offset + byteLength;\n          };\n          Buffer.prototype.writeInt8 = function writeInt8(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);\n            if (value < 0) value = 0xff + value + 1;\n            this[offset] = value & 0xff;\n            return offset + 1;\n          };\n          Buffer.prototype.writeInt16LE = function writeInt16LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            return offset + 2;\n          };\n          Buffer.prototype.writeInt16BE = function writeInt16BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);\n            this[offset] = value >>> 8;\n            this[offset + 1] = value & 0xff;\n            return offset + 2;\n          };\n          Buffer.prototype.writeInt32LE = function writeInt32LE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n            this[offset] = value & 0xff;\n            this[offset + 1] = value >>> 8;\n            this[offset + 2] = value >>> 16;\n            this[offset + 3] = value >>> 24;\n            return offset + 4;\n          };\n          Buffer.prototype.writeInt32BE = function writeInt32BE(value, offset, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);\n            if (value < 0) value = 0xffffffff + value + 1;\n            this[offset] = value >>> 24;\n            this[offset + 1] = value >>> 16;\n            this[offset + 2] = value >>> 8;\n            this[offset + 3] = value & 0xff;\n            return offset + 4;\n          };\n          function checkIEEE754(buf, value, offset, ext, max, min) {\n            if (offset + ext > buf.length) throw new RangeError('Index out of range');\n            if (offset < 0) throw new RangeError('Index out of range');\n          }\n          function writeFloat(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              checkIEEE754(buf, value, offset, 4);\n            }\n            ieee754.write(buf, value, offset, littleEndian, 23, 4);\n            return offset + 4;\n          }\n          Buffer.prototype.writeFloatLE = function writeFloatLE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, true, noAssert);\n          };\n          Buffer.prototype.writeFloatBE = function writeFloatBE(value, offset, noAssert) {\n            return writeFloat(this, value, offset, false, noAssert);\n          };\n          function writeDouble(buf, value, offset, littleEndian, noAssert) {\n            value = +value;\n            offset = offset >>> 0;\n            if (!noAssert) {\n              checkIEEE754(buf, value, offset, 8);\n            }\n            ieee754.write(buf, value, offset, littleEndian, 52, 8);\n            return offset + 8;\n          }\n          Buffer.prototype.writeDoubleLE = function writeDoubleLE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, true, noAssert);\n          };\n          Buffer.prototype.writeDoubleBE = function writeDoubleBE(value, offset, noAssert) {\n            return writeDouble(this, value, offset, false, noAssert);\n          };\n\n          // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\n          Buffer.prototype.copy = function copy(target, targetStart, start, end) {\n            if (!Buffer.isBuffer(target)) throw new TypeError('argument should be a Buffer');\n            if (!start) start = 0;\n            if (!end && end !== 0) end = this.length;\n            if (targetStart >= target.length) targetStart = target.length;\n            if (!targetStart) targetStart = 0;\n            if (end > 0 && end < start) end = start;\n\n            // Copy 0 bytes; we're done\n            if (end === start) return 0;\n            if (target.length === 0 || this.length === 0) return 0;\n\n            // Fatal error conditions\n            if (targetStart < 0) {\n              throw new RangeError('targetStart out of bounds');\n            }\n            if (start < 0 || start >= this.length) throw new RangeError('Index out of range');\n            if (end < 0) throw new RangeError('sourceEnd out of bounds');\n\n            // Are we oob?\n            if (end > this.length) end = this.length;\n            if (target.length - targetStart < end - start) {\n              end = target.length - targetStart + start;\n            }\n            var len = end - start;\n            if (this === target && typeof Uint8Array.prototype.copyWithin === 'function') {\n              // Use built-in when available, missing from IE11\n              this.copyWithin(targetStart, start, end);\n            } else if (this === target && start < targetStart && targetStart < end) {\n              // descending copy from end\n              for (var i = len - 1; i >= 0; --i) {\n                target[i + targetStart] = this[i + start];\n              }\n            } else {\n              Uint8Array.prototype.set.call(target, this.subarray(start, end), targetStart);\n            }\n            return len;\n          };\n\n          // Usage:\n          //    buffer.fill(number[, offset[, end]])\n          //    buffer.fill(buffer[, offset[, end]])\n          //    buffer.fill(string[, offset[, end]][, encoding])\n          Buffer.prototype.fill = function fill(val, start, end, encoding) {\n            // Handle string cases:\n            if (typeof val === 'string') {\n              if (typeof start === 'string') {\n                encoding = start;\n                start = 0;\n                end = this.length;\n              } else if (typeof end === 'string') {\n                encoding = end;\n                end = this.length;\n              }\n              if (encoding !== undefined && typeof encoding !== 'string') {\n                throw new TypeError('encoding must be a string');\n              }\n              if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n                throw new TypeError('Unknown encoding: ' + encoding);\n              }\n              if (val.length === 1) {\n                var code = val.charCodeAt(0);\n                if (encoding === 'utf8' && code < 128 || encoding === 'latin1') {\n                  // Fast path: If `val` fits into a single byte, use that numeric value.\n                  val = code;\n                }\n              }\n            } else if (typeof val === 'number') {\n              val = val & 255;\n            } else if (typeof val === 'boolean') {\n              val = Number(val);\n            }\n\n            // Invalid ranges are not set to a default, so can range check early.\n            if (start < 0 || this.length < start || this.length < end) {\n              throw new RangeError('Out of range index');\n            }\n            if (end <= start) {\n              return this;\n            }\n            start = start >>> 0;\n            end = end === undefined ? this.length : end >>> 0;\n            if (!val) val = 0;\n            var i;\n            if (typeof val === 'number') {\n              for (i = start; i < end; ++i) {\n                this[i] = val;\n              }\n            } else {\n              var bytes = Buffer.isBuffer(val) ? val : Buffer.from(val, encoding);\n              var len = bytes.length;\n              if (len === 0) {\n                throw new TypeError('The value \"' + val + '\" is invalid for argument \"value\"');\n              }\n              for (i = 0; i < end - start; ++i) {\n                this[i + start] = bytes[i % len];\n              }\n            }\n            return this;\n          };\n\n          // HELPER FUNCTIONS\n          // ================\n\n          var INVALID_BASE64_RE = /[^+/0-9A-Za-z-_]/g;\n          function base64clean(str) {\n            // Node takes equal signs as end of the Base64 encoding\n            str = str.split('=')[0];\n            // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n            str = str.trim().replace(INVALID_BASE64_RE, '');\n            // Node converts strings with length < 2 to ''\n            if (str.length < 2) return '';\n            // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n            while (str.length % 4 !== 0) {\n              str = str + '=';\n            }\n            return str;\n          }\n          function utf8ToBytes(string, units) {\n            units = units || Infinity;\n            var codePoint;\n            var length = string.length;\n            var leadSurrogate = null;\n            var bytes = [];\n            for (var i = 0; i < length; ++i) {\n              codePoint = string.charCodeAt(i);\n\n              // is surrogate component\n              if (codePoint > 0xD7FF && codePoint < 0xE000) {\n                // last char was a lead\n                if (!leadSurrogate) {\n                  // no lead yet\n                  if (codePoint > 0xDBFF) {\n                    // unexpected trail\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  } else if (i + 1 === length) {\n                    // unpaired lead\n                    if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                    continue;\n                  }\n\n                  // valid lead\n                  leadSurrogate = codePoint;\n                  continue;\n                }\n\n                // 2 leads in a row\n                if (codePoint < 0xDC00) {\n                  if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n                  leadSurrogate = codePoint;\n                  continue;\n                }\n\n                // valid surrogate pair\n                codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;\n              } else if (leadSurrogate) {\n                // valid bmp char, but last char was a lead\n                if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);\n              }\n              leadSurrogate = null;\n\n              // encode utf8\n              if (codePoint < 0x80) {\n                if ((units -= 1) < 0) break;\n                bytes.push(codePoint);\n              } else if (codePoint < 0x800) {\n                if ((units -= 2) < 0) break;\n                bytes.push(codePoint >> 0x6 | 0xC0, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x10000) {\n                if ((units -= 3) < 0) break;\n                bytes.push(codePoint >> 0xC | 0xE0, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else if (codePoint < 0x110000) {\n                if ((units -= 4) < 0) break;\n                bytes.push(codePoint >> 0x12 | 0xF0, codePoint >> 0xC & 0x3F | 0x80, codePoint >> 0x6 & 0x3F | 0x80, codePoint & 0x3F | 0x80);\n              } else {\n                throw new Error('Invalid code point');\n              }\n            }\n            return bytes;\n          }\n          function asciiToBytes(str) {\n            var byteArray = [];\n            for (var i = 0; i < str.length; ++i) {\n              // Node's code seems to be doing this and not & 0x7F..\n              byteArray.push(str.charCodeAt(i) & 0xFF);\n            }\n            return byteArray;\n          }\n          function utf16leToBytes(str, units) {\n            var c, hi, lo;\n            var byteArray = [];\n            for (var i = 0; i < str.length; ++i) {\n              if ((units -= 2) < 0) break;\n              c = str.charCodeAt(i);\n              hi = c >> 8;\n              lo = c % 256;\n              byteArray.push(lo);\n              byteArray.push(hi);\n            }\n            return byteArray;\n          }\n          function base64ToBytes(str) {\n            return base64.toByteArray(base64clean(str));\n          }\n          function blitBuffer(src, dst, offset, length) {\n            for (var i = 0; i < length; ++i) {\n              if (i + offset >= dst.length || i >= src.length) break;\n              dst[i + offset] = src[i];\n            }\n            return i;\n          }\n\n          // ArrayBuffer or Uint8Array objects from other contexts (i.e. iframes) do not pass\n          // the `instanceof` check but they should be treated as of that type.\n          // See: https://github.com/feross/buffer/issues/166\n          function isInstance(obj, type) {\n            return obj instanceof type || obj != null && obj.constructor != null && obj.constructor.name != null && obj.constructor.name === type.name;\n          }\n          function numberIsNaN(obj) {\n            // For IE11 support\n            return obj !== obj; // eslint-disable-line no-self-compare\n          }\n\n          // Create lookup table for `toString('hex')`\n          // See: https://github.com/feross/buffer/issues/219\n          var hexSliceLookupTable = function () {\n            var alphabet = '0123456789abcdef';\n            var table = new Array(256);\n            for (var i = 0; i < 16; ++i) {\n              var i16 = i * 16;\n              for (var j = 0; j < 16; ++j) {\n                table[i16 + j] = alphabet[i] + alphabet[j];\n              }\n            }\n            return table;\n          }();\n        }, {\n          \"base64-js\": 29,\n          \"ieee754\": 32\n        }],\n        31: [function (require, module, exports) {\n          /******************************************************************************\n           * Created 2008-08-19.\n           *\n           * Dijkstra path-finding functions. Adapted from the Dijkstar Python project.\n           *\n           * Copyright (C) 2008\n           *   Wyatt Baldwin <self@wyattbaldwin.com>\n           *   All rights reserved\n           *\n           * Licensed under the MIT license.\n           *\n           *   http://www.opensource.org/licenses/mit-license.php\n           *\n           * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n           * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n           * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n           * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n           * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n           * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n           * THE SOFTWARE.\n           *****************************************************************************/\n          var dijkstra = {\n            single_source_shortest_paths: function (graph, s, d) {\n              // Predecessor map for each node that has been encountered.\n              // node ID => predecessor node ID\n              var predecessors = {};\n\n              // Costs of shortest paths from s to all nodes encountered.\n              // node ID => cost\n              var costs = {};\n              costs[s] = 0;\n\n              // Costs of shortest paths from s to all nodes encountered; differs from\n              // `costs` in that it provides easy access to the node that currently has\n              // the known shortest path from s.\n              // XXX: Do we actually need both `costs` and `open`?\n              var open = dijkstra.PriorityQueue.make();\n              open.push(s, 0);\n              var closest, u, v, cost_of_s_to_u, adjacent_nodes, cost_of_e, cost_of_s_to_u_plus_cost_of_e, cost_of_s_to_v, first_visit;\n              while (!open.empty()) {\n                // In the nodes remaining in graph that have a known cost from s,\n                // find the node, u, that currently has the shortest path from s.\n                closest = open.pop();\n                u = closest.value;\n                cost_of_s_to_u = closest.cost;\n\n                // Get nodes adjacent to u...\n                adjacent_nodes = graph[u] || {};\n\n                // ...and explore the edges that connect u to those nodes, updating\n                // the cost of the shortest paths to any or all of those nodes as\n                // necessary. v is the node across the current edge from u.\n                for (v in adjacent_nodes) {\n                  if (adjacent_nodes.hasOwnProperty(v)) {\n                    // Get the cost of the edge running from u to v.\n                    cost_of_e = adjacent_nodes[v];\n\n                    // Cost of s to u plus the cost of u to v across e--this is *a*\n                    // cost from s to v that may or may not be less than the current\n                    // known cost to v.\n                    cost_of_s_to_u_plus_cost_of_e = cost_of_s_to_u + cost_of_e;\n\n                    // If we haven't visited v yet OR if the current known cost from s to\n                    // v is greater than the new cost we just found (cost of s to u plus\n                    // cost of u to v across e), update v's cost in the cost list and\n                    // update v's predecessor in the predecessor list (it's now u).\n                    cost_of_s_to_v = costs[v];\n                    first_visit = typeof costs[v] === 'undefined';\n                    if (first_visit || cost_of_s_to_v > cost_of_s_to_u_plus_cost_of_e) {\n                      costs[v] = cost_of_s_to_u_plus_cost_of_e;\n                      open.push(v, cost_of_s_to_u_plus_cost_of_e);\n                      predecessors[v] = u;\n                    }\n                  }\n                }\n              }\n              if (typeof d !== 'undefined' && typeof costs[d] === 'undefined') {\n                var msg = ['Could not find a path from ', s, ' to ', d, '.'].join('');\n                throw new Error(msg);\n              }\n              return predecessors;\n            },\n            extract_shortest_path_from_predecessor_list: function (predecessors, d) {\n              var nodes = [];\n              var u = d;\n              var predecessor;\n              while (u) {\n                nodes.push(u);\n                predecessor = predecessors[u];\n                u = predecessors[u];\n              }\n              nodes.reverse();\n              return nodes;\n            },\n            find_path: function (graph, s, d) {\n              var predecessors = dijkstra.single_source_shortest_paths(graph, s, d);\n              return dijkstra.extract_shortest_path_from_predecessor_list(predecessors, d);\n            },\n            /**\n             * A very naive priority queue implementation.\n             */\n            PriorityQueue: {\n              make: function (opts) {\n                var T = dijkstra.PriorityQueue,\n                  t = {},\n                  key;\n                opts = opts || {};\n                for (key in T) {\n                  if (T.hasOwnProperty(key)) {\n                    t[key] = T[key];\n                  }\n                }\n                t.queue = [];\n                t.sorter = opts.sorter || T.default_sorter;\n                return t;\n              },\n              default_sorter: function (a, b) {\n                return a.cost - b.cost;\n              },\n              /**\n               * Add a new item to the queue and ensure the highest priority element\n               * is at the front of the queue.\n               */\n              push: function (value, cost) {\n                var item = {\n                  value: value,\n                  cost: cost\n                };\n                this.queue.push(item);\n                this.queue.sort(this.sorter);\n              },\n              /**\n               * Return the highest priority element in the queue.\n               */\n              pop: function () {\n                return this.queue.shift();\n              },\n              empty: function () {\n                return this.queue.length === 0;\n              }\n            }\n          };\n\n          // node.js module exports\n          if (typeof module !== 'undefined') {\n            module.exports = dijkstra;\n          }\n        }, {}],\n        32: [function (require, module, exports) {\n          exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n            var e, m;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var nBits = -7;\n            var i = isLE ? nBytes - 1 : 0;\n            var d = isLE ? -1 : 1;\n            var s = buffer[offset + i];\n            i += d;\n            e = s & (1 << -nBits) - 1;\n            s >>= -nBits;\n            nBits += eLen;\n            for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n            m = e & (1 << -nBits) - 1;\n            e >>= -nBits;\n            nBits += mLen;\n            for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}\n            if (e === 0) {\n              e = 1 - eBias;\n            } else if (e === eMax) {\n              return m ? NaN : (s ? -1 : 1) * Infinity;\n            } else {\n              m = m + Math.pow(2, mLen);\n              e = e - eBias;\n            }\n            return (s ? -1 : 1) * m * Math.pow(2, e - mLen);\n          };\n          exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n            var e, m, c;\n            var eLen = nBytes * 8 - mLen - 1;\n            var eMax = (1 << eLen) - 1;\n            var eBias = eMax >> 1;\n            var rt = mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0;\n            var i = isLE ? 0 : nBytes - 1;\n            var d = isLE ? 1 : -1;\n            var s = value < 0 || value === 0 && 1 / value < 0 ? 1 : 0;\n            value = Math.abs(value);\n            if (isNaN(value) || value === Infinity) {\n              m = isNaN(value) ? 1 : 0;\n              e = eMax;\n            } else {\n              e = Math.floor(Math.log(value) / Math.LN2);\n              if (value * (c = Math.pow(2, -e)) < 1) {\n                e--;\n                c *= 2;\n              }\n              if (e + eBias >= 1) {\n                value += rt / c;\n              } else {\n                value += rt * Math.pow(2, 1 - eBias);\n              }\n              if (value * c >= 2) {\n                e++;\n                c /= 2;\n              }\n              if (e + eBias >= eMax) {\n                m = 0;\n                e = eMax;\n              } else if (e + eBias >= 1) {\n                m = (value * c - 1) * Math.pow(2, mLen);\n                e = e + eBias;\n              } else {\n                m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);\n                e = 0;\n              }\n            }\n            for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n            e = e << mLen | m;\n            eLen += mLen;\n            for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n            buffer[offset + i - d] |= s * 128;\n          };\n        }, {}],\n        33: [function (require, module, exports) {\n          var toString = {}.toString;\n          module.exports = Array.isArray || function (arr) {\n            return toString.call(arr) == '[object Array]';\n          };\n        }, {}]\n      }, {}, [24])(24);\n    });\n  });\n  var index = {\n    name: 'qrcode',\n    props: {\n      /**\n       * The value of the QR code.\n       */\n      value: null,\n      /**\n       * The options for the QR code generator.\n       * {@link https://github.com/soldair/node-qrcode#qr-code-options}\n       */\n      options: Object,\n      /**\n       * The tag name of the component's root element.\n       */\n      tag: {\n        type: String,\n        default: 'canvas'\n      }\n    },\n    render: function render(createElement) {\n      return createElement(this.tag, this.$slots.default);\n    },\n    watch: {\n      $props: {\n        deep: true,\n        immediate: true,\n        /**\n         * Update the QR code when props changed.\n         */\n        handler: function handler() {\n          if (this.$el) {\n            this.generate();\n          }\n        }\n      }\n    },\n    methods: {\n      /**\n       * Generate QR code.\n       */\n      generate: function generate() {\n        var _this = this;\n        var options = this.options,\n          tag = this.tag;\n        var value = String(this.value);\n        if (tag === 'canvas') {\n          qrcode.toCanvas(this.$el, value, options, function (error) {\n            /* istanbul ignore if */\n            if (error) {\n              throw error;\n            }\n          });\n        } else if (tag === 'img') {\n          qrcode.toDataURL(value, options, function (error, url) {\n            /* istanbul ignore if */\n            if (error) {\n              throw error;\n            }\n            _this.$el.src = url;\n          });\n        } else {\n          qrcode.toString(value, options, function (error, string) {\n            /* istanbul ignore if */\n            if (error) {\n              throw error;\n            }\n            _this.$el.innerHTML = string;\n          });\n        }\n      }\n    },\n    mounted: function mounted() {\n      this.generate();\n    }\n  };\n  return index;\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/@chenfengyuan/vue-qrcode/dist/vue-qrcode.js\n");

/***/ }),

/***/ "./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&":
/*!***********************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js& ***!
  \***********************************************************************************************************************************************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _chenfengyuan_vue_qrcode__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @chenfengyuan/vue-qrcode */ \"./node_modules/@chenfengyuan/vue-qrcode/dist/vue-qrcode.js\");\n/* harmony import */ var _chenfengyuan_vue_qrcode__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_chenfengyuan_vue_qrcode__WEBPACK_IMPORTED_MODULE_0__);\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\n/* harmony default export */ __webpack_exports__[\"default\"] = ({\n  props: {\n    url: String\n  },\n  components: {\n    qrcode: (_chenfengyuan_vue_qrcode__WEBPACK_IMPORTED_MODULE_0___default())\n  },\n  data() {\n    return {\n      local_url: this.url,\n      qr_options: {\n        width: 1200,\n        margin: 4\n      },\n      canvas_dataurl: undefined,\n      show_fullscreen: false,\n      is_copied: false\n    };\n  },\n  created() {},\n  mounted() {\n    this.$nextTick(() => {\n      this.createDownloadFromCanvas();\n    });\n  },\n  beforeDestroy() {},\n  watch: {\n    local_url() {\n      this.$nextTick(() => {\n        this.createDownloadFromCanvas();\n      });\n    }\n  },\n  computed: {},\n  methods: {\n    createDownloadFromCanvas() {\n      if (this.$refs.qrCode) this.canvas_dataurl = this.$refs.qrCode.$el.toDataURL();\n    },\n    copyToClipboard() {\n      this.is_copied = false;\n\n      // Get the text field\n      var copyText = this.$refs.urlToCopy;\n\n      // Select the text field\n      copyText.select();\n      copyText.setSelectionRange(0, 99999); // For mobile devices\n\n      // Copy the text inside the text field\n      navigator.clipboard.writeText(copyText.value);\n      this.is_copied = true;\n    },\n    downloadCanvas() {\n      var link = document.createElement(\"a\");\n      link.download = \"qr_code.png\";\n      const canvas_dataurl = this.$refs.qrCode.$el.toDataURL();\n      link.href = canvas_dataurl;\n      link.click();\n    }\n  }\n});//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvYmFiZWwtbG9hZGVyL2xpYi9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0zN1swXS5ydWxlc1swXS51c2VbMF0hLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL3NyYy9hZGMtY29yZS91aS9RUkNvZGVXaXRoTGluay52dWU/dnVlJnR5cGU9c2NyaXB0Jmxhbmc9anMmLmpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBcURBO0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9hcHAvc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT9jNDQ2Il0sInNvdXJjZXNDb250ZW50IjpbIjx0ZW1wbGF0ZT5cbiAgPGRpdiBjbGFzcz1cIl9RUkNvZGVXaXRoTGlua1wiPlxuICAgIDxkaXYgY2xhc3M9XCJfbGlua1wiPlxuICAgICAgPGRpdiBjbGFzcz1cInUtaW5wdXRHcm91cFwiPlxuICAgICAgICA8aW5wdXRcbiAgICAgICAgICB0eXBlPVwidGV4dFwiXG4gICAgICAgICAgdi1tb2RlbD1cImxvY2FsX3VybFwiXG4gICAgICAgICAgcmVmPVwidXJsVG9Db3B5XCJcbiAgICAgICAgICBjbGFzcz1cIl91cmxJbnB1dFwiXG4gICAgICAgIC8+XG4gICAgICAgIDxidXR0b25cbiAgICAgICAgICB0eXBlPVwiYnV0dG9uXCJcbiAgICAgICAgICBjbGFzcz1cInUtYnV0dG9uIHUtYnV0dG9uX2ljb24gdS1zdWZmaXggX2NsaXBib2FyZEJ0blwiXG4gICAgICAgICAgQGNsaWNrPVwiY29weVRvQ2xpcGJvYXJkXCJcbiAgICAgICAgPlxuICAgICAgICAgIDxiLWljb24gaWNvbj1cImNsaXBib2FyZFwiIHYtaWY9XCIhaXNfY29waWVkXCIgLz5cbiAgICAgICAgICA8Yi1pY29uIGljb249XCJjbGlwYm9hcmQtY2hlY2tcIiB2LWVsc2UgLz5cbiAgICAgICAgPC9idXR0b24+XG4gICAgICA8L2Rpdj5cbiAgICAgIDxhIDpocmVmPVwibG9jYWxfdXJsXCIgdGFyZ2V0PVwiX2JsYW5rXCIgY2xhc3M9XCJ1LWJ1dHRvbkxpbmtcIj5cbiAgICAgICAge3sgJHQoXCJvcGVuXCIpIH19IDxiLWljb24gc2xvdD1cInByZWZpeFwiIGljb249XCJib3gtYXJyb3ctdXAtcmlnaHRcIiAvPlxuICAgICAgPC9hPlxuICAgIDwvZGl2PlxuXG4gICAgPHRyYW5zaXRpb24gbmFtZT1cInBhZ2VjaGFuZ2VcIiBtb2RlPVwib3V0LWluXCI+XG4gICAgICA8ZGl2IGNsYXNzPVwiX3FyXCIgOmtleT1cImxvY2FsX3VybFwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwiX2ZzQnV0dG9uXCI+XG4gICAgICAgICAgPEVkaXRCdG4gOmJ0bl90eXBlPVwiJ2Z1bGxzY3JlZW4nXCIgQGNsaWNrPVwic2hvd19mdWxsc2NyZWVuID0gdHJ1ZVwiIC8+XG4gICAgICAgIDwvZGl2PlxuICAgICAgICA8cXJjb2RlXG4gICAgICAgICAgcmVmPVwicXJDb2RlXCJcbiAgICAgICAgICA6dmFsdWU9XCJsb2NhbF91cmxcIlxuICAgICAgICAgIHRhZz1cImNhbnZhc1wiXG4gICAgICAgICAgOm9wdGlvbnM9XCJxcl9vcHRpb25zXCJcbiAgICAgICAgLz5cbiAgICAgICAgPEZ1bGxzY3JlZW5WaWV3IHYtaWY9XCJzaG93X2Z1bGxzY3JlZW5cIiBAY2xvc2U9XCJzaG93X2Z1bGxzY3JlZW4gPSBmYWxzZVwiPlxuICAgICAgICAgIDxxcmNvZGVcbiAgICAgICAgICAgIHJlZj1cInFyQ29kZVwiXG4gICAgICAgICAgICA6dmFsdWU9XCJsb2NhbF91cmxcIlxuICAgICAgICAgICAgdGFnPVwiY2FudmFzXCJcbiAgICAgICAgICAgIDpvcHRpb25zPVwicXJfb3B0aW9uc1wiXG4gICAgICAgICAgLz5cbiAgICAgICAgPC9GdWxsc2NyZWVuVmlldz5cbiAgICAgIDwvZGl2PlxuICAgIDwvdHJhbnNpdGlvbj5cbiAgICA8c21hbGw+XG4gICAgICA8YSBjbGFzcz1cInUtYnV0dG9uTGlua1wiIEBjbGljaz1cImRvd25sb2FkQ2FudmFzXCI+XG4gICAgICAgIHt7ICR0KFwiZG93bmxvYWRfdGhpc19xcl9jb2RlXCIpIH19XG4gICAgICA8L2E+XG4gICAgPC9zbWFsbD5cbiAgPC9kaXY+XG48L3RlbXBsYXRlPlxuPHNjcmlwdD5cbmltcG9ydCBxcmNvZGUgZnJvbSBcIkBjaGVuZmVuZ3l1YW4vdnVlLXFyY29kZVwiO1xuXG5leHBvcnQgZGVmYXVsdCB7XG4gIHByb3BzOiB7XG4gICAgdXJsOiBTdHJpbmcsXG4gIH0sXG4gIGNvbXBvbmVudHM6IHtcbiAgICBxcmNvZGUsXG4gIH0sXG4gIGRhdGEoKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGxvY2FsX3VybDogdGhpcy51cmwsXG4gICAgICBxcl9vcHRpb25zOiB7XG4gICAgICAgIHdpZHRoOiAxMjAwLFxuICAgICAgICBtYXJnaW46IDQsXG4gICAgICB9LFxuICAgICAgY2FudmFzX2RhdGF1cmw6IHVuZGVmaW5lZCxcbiAgICAgIHNob3dfZnVsbHNjcmVlbjogZmFsc2UsXG5cbiAgICAgIGlzX2NvcGllZDogZmFsc2UsXG4gICAgfTtcbiAgfSxcbiAgY3JlYXRlZCgpIHt9LFxuICBtb3VudGVkKCkge1xuICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHtcbiAgICAgIHRoaXMuY3JlYXRlRG93bmxvYWRGcm9tQ2FudmFzKCk7XG4gICAgfSk7XG4gIH0sXG4gIGJlZm9yZURlc3Ryb3koKSB7fSxcbiAgd2F0Y2g6IHtcbiAgICBsb2NhbF91cmwoKSB7XG4gICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7XG4gICAgICAgIHRoaXMuY3JlYXRlRG93bmxvYWRGcm9tQ2FudmFzKCk7XG4gICAgICB9KTtcbiAgICB9LFxuICB9LFxuICBjb21wdXRlZDoge30sXG4gIG1ldGhvZHM6IHtcbiAgICBjcmVhdGVEb3dubG9hZEZyb21DYW52YXMoKSB7XG4gICAgICBpZiAodGhpcy4kcmVmcy5xckNvZGUpXG4gICAgICAgIHRoaXMuY2FudmFzX2RhdGF1cmwgPSB0aGlzLiRyZWZzLnFyQ29kZS4kZWwudG9EYXRhVVJMKCk7XG4gICAgfSxcbiAgICBjb3B5VG9DbGlwYm9hcmQoKSB7XG4gICAgICB0aGlzLmlzX2NvcGllZCA9IGZhbHNlO1xuXG4gICAgICAvLyBHZXQgdGhlIHRleHQgZmllbGRcbiAgICAgIHZhciBjb3B5VGV4dCA9IHRoaXMuJHJlZnMudXJsVG9Db3B5O1xuXG4gICAgICAvLyBTZWxlY3QgdGhlIHRleHQgZmllbGRcbiAgICAgIGNvcHlUZXh0LnNlbGVjdCgpO1xuICAgICAgY29weVRleHQuc2V0U2VsZWN0aW9uUmFuZ2UoMCwgOTk5OTkpOyAvLyBGb3IgbW9iaWxlIGRldmljZXNcblxuICAgICAgLy8gQ29weSB0aGUgdGV4dCBpbnNpZGUgdGhlIHRleHQgZmllbGRcbiAgICAgIG5hdmlnYXRvci5jbGlwYm9hcmQud3JpdGVUZXh0KGNvcHlUZXh0LnZhbHVlKTtcblxuICAgICAgdGhpcy5pc19jb3BpZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgZG93bmxvYWRDYW52YXMoKSB7XG4gICAgICB2YXIgbGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJhXCIpO1xuICAgICAgbGluay5kb3dubG9hZCA9IFwicXJfY29kZS5wbmdcIjtcbiAgICAgIGNvbnN0IGNhbnZhc19kYXRhdXJsID0gdGhpcy4kcmVmcy5xckNvZGUuJGVsLnRvRGF0YVVSTCgpO1xuICAgICAgbGluay5ocmVmID0gY2FudmFzX2RhdGF1cmw7XG4gICAgICBsaW5rLmNsaWNrKCk7XG4gICAgfSxcbiAgfSxcbn07XG48L3NjcmlwdD5cbjxzdHlsZSBsYW5nPVwic2Nzc1wiIHNjb3BlZD5cbi5fUVJDb2RlV2l0aExpbmsge1xuICBkaXNwbGF5OiBmbGV4O1xuICBmbGV4LWZsb3c6IGNvbHVtbiBub3dyYXA7XG4gIGp1c3RpZnktY29udGVudDogc3RyZXRjaDtcbiAgYWxpZ24taXRlbXM6IHN0cmV0Y2g7XG5cbiAgZ2FwOiBjYWxjKHZhcigtLXNwYWNpbmcpIC8gMik7XG5cbiAgcGFkZGluZzogY2FsYyh2YXIoLS1zcGFjaW5nKSAqIDIpO1xuICBhc3BlY3QtcmF0aW86IDIxLzI5Ljc7XG5cbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XG4gIGJveC1zaGFkb3c6IDAgMnB4IDZweCByZ2IoMCAwIDAgLyAzMCUpO1xufVxuXG4uX2xpbmsge1xuICBkaXNwbGF5OiBibG9jaztcbiAgd2lkdGg6IDEwMCU7XG4gIHRleHQtYWxpZ246IGNlbnRlcjtcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcblxuICAvLyBkaXNwbGF5OiAtd2Via2l0LWJveDtcbiAgLy8gLXdlYmtpdC1ib3gtb3JpZW50OiB2ZXJ0aWNhbDtcbiAgLy8gLXdlYmtpdC1saW5lLWNsYW1wOiAxO1xuICAvLyBvdmVyZmxvdzogaGlkZGVuO1xufVxuLl9xciB7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcblxuICAuX2ZzQnV0dG9uIHtcbiAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgYm90dG9tOiAwO1xuICAgIGxlZnQ6IDA7XG4gICAgbWFyZ2luOiBjYWxjKHZhcigtLXNwYWNpbmcpIC8gMik7XG4gIH1cblxuICBjYW52YXMge1xuICAgIGRpc3BsYXk6IGJsb2NrO1xuICAgIC8vIGJvcmRlcjogMnB4IHNvbGlkIHZhcigtLWMtZ3Jpcyk7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBoZWlnaHQ6IGF1dG8gIWltcG9ydGFudDtcbiAgICBhc3BlY3QtcmF0aW86IDE7XG4gIH1cblxuICA6OnYtZGVlcCAuX2ZzSW1nIGNhbnZhcyB7XG4gICAgYm9yZGVyOiBub25lICFpbXBvcnRhbnQ7XG4gICAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcbiAgICBoZWlnaHQ6IDEwMCUgIWltcG9ydGFudDtcbiAgICBhc3BlY3QtcmF0aW86IG5vbmU7XG4gIH1cbn1cblxuLl91cmxJbnB1dCB7XG4gIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICBvdmVyZmxvdzogaGlkZGVuO1xufVxuLl9jbGlwYm9hcmRCdG4ge1xuICBmb250LXNpemU6IDFyZW07XG4gIG1hcmdpbjogY2FsYyh2YXIoLS1zcGFjaW5nKSAvIDIpO1xufVxuPC9zdHlsZT5cbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/babel-loader/lib/index.js??clonedRuleSet-37[0].rules[0].use[0]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=script&lang=js&\n");

/***/ }),

/***/ "./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&":
/*!**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& ***!
  \**********************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************/
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/noSourceMaps.js */ \"./node_modules/css-loader/dist/runtime/noSourceMaps.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0__);\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../../node_modules/css-loader/dist/runtime/api.js */ \"./node_modules/css-loader/dist/runtime/api.js\");\n/* harmony import */ var _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(_node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1__);\n// Imports\n\n\nvar ___CSS_LOADER_EXPORT___ = _node_modules_css_loader_dist_runtime_api_js__WEBPACK_IMPORTED_MODULE_1___default()((_node_modules_css_loader_dist_runtime_noSourceMaps_js__WEBPACK_IMPORTED_MODULE_0___default()));\n// Module\n___CSS_LOADER_EXPORT___.push([module.id, \"._QRCodeWithLink[data-v-71cc997f] {\\n  display: flex;\\n  flex-flow: column nowrap;\\n  justify-content: stretch;\\n  align-items: stretch;\\n  gap: calc(var(--spacing) / 2);\\n  padding: calc(var(--spacing) * 2);\\n  aspect-ratio: 21/29.7;\\n  align-items: center;\\n  justify-content: space-around;\\n  box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);\\n}\\n._link[data-v-71cc997f] {\\n  display: block;\\n  width: 100%;\\n  text-align: center;\\n  word-break: break-word;\\n}\\n._qr[data-v-71cc997f] {\\n  position: relative;\\n}\\n._qr ._fsButton[data-v-71cc997f] {\\n  position: absolute;\\n  bottom: 0;\\n  left: 0;\\n  margin: calc(var(--spacing) / 2);\\n}\\n._qr canvas[data-v-71cc997f] {\\n  display: block;\\n  width: 100% !important;\\n  height: auto !important;\\n  aspect-ratio: 1;\\n}\\n._qr[data-v-71cc997f]  ._fsImg canvas {\\n  border: none !important;\\n  width: 100% !important;\\n  height: 100% !important;\\n  aspect-ratio: none;\\n}\\n._urlInput[data-v-71cc997f] {\\n  text-overflow: ellipsis;\\n  white-space: nowrap;\\n  overflow: hidden;\\n}\\n._clipboardBtn[data-v-71cc997f] {\\n  font-size: 1rem;\\n  margin: calc(var(--spacing) / 2);\\n}\", \"\"]);\n// Exports\n/* harmony default export */ __webpack_exports__[\"default\"] = (___CSS_LOADER_EXPORT___);\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMV0hLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTlbMF0ucnVsZXNbMF0udXNlWzJdIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTE5WzBdLnJ1bGVzWzBdLnVzZVszXSEuL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxY2M5OTdmJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSYuanMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT8zZTM3Il0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9OT19TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvbm9Tb3VyY2VNYXBzLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfSU1QT1JUX19fIGZyb20gXCIuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9FWFBPUlRfX18gPSBfX19DU1NfTE9BREVSX0FQSV9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9BUElfTk9fU09VUkNFTUFQX0lNUE9SVF9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCIuX1FSQ29kZVdpdGhMaW5rW2RhdGEtdi03MWNjOTk3Zl0ge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZmxvdzogY29sdW1uIG5vd3JhcDtcXG4gIGp1c3RpZnktY29udGVudDogc3RyZXRjaDtcXG4gIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgZ2FwOiBjYWxjKHZhcigtLXNwYWNpbmcpIC8gMik7XFxuICBwYWRkaW5nOiBjYWxjKHZhcigtLXNwYWNpbmcpICogMik7XFxuICBhc3BlY3QtcmF0aW86IDIxLzI5Ljc7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBzcGFjZS1hcm91bmQ7XFxuICBib3gtc2hhZG93OiAwIDJweCA2cHggcmdiYSgwLCAwLCAwLCAwLjMpO1xcbn1cXG4uX2xpbmtbZGF0YS12LTcxY2M5OTdmXSB7XFxuICBkaXNwbGF5OiBibG9jaztcXG4gIHdpZHRoOiAxMDAlO1xcbiAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgd29yZC1icmVhazogYnJlYWstd29yZDtcXG59XFxuLl9xcltkYXRhLXYtNzFjYzk5N2ZdIHtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG59XFxuLl9xciAuX2ZzQnV0dG9uW2RhdGEtdi03MWNjOTk3Zl0ge1xcbiAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgYm90dG9tOiAwO1xcbiAgbGVmdDogMDtcXG4gIG1hcmdpbjogY2FsYyh2YXIoLS1zcGFjaW5nKSAvIDIpO1xcbn1cXG4uX3FyIGNhbnZhc1tkYXRhLXYtNzFjYzk5N2ZdIHtcXG4gIGRpc3BsYXk6IGJsb2NrO1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG4gIGhlaWdodDogYXV0byAhaW1wb3J0YW50O1xcbiAgYXNwZWN0LXJhdGlvOiAxO1xcbn1cXG4uX3FyW2RhdGEtdi03MWNjOTk3Zl0gIC5fZnNJbWcgY2FudmFzIHtcXG4gIGJvcmRlcjogbm9uZSAhaW1wb3J0YW50O1xcbiAgd2lkdGg6IDEwMCUgIWltcG9ydGFudDtcXG4gIGhlaWdodDogMTAwJSAhaW1wb3J0YW50O1xcbiAgYXNwZWN0LXJhdGlvOiBub25lO1xcbn1cXG4uX3VybElucHV0W2RhdGEtdi03MWNjOTk3Zl0ge1xcbiAgdGV4dC1vdmVyZmxvdzogZWxsaXBzaXM7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgb3ZlcmZsb3c6IGhpZGRlbjtcXG59XFxuLl9jbGlwYm9hcmRCdG5bZGF0YS12LTcxY2M5OTdmXSB7XFxuICBmb250LXNpemU6IDFyZW07XFxuICBtYXJnaW46IGNhbGModmFyKC0tc3BhY2luZykgLyAyKTtcXG59XCIsIFwiXCJdKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIl0sIm5hbWVzIjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\n");

/***/ }),

/***/ "./node_modules/vue-style-loader/index.js??clonedRuleSet-19[0].rules[0].use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&":
/*!****************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/vue-style-loader/index.js??clonedRuleSet-19[0].rules[0].use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& ***!

/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

eval("// style-loader: Adds some css to the DOM by adding a <style> tag\n\n// load the styles\nvar content = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\");\nif(content.__esModule) content = content.default;\nif(typeof content === 'string') content = [[module.id, content, '']];\nif(content.locals) module.exports = content.locals;\n// add the styles to the DOM\nvar add = (__webpack_require__(/*! !../../../node_modules/vue-style-loader/lib/addStylesClient.js */ \"./node_modules/vue-style-loader/lib/addStylesClient.js\")[\"default\"])\nvar update = add(\"d9ab714e\", content, false, {\"sourceMap\":false,\"shadowMode\":false});\n// Hot Module Replacement\nif(true) {\n // When the styles change, update the <style> tags\n if(!content.locals) {\n   module.hot.accept(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\", function() {\n     var newContent = __webpack_require__(/*! !!../../../node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!../../../node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!../../../node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!../../../node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!../../../node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true& */ \"./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\");\n     if(newContent.__esModule) newContent = newContent.default;\n     if(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n     update(newContent);\n   });\n }\n // When the module is disposed, remove the <style> tags\n module.hot.dispose(function() { update(); });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiLi9ub2RlX21vZHVsZXMvdnVlLXN0eWxlLWxvYWRlci9pbmRleC5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMF0hLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMV0hLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvbG9hZGVycy9zdHlsZVBvc3RMb2FkZXIuanMhLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTlbMF0ucnVsZXNbMF0udXNlWzJdIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTE5WzBdLnJ1bGVzWzBdLnVzZVszXSEuL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9pbmRleC5qcz8/dnVlLWxvYWRlci1vcHRpb25zIS4vc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxY2M5OTdmJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSYuanMiLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vYXBwLy4vc3JjL2FkYy1jb3JlL3VpL1FSQ29kZVdpdGhMaW5rLnZ1ZT80ZjAwIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIHN0eWxlLWxvYWRlcjogQWRkcyBzb21lIGNzcyB0byB0aGUgRE9NIGJ5IGFkZGluZyBhIDxzdHlsZT4gdGFnXG5cbi8vIGxvYWQgdGhlIHN0eWxlc1xudmFyIGNvbnRlbnQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTE5WzBdLnJ1bGVzWzBdLnVzZVszXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxY2M5OTdmJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIik7XG5pZihjb250ZW50Ll9fZXNNb2R1bGUpIGNvbnRlbnQgPSBjb250ZW50LmRlZmF1bHQ7XG5pZih0eXBlb2YgY29udGVudCA9PT0gJ3N0cmluZycpIGNvbnRlbnQgPSBbW21vZHVsZS5pZCwgY29udGVudCwgJyddXTtcbmlmKGNvbnRlbnQubG9jYWxzKSBtb2R1bGUuZXhwb3J0cyA9IGNvbnRlbnQubG9jYWxzO1xuLy8gYWRkIHRoZSBzdHlsZXMgdG8gdGhlIERPTVxudmFyIGFkZCA9IHJlcXVpcmUoXCIhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Z1ZS1zdHlsZS1sb2FkZXIvbGliL2FkZFN0eWxlc0NsaWVudC5qc1wiKS5kZWZhdWx0XG52YXIgdXBkYXRlID0gYWRkKFwiZDlhYjcxNGVcIiwgY29udGVudCwgZmFsc2UsIHtcInNvdXJjZU1hcFwiOmZhbHNlLFwic2hhZG93TW9kZVwiOmZhbHNlfSk7XG4vLyBIb3QgTW9kdWxlIFJlcGxhY2VtZW50XG5pZihtb2R1bGUuaG90KSB7XG4gLy8gV2hlbiB0aGUgc3R5bGVzIGNoYW5nZSwgdXBkYXRlIHRoZSA8c3R5bGU+IHRhZ3NcbiBpZighY29udGVudC5sb2NhbHMpIHtcbiAgIG1vZHVsZS5ob3QuYWNjZXB0KFwiISEuLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMV0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2xvYWRlcnMvc3R5bGVQb3N0TG9hZGVyLmpzIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9wb3N0Y3NzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbMl0hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzPz9jbG9uZWRSdWxlU2V0LTE5WzBdLnJ1bGVzWzBdLnVzZVszXSEuLi8uLi8uLi9ub2RlX21vZHVsZXMvQHZ1ZS92dWUtbG9hZGVyLXYxNS9saWIvaW5kZXguanM/P3Z1ZS1sb2FkZXItb3B0aW9ucyEuL1FSQ29kZVdpdGhMaW5rLnZ1ZT92dWUmdHlwZT1zdHlsZSZpbmRleD0wJmlkPTcxY2M5OTdmJmxhbmc9c2NzcyZzY29wZWQ9dHJ1ZSZcIiwgZnVuY3Rpb24oKSB7XG4gICAgIHZhciBuZXdDb250ZW50ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTlbMF0ucnVsZXNbMF0udXNlWzFdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9AdnVlL3Z1ZS1sb2FkZXItdjE1L2xpYi9sb2FkZXJzL3N0eWxlUG9zdExvYWRlci5qcyEuLi8uLi8uLi9ub2RlX21vZHVsZXMvcG9zdGNzcy1sb2FkZXIvZGlzdC9janMuanM/P2Nsb25lZFJ1bGVTZXQtMTlbMF0ucnVsZXNbMF0udXNlWzJdIS4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcz8/Y2xvbmVkUnVsZVNldC0xOVswXS5ydWxlc1swXS51c2VbM10hLi4vLi4vLi4vbm9kZV9tb2R1bGVzL0B2dWUvdnVlLWxvYWRlci12MTUvbGliL2luZGV4LmpzPz92dWUtbG9hZGVyLW9wdGlvbnMhLi9RUkNvZGVXaXRoTGluay52dWU/dnVlJnR5cGU9c3R5bGUmaW5kZXg9MCZpZD03MWNjOTk3ZiZsYW5nPXNjc3Mmc2NvcGVkPXRydWUmXCIpO1xuICAgICBpZihuZXdDb250ZW50Ll9fZXNNb2R1bGUpIG5ld0NvbnRlbnQgPSBuZXdDb250ZW50LmRlZmF1bHQ7XG4gICAgIGlmKHR5cGVvZiBuZXdDb250ZW50ID09PSAnc3RyaW5nJykgbmV3Q29udGVudCA9IFtbbW9kdWxlLmlkLCBuZXdDb250ZW50LCAnJ11dO1xuICAgICB1cGRhdGUobmV3Q29udGVudCk7XG4gICB9KTtcbiB9XG4gLy8gV2hlbiB0aGUgbW9kdWxlIGlzIGRpc3Bvc2VkLCByZW1vdmUgdGhlIDxzdHlsZT4gdGFnc1xuIG1vZHVsZS5ob3QuZGlzcG9zZShmdW5jdGlvbigpIHsgdXBkYXRlKCk7IH0pO1xufSJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/vue-style-loader/index.js??clonedRuleSet-19[0].rules[0].use[0]!./node_modules/css-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[1]!./node_modules/@vue/vue-loader-v15/lib/loaders/stylePostLoader.js!./node_modules/postcss-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[2]!./node_modules/sass-loader/dist/cjs.js??clonedRuleSet-19[0].rules[0].use[3]!./node_modules/@vue/vue-loader-v15/lib/index.js??vue-loader-options!./src/adc-core/ui/QRCodeWithLink.vue?vue&type=style&index=0&id=71cc997f&lang=scss&scoped=true&\n");

/***/ })

}]);